(* ::Package:: *)

(* ::Section:: *)
(*Chapter 1. Elementary Arithmetic*)


(* ::Input:: *)
(*1+2+3*)


(* ::Input:: *)
(*Sum[i,{i,5}]*)


(* ::Input:: *)
(*Product[i,{i,5}]*)


(* ::Input:: *)
(*5^2*)


(* ::Input:: *)
(*3^4*)


(* ::Input:: *)
(*10^12*)


(* ::Input:: *)
(*2^2^2^2*)


(* ::Input:: *)
(*(4-2)*(3+4)*)


(* ::Input:: *)
(*120000*123*)


(* ::Input:: *)
(*Sum[i,{i,-3,3}]*)


(* ::Input:: *)
(*24/3*)


(* ::Input:: *)
(*5^100*)


(* ::Input:: *)
(*100-5^2*)


(* ::Input:: *)
(*6*5^2+7*)


(* ::Input:: *)
(*3^2-2^3*)


(* ::Input:: *)
(*2^3*3^2*)


(* ::Input:: *)
(*2*(8+-11)*)


(* ::Input:: *)
(*1/0*)


(* ::Input:: *)
(*ComplexInfinity*)


(* ::Section:: *)
(*Chapter 2. Functions*)


(* ::Input:: *)
(*Plus[7,6,5]*)


(* ::Input:: *)
(*Times[2,Plus[3,4]]*)


(* ::Input:: *)
(*Max[Times[6,8],Times[5,9]]*)


(* ::Input:: *)
(*RandomInteger[1000]*)


(* ::Input:: *)
(*Plus[10,RandomInteger[20]]*)


(* ::Input:: *)
(*Times[5,Times[4,Times[3,2]]]*)


(* ::Input:: *)
(*Subtract[2,3]*)


(* ::Input:: *)
(*Times[Plus[8,7],Plus[9,2]]*)


(* ::Input:: *)
(*Divide[Subtract[26,89],9]*)


(* ::Input:: *)
(*Subtract[100,Power[5,2]]*)


(* ::Input:: *)
(*Max[Power[3,5],Power[5,3]]*)


(* ::Input:: *)
(*Times[3,Max[Power[4,3],Power[3,4]]]*)


(* ::Input:: *)
(*Plus[RandomInteger[1000],RandomInteger[1000]]*)


(* ::Section:: *)
(*Chapter 3. Lists*)


(* ::Input:: *)
(*Range[4]*)


(* ::Input:: *)
(*Range[100]*)


(* ::Input:: *)
(*Reverse[Range[4]]*)


(* ::Input:: *)
(*Reverse[Range[50]]*)


(* ::Input:: *)
(*Join[Range[4],Reverse[Range[4]]]*)


(* ::Input:: *)
(*ListPlot[Join[Range[100],Reverse[Range[100]]]]*)


(* ::Input:: *)
(*Range[RandomInteger[10]]*)


(* ::Input:: *)
(*Range[10]==Reverse[Reverse[Range[10]]]*)


(* ::Input:: *)
(*Range[5]==Join[{1,2},Join[{3,4},{5}]]*)


(* ::Input:: *)
(*Join[Range[10],Range[10],Range[5]]*)


(* ::Input:: *)
(*Join[Range[20],Reverse[Range[20]]]==Reverse[Join[Range[20],Reverse[Range[20]]]]*)


(* ::Input:: *)
(*Reverse[Reverse[Range[4]]]*)


(* ::Input:: *)
(*Join[Range[5],Reverse[Range[4]]]*)


(* ::Input:: *)
(*Join[Reverse[Range[3]],Join[Reverse[Range[4]],Reverse[Range[5]]]]*)


(* ::Input:: *)
(*ListPlot[Plus[9,Range[5]]]*)


(* ::Input:: *)
(*Join[Range[10],Reverse[Range[10]],Range[10]]*)


(* ::Section:: *)
(*Chapter 4. Displaying Lists*)


(* ::Input:: *)
(*BarChart[{1,1,2,3,5}]*)


(* ::Input:: *)
(*PieChart[Range[10]]*)


(* ::Input:: *)
(*BarChart[Reverse[Range[20]]]*)


(* ::Input:: *)
(*Column[Range[5]]*)


(* ::Input:: *)
(*NumberLinePlot[Power[Range[5],2]]*)


(* ::Input:: *)
(*{PieChart[{1}],PieChart[{1,1}],PieChart[{1,1,1}]}*)


(* ::Input:: *)
(*Column[{PieChart[{1}],PieChart[{1,1}],PieChart[{1,1,1}]}]*)


(* ::Input:: *)
(*BarChart[Join[Range[5],Reverse[Range[5]]]]*)


(* ::Input:: *)
(*List[PieChart[Range[10]],BarChart[Range[10]],ListLinePlot[Range[10]]]*)


(* ::Input:: *)
(*List[PieChart[Fibonacci[Range[10]]],BarChart[Fibonacci[Range[10]]]]*)


(* ::Input:: *)
(*Column[List[NumberLinePlot[Range[5]],NumberLinePlot[Range[5]]]]*)


(* ::Input:: *)
(*NumberLinePlot[1/Range[2,9]]*)


(* ::Section:: *)
(*Chapter 5. Operations on Lists*)


(* ::Input:: *)
(*Reverse[(Range[10])^2]*)


(* ::Input:: *)
(*Total[(Range[10])^2]*)


(* ::Input:: *)
(*ListPlot[(Range[10])^2]*)


(* ::Input:: *)
(*Sort[Join[Range[4],Range[4]]]*)


(* ::Input:: *)
(*Range[0,10]+10*)


(* ::Input:: *)
(*Sort[Join[Range[5]^2,Range[5]^3]]*)


(* ::Input:: *)
(*Length[IntegerDigits[2^128]]*)


(* ::Input:: *)
(*First[IntegerDigits[2^32]]*)


(* ::Input:: *)
(*Take[IntegerDigits[2^100],10]*)


(* ::Input:: *)
(*Max[IntegerDigits[2^20]]*)


(* ::Input:: *)
(*Count[IntegerDigits[2^1000],0]*)


(* ::Input:: *)
(*Part[Sort[IntegerDigits[2^20]],1]*)


(* ::Input:: *)
(*ListLinePlot[IntegerDigits[2^128]]*)


(* ::Input:: *)
(*Take[Drop[Range[100],10],10]*)


(* ::Input:: *)
(*Times[3,Range[10]]*)


(* ::Input:: *)
(*Times[Range[10],Range[10]]*)


(* ::Input:: *)
(*Last[IntegerDigits[2^37]]*)


(* ::Input:: *)
(*Part[Reverse[IntegerDigits[2^32]],2]*)


(* ::Input:: *)
(*Total[IntegerDigits[3^126]]*)


(* ::Input:: *)
(*PieChart[IntegerDigits[2^32]]*)


(* ::Input:: *)
(*List[PieChart[IntegerDigits[2^20]],PieChart[IntegerDigits[2^40]],PieChart[IntegerDigits[2^60]]]*)


(* ::Section:: *)
(*Chapter 6. Tables*)


(* ::Input:: *)
(*Table[1000,5]*)


(* ::Input:: *)
(*Table[n^3,{n,10,20}]*)


(* ::Input:: *)
(*NumberLinePlot[Table[n^2,{n,20}]]*)


(* ::Input:: *)
(*Range[2,20,2]*)


(* ::Input:: *)
(*Table[n,{n,10}]*)


(* ::Input:: *)
(*BarChart[Table[n^2,{n,10}]]*)


(* ::Input:: *)
(*Table[IntegerDigits[n^2],{n,10}]*)


(* ::Input:: *)
(*ListLinePlot[Table[Length[IntegerDigits[n^2]],{n,100}]]*)


(* ::Input:: *)
(*Table[First[IntegerDigits[n^2]],{n,20}]*)


(* ::Input:: *)
(*ListLinePlot[Table[First[IntegerDigits[n^2]],{n,100}]]*)


(* ::Input:: *)
(*Table[n^3-n^2,{n,10}]*)


(* ::Input:: *)
(*Table[2n-1,{n,50}]*)


(* ::Input:: *)
(*Table[2n,{n,50}]^2*)


(* ::Input:: *)
(*Range[-3,2]*)


(* ::Input:: *)
(*Table[{n,n^2,n^3},{n,20}]*)


(* ::Input:: *)
(*ListLinePlot[Table[Last[IntegerDigits[n^2]],{n,100}]]*)


(* ::Input:: *)
(*ListLinePlot[Table[First[IntegerDigits[3n]],{n,100}]]*)


(* ::Input:: *)
(*ListLinePlot[Table[Total[IntegerDigits[n]],{n,200}]]*)


(* ::Input:: *)
(*ListLinePlot[Table[Total[IntegerDigits[n^2]],{n,100}]]*)


(* ::Input:: *)
(*NumberLinePlot[Table[1/n,{n,20}]]*)


(* ::Input:: *)
(*ListLinePlot[Table[RandomInteger[n],{n,100}]]*)


(* ::Section:: *)
(*Chapter 7. Colors and Styles*)


(* ::Input:: *)
(*{Red, Yellow, Green}*)


(* ::Input:: *)
(*Column[{Red,Yellow,Green}]*)


(* ::Input:: *)
(*ColorNegate[Orange]*)


(* ::Input:: *)
(*Table[Hue[x],{x,0,1,0.02}]*)


(* ::Input:: *)
(*Table[RGBColor[1,x,1],{x,0,1,0.05}]*)


(* ::Input:: *)
(*Blend[{Pink,Yellow}]*)


(* ::Input:: *)
(*Table[Blend[{Yellow,Hue[x]}],{x,0,1,0.05}]*)


(* ::Input:: *)
(*Table[Style[x,Hue[x]],{x,0,1,0.1}]*)


(* ::Input:: *)
(*Style[Purple,100]*)


(* ::Input:: *)
(*Table[Style[Red,x],{x,10,100,10}]*)


(* ::Input:: *)
(*Style[999,Red,100]*)


(* ::Input:: *)
(*Table[Style[x^2,x^2],{x,1,10}]*)


(* ::Input:: *)
(*Table[Part[{Red,Green,Blue},RandomInteger[{1,3}]],{100}]*)


(* ::Input:: *)
(*Table[Style[Part[IntegerDigits[2^1000],n],3*Part[IntegerDigits[2^1000],n]],{n,50}]*)


(* ::Input:: *)
(*Column[Table[Hue[x],{x,0,1,0.05}]]*)


(* ::Input:: *)
(*Table[RGBColor[1-x,x,0],{x,0,1,0.05}]*)


(* ::Input:: *)
(*Join[Table[RGBColor[0,x,0],{x,0,1,0.1}],Reverse[Table[RGBColor[0,x,0],{x,0,1,0.1}]]]*)


(* ::Input:: *)
(*Blend[{Red,ColorNegate[Red]}]*)


(* ::Input:: *)
(*Blend[Table[Hue[x],{x,0,1,0.1}]]*)


(* ::Input:: *)
(*Blend[{Blend[{Red,White}],White}]*)


(* ::Input:: *)
(*Table[RandomColor[],{100}]*)


(* ::Input:: *)
(*Table[Style[Column[Range[10]],Part[{Red,Green},n]],{n,1,2}]*)


(* ::Input:: *)
(*Table[Column[{Style[n,Red],Style[n,Green]}],{n,1,10}]*)


(* ::Input:: *)
(*Table[Column[{Style[n,Plain],Style[n,Bold],Style[n,Italic]}],{n,1,10}]*)


(* ::Section:: *)
(*Chapter 8. Graphics*)


(* ::Input:: *)
(*Graphics[Style[Circle[],Red]]*)


(* ::Input:: *)
(*Table[Graphics[Style[Disk[],Hue[x]]],{x,0,1,0.1}]*)


(* ::Input:: *)
(*Graphics3D[Style[Cylinder[],Purple]]*)


(* ::Section:: *)
(*Chapter 9. Manipululate*)


(* ::Input:: *)
(*Manipulate[Range[n],{n,0,100,1}]*)


(* ::Input:: *)
(*Manipulate[ListPlot[Range[n]],{n,5,50,1}]*)


(* ::Input:: *)
(*Manipulate[Column[Table[x,{n}]],{n,1,10,1}]*)


(* ::Input:: *)
(*Manipulate[Graphics[Style[Disk[],Hue[x]]],{x,0,1}]*)


(* ::Input:: *)
(*Manipulate[Graphics[Style[Disk[],color]],{color,{Red,Green,Blue}}]*)


(* ::Input:: *)
(*Manipulate[IntegerDigits[n],{n,1000,9999,1}]*)


(* ::Input:: *)
(*Manipulate[Table[Hue[x],{x,0,1,1/n}],{n,5,50,1}]*)


(* ::Input:: *)
(*Manipulate[Table[Graphics[Style[Disk[],Hue[x]]],{n}],{n,1,10,1},{x,0,1}]*)


(* ::Input:: *)
(*Manipulate[PieChart[Table[1,{n}]],{n,1,10,1}]*)


(* ::Input:: *)
(*Manipulate[BarChart[IntegerDigits[n]],{n,100,999,1}]*)


(* ::Input:: *)
(*Manipulate[Table[RandomColor[],{n}],{n,1,50,1}]*)


(* ::Input:: *)
(*Manipulate[Column[n^Range[m]],{n,1,25,1},{m,1,10,1}]*)


(* ::Input:: *)
(*Manipulate[NumberLinePlot[Range[10]^n],{n,0,5,1}]*)


(* ::Input:: *)
(*Manipulate[Graphics3D[Style[Sphere[],RGBColor[x,1-x,0]]],{x,0,1}]*)


(* ::Input:: *)
(*Manipulate[ListPlot[Range[100]^x],{x,-1,1}]*)


(* ::Input:: *)
(*Manipulate[ListPlot[Range[100]^x], {{x, 0.25}, -1, 1}]*)


(* ::Input:: *)
(*Manipulate[Style[1000,n],{n,5,100,1}]*)


(* ::Input:: *)
(*Manipulate[BarChart[{a,b,c,d}],{a,0,10},{b,0,10},{c,0,10},{d,0,10}]*)


(* ::Section:: *)
(*Chapter 10. Images*)


(* ::Input:: *)
(*nyc=Image[CompressedData["*)
(*1:eJy83fdPnFnW6Ps5994f7iuNNBq1Wi1btgyInDMYYzDJ5JwMBkwyOeccTY7G*)
(*xjiBwYADzjnn1N0zc/6lfdZeOzyhnqrCds/54fNuqghuzdv+9lpF1VO2pY0Z*)
(*Ff/P3/72t9b/H/5PRklnREtLSXfm/wc3IrvbTpb+v/DBDeD+v/72N3pn6C9p*)
(*hMnQyUSHf8nicnRymV/zmV8KdIqksF+pYhT+aylXRsJ/K4P7Sknob8XS4T1l*)
(*zG8VJGxPJajiakj4nlpQj47saULhe5ulI3tbQRuJ2Neu0sns7TZF798P54FO*)
(*Bb2tEnmgj+tHUTYDzIEhEm0zrBFjOyIdtRvdlVj7SW5aZ4ab5ea5RY04hzMW*)
(*xdovIXmf41mNGCtinZbNigFxLhdIjKsFLuctina5+BMuk2jXNTjXfwx8b5Tz*)
(*ZXAJRThdVDheYIzuA+EO51GE40Up3OECY3/eRJjdinTY7hy3TMJsqTNmHbZZ*)
(*sihs/4LOvBS6b86y/TMkwmaGHDkwCf9OTxPvf3SRKNspEvhrH/H8exsJ/m0A*)
(*vm6YRNlNkoBfukjQbz0kbN8QfP0oibafgK9vJiF7ekj4/n64v48E/9qBQvf2*)
(*gC4S+EsL/KxmEuswTNz/Xkn8f2kkh/d1kEPwdzTw10ZycE8DCfm1inj/vYAE*)
(*/rOUhMDf+RDowqHfyonP3/NJ6J5yRO8LgXaEQhd+tldhvxaYUaSjblUpOfJr*)
(*OTmi69XhPaxXYXtEq5ResVbV8lY1aHrFOsVoW9VOIvd3Mft6jB0ANl2KAz06*)
(*Sq9Eq6JtB/+SVh21G7PaqziHOW6BO62l648JfcP4/fGOy8hSj6g4p3NmxTqf*)
(*s94rqy79sGjX1Z/rFVrF7olm6btltmPSReNmGXTLqFk/26vwA4vIXLMsmyVB*)
(*vw5Cf8ahBcMky/ci9GcQ+jID/RnBToXs6YfOdMBt+HffdhT75PH3BuL1jyYS*)
(*6zgGfWqDz9Fm9ZJDezqxU1H074fdINzXQ2LsB7BPCS70e1uJzz+q4L4+uI+2*)
(*rBb+3lcTz//JJ0G/lKHwfVXQgEr4GOabvZUkwbEVm+X/z3x0+Nd0BtukxjoV*)
(*9quQq/VLHvMDvaKdEr2iM1Y4dCqcf3wEWkVFwD8zU83Vksg9daABRe1phhmp*)
(*WdUpgTaqQ8Vcr3rxjLLphf99u9mp0a/DW2XSp1MS7Y8Qaze+O/ZTqllqxmSu*)
(*Ujr1k73SdUqw1CMq3nnFrDh6ul4ksW4/LsbtMlj7CVegXRs/DHuHzVuV2Mxl*)
(*KsLpkkI0yug+fbd07VJ3K9z2nEWsZ+acgfnotGzW93drBpoC/646TOHcFAP/*)
(*3fT8eyPMVd3w/99p/DjG4RR0BhpkNwR9aUURtgPQq1ri+88G+NpmnJlC97bD*)
(*DNZA/P5ZAw1sgI/rYP6qJC7/UwR/v2BvsW2H2+Uwo9VCqxqJK9zv9j+FJMam*)
(*FTt11K4F5qpK+HvUgPNUKDQgyqYOP/b9Rz7MXsXkyP7K/yu9Cte3ivcqAuY/*)
(*1ii4f08ZUjpVSSL3VkGbarg6ErW3HjSiaGgUFblPaVXk/jZsVNT+TpVurlen*)
(*D8+YXfQq2pbPVMB0jjJuVBzMy7viMGsGm6viHRZ1lrR0/THpkUGnEqBDgqUe*)
(*UQmws5kTT0+3SyTO/Qe5rZJY9ys/YR2ad/WnYLdo84Bsl65fRh0TjTLsmW7m*)
(*sjh30WZZYqVnETasWYL5dhk4MAvN6SStmQ/hv03jpDf/BdzXT0ZK35G+ghek*)
(*LesB6cp9TGoTr5OisIskK2CelEWvwtffhtsr0DA6V3VA03pgFu+DHbEbZq5e*)
(*kuI5QtK8TpEk9yGS4DpAGlLWSV3SGplveEOSPfthx6wjtUmX4Gs7sFe0U5le*)
(*A+TIvlqS5NyB+2A8zFXZPgPw3+xG3A1pr+IcYa/6NYPL0vqFifg1h8vVyYf+*)
(*gN8KGOySWrGO0qoI2iVoFcUaVS5F7q3kqkjUvmpoU63sVPS+JtmpmH1M1L42*)
(*0IGioU9UDMxTMXQWRX06/VI03D5qqwMzlBbMx7ZDYATFQaOEeLtTZhsV7zC5*)
(*O45zOvMaCY6nuTM6y4yqPUaMGpUIHRISYCdLgN3KnESYf8xJcL9M4qE5cRbE*)
(*e1yxzHPjJ4jubP2gq9DNTdN+qecv9e7ofEWKclpDRj3TzFxWZq8IaJYlVntl*)
(*e1YL+3UGerVknQ19HGuQTFd/xT5NVn6GZj2DRj0iPXlPyEDRS/jcFzJa/gb6*)
(*sk1Gy+B2zQfSln2bDJ54CucOfN8D6NtTMlLyBD/uPX6PDBc/RL3Hd0hl3Arp*)
(*yLkGO2QhaclYJ1PVT8lc/SsyXHqPVESfIc3Ja6T08DzpSF8nVVFnSP+x66QZ*)
(*WjaQd52Ml9wjPTlXYRapIl7/k4uPE/1Mr6gjv1rv1RE6y6lbpepVpOxUBYra*)
(*V8WxVkXva+CakOjUUejUUdj9RKOUTjFHD/Ry/Vr7BzRibWmP+lUGdYaQulFq*)
(*+nlJdCjBcWoXZqAf8zoLGolOS9xZnXOMqj1GjBqVBHORYKlHVJL7qlmJHqvQ*)
(*rDUSb0GC57plXld/wib2Js59+4fFe2xJ7GeZ75dRt8Tj9tb2SbOzlwN1wSxr*)
(*81cU7IWCUbcsm4f9rI80pt6FGWkE+vQK5ynarfLodTJT+w3mohvYrfKYNWjU*)
(*c2xWc/oNmJW+wP2P4GtfQ9PekLHy56Qz9xb8rE1Sn3yFVMVdJCfCT5OFxnek*)
(*O+8Gac/eIkst70lR+Cx2qyNni4yXPySzVfDzYPZqT1snNTHLZDB/h3RlXoV+*)
(*XSFtqaukIX4Fe+UHOyE9rfUqEtrE5Onko4jfioxBp7TKSORviii674Eo2igK*)
(*Po6GmSp6bzX0qAbUMXsb0NF9zaCVxEKjBNordaP0nYqF+Ug6MKgzjGcctmiA*)
(*nWp2w9yorlXjJMFuQoqzn0LxDtMIG/QdEp2hSc6LpninkpyXdVa0VO0xYq5T*)
(*yTBXUZZ6RCV7rJmV5LkGzbI8PyV6bVixCbZ+GGvNtR+W4HldEvepeyZmsRjX*)
(*TRTtclVl3eIMpp7DhAjHVcbhsqpXFthfsOA8ibY7Jxl2y6JFEuswi49b+f6z*)
(*FX/fl+q5CHsee8wq2n6U+PyzAXa9UyTg1xYSsrcTPgd/lxxHyLHgsySUPvZi*)
(*2ws/A/YVu24SBn8/Q/c2wY7YSg7vbSZBv9YQ339UkIBfqkjwb9XE/5/leEbY*)
(*NMF+V0Wq486T40GTsMPAnrS/kYT8UkEOw24Y8ks58ft7EQn+ZzF8XAZKsVWx*)
(*dg3QkUwuS4fNVdZ6FfXr9/cqCuYp2qco3qvofaJVVbxVSq+O7muUrVL3Kg72*)
(*PypW06pubFWsTZ+2VRZ6Fb+LXqnnKXWrKNEpfa8SnWZ3x6hV/4VeGbUq2fWi*)
(*xR5RKZ5XzEr2umK1V0kwB5m3RZK8t3+c1/WfahWV6HXDsFmiW+r90ahZ7D4L*)
(*85euW7JXXJTjJYss9+oCdOpnmrUEjYF/h51Ok1SPZWjIIPH/pQcfgz9yYAx+*)
(*zgQYI2H7h/H3hFHw32r6O0L6eHzovn4SAX9/wvZ2y8d5D0PPKPFcoEO/teJj*)
(*wfT37iG/NUGvoDkOvXBWYtsC4YyEnekwNIz2ij5nyRc65f+PIhL4j2KS7NSJ*)
(*eyB9blME7Fshv5aS6N+yuFzLoE1aBSQK9sBoaBNTrFOKYqBPTDk5CvsnFQud*)
(*it0DbeKNYp2q5mqgS7WgXrYqFjvVhkSn4vZ1ofgDfVIC/G+WYDOIEqE5zDBj*)
(*M2oiHu5PsNOxHdFItBtDSfDfICrZYYqxnyFJDjMmM5W+R0nOcxrJLvMoxXUB*)
(*JbsuMS5ndc6hFNcV7gLjclHLzbJU90sWXOZdWjcrxXPDrGSYj9K8r5EUX/Ow*)
(*SZb8ZK9obxI9d8xK8Lj5l4l3v4Hi3K4zBnOYumuGM5nzhoSPfzldtshaz6Jp*)
(*swRs13loysouLZNo2zPgtMqiRpTNLD5HK8JmCtHnajHj0Cuwf4RE7RuSIvcO*)
(*ooi9A6CP69FRPf8R5jDxOzT2+/86fC6A8ryAas3v4H6mV2iXvdK2ivWKOio7*)
(*xahbFQvtZa1ivYrbr8xV8dBvKkHTqn5dqyz3isIuWehVkv04p+1VCszRyY6z*)
(*2CyjVuk7ZdSqFJfT//VepXletmCVz0rmm5QKc5A5KcBar5KhKxbRr/lRPjeg*)
(*WTfBLbMstWw3zDVLdmuXzdJ0S9WsaCc6f62aZ6Vn0XYXDZu1225Fm1jWiLI5*)
(*zS1An+bRkf1zADq2fxrmoknYj2Du2jeGIveegplpVIrYO6QyoBEJ7Yra06rq*)
(*VYPVZsX8lsPl6uTp5OsUcMVmiE4JSqvi9lLV6OjeGhS7t5aBVsXtawBNXCuJ*)
(*h/0vnjYKJOzrVhzogeb0MzCbJtkMScnQGmRzSmdcSrI9BbPTqBnGcxXtlMB6*)
(*NUcSHeelJKcFKRn2OjXaJyEVGkWluJ2BDi2rrGik0hmJcr1kzOL8dMlqr1K9*)
(*1i02Kc1r06xU702S7nudpPndMCsFPm/ZzZ+S7LMD3bttlqWWsZ7d3rUEj1tS*)
(*vPsO65aFx7z0DPdJ53WLoh3XzINexdhfkrBdgu2FXYmxvaRzgTuPom3OoagD*)
(*Z1DE/iXmAMxe++ehUbPQq2kwiaJgv6Qi946zdgmqhkXuHUZRe/vZ7/v3NEpR*)
(*+NzKOikSWqV2dE8ul6eTrwVt0ipCsXuK4fNUqQ7rVOzeckZ2iomHRsWrOhW3*)
(*r45rgLmpETRDn1irEvbTTnWixP09Gkm2Aww2alhKgT2bGdOZUIHbdnR2OmWA*)
(*zVWyU47TDHQq1XFOSv6ORqk7lQadolLdzumc10ijzaHcLhuz2KPLJN1r1YI1*)
(*6M6GxSale2+ZRWerTL+bJN3fPEsto1L9dn7CbZLic8ciSy1jPbuza0bdwrnL*)
(*4HEvc0z6Za1XdP6yINbhsmTYLStMe6VtFs5colk2Z2W30H7arDkSs38GiWYp*)
(*3RozbpamV+0kZm8TMtesqD01Uhy0CsEMpZWvU6DDehW3t5SBNmmVo/i9FQz0*)
(*KmFvlZQIjUrYp3SKNYp1KuFAKzSqjetAifu7UNKBXq4faRs1IjuVaneKsR3n*)
(*Jg3A/fYTJNVhTEFvoymU5jCN0qFNQobTPMlwXCRpTtAjXafM9UnfKSrd/Sy0*)
(*aIW7oMM6le6+quVxReFuqUVMJjTJvCu8PdfMyoKmmJOJLPcqw3/HovSA2z/h*)
(*LjTvHnhgVorPPYuSvXcvyesuSvS8w9023BvVO6PZPZLvkrEuGxZZ61mc46qk*)
(*79ZuxEKzTF3gVqBZ51T7ITTKZklxYIEcPTBLYmEvpI7un+DGSQy0ioqGTkXv*)
(*HdHaN8T1wdd0QKtaJe2sZdqs+L25DMxQFkGjtIqYvWVmsE4l0NcA7a3kjaqW*)
(*kqBRVOL+emhUPbYq4UATtioRtXOdKOlAN9cLu1wfGECsUQrRqTT7McZugpsy*)
(*5jBJ0hzHFfQ2Ep2aQdgoLtN5gWQ6nSbpztAjC7ueuUYJGR7noDvnuYs6l1GG*)
(*55rOugprjqUmZXlfsWAdumO5SVnQHMss9ygz8JZFGYF3fsI9aOJ98NAsSy1j*)
(*Pbu/K0bdYu5oHifTP95l7rEw2S7XLXDVLGs9i3NaYwy6tSuqNmnYL6MYuyUN*)
(*5XH4BZi55kjsgSkSd2ASxR6YAGPo6P4RpLRpQKePRO/vJUf3tsnf/bNmNWma*)
(*Fb2nnqHPxaQzzt48Ll+nQGtPkU4x2k2vEvdVqjpVw7FeJR1oYPY3oWRoFZVy*)
(*oIPrllIP9IEBkmYziFIo2alRZNopc72awTPdEThNsFPDfKeoLOclkuECLYIz*)
(*xYVJdT2D0tzOmkh3X5ZopwTjVu2+V9gcS03yWbdgA3pz3WKPsqE55mQhyz3K*)
(*CrptUWbQXXD/h2UEPACPzLLUMirV9wFJ9XlkUYr3QynZ64EC23XH8PF90SVz*)
(*j/3LbrltW8R6Zs5VEu98RWmWrltW2+V4iXfpjAF2XY9Yh0Upxn4BzMEeOYti*)
(*7KZJnO0YiYd9Js5mRBLPFaJMX1/So9Jl2Ctts7S9SuS9StzDOqWcrFPKyTol*)
(*z99Yr5KgTQn7yuAsh68rV51srkrmvUrmrUrhvUrdV0+SYa5S9yr5QAtvVZtJ*)
(*r1ir+mSrmGGSZjvKW6Wdq9LtJ3WmDWU47K5X2CreK9oqQfQq3YW1KsOV9Umc*)
(*mW6sUeLMcmedomeW5wq4QLI8LqFML+XMxF1ulWTB/KS1oWW2V+sMbZJZm1Z7*)
(*lQvNMSfb0uzkfwdlBd2zLPgBE/To+0+QGfjYIsu9stwpc91S9yrZ+67qcbBb*)
(*qh2RnfrPs8fBlM/Hw15oSZzrNQu2oFcbUpzTOop1vIKwV/w05HTZTK+WDHuF*)
(*7OYk1qsJ3qwxaNUpTmkWe+2bca/ocyfZ875bZbesNSsZ2pQEkqFJSUCee9iZ*)
(*srcI7iuCsxjOYtVZCidVhs1K5q2S555KbFYq7IEp+6rgZK1K21dLUvfXwllP*)
(*0vY3kBTYA406lWrTjdJselE67H7MEMmwHQajKM32FEqHGYrKgDbtFu1YppMi*)
(*y3mKZDnNoGznWZTlNMctwO1FKQf2vmxXaBdtEux22bRFHsskB1qU7XlOnvR+*)
(*9e1caFSO1wo7Pc9Dt5hs3qwcz8vQIWpNh/Uqk8uAVmVgs9Y1sr03uE2S47OF*)
(*p0Bv5/hcQ7l+10mOH2+V3w7KhlmJyvG/LRndlwu7GAqCHgXexRkpK/ie4uB9*)
(*8NBY8GMznhqfQU94m4xO4alZGQGPLfN/itL9nkhpvo8l9f1G6HzGHgu7r3o8*)
(*7K6cvdS36anskHdZszwUCe63FG47u5Loch0lOF9jXGjDNrkNvJ3gctWkaTiL*)
(*ObNmxTldJPGOTJzjCop3gNP+rIJe44NeR82OibVd4GbBNO6FwlHYC4/SnfDA*)
(*KNwe5bvhEIqFfjF9zL5O/hxwdmq7pe9XPXQnnyvQKUKpUrFOGUqBNjEVOpWI*)
(*9ophraLS99eBBt6rFuwVaxXrVeqBTtmrdNs+hveKtWqYZMIsRYlO6VuVCXPT*)
(*rqhbxXslWiV6le08r+mUWi7MTdgkjnaJoj3CJvHb6vuoY17nUY77BZTNWyVk*)
(*Q5MoOS+JJom5yfsqY6ZTQrb3NhKdyvG+QXJ9bqIcP0rplFGX1LfVrToGjcql*)
(*nQoy7lROyCPm4BOdZ9+FdcuSZxZlBj6xSPTKXLd20yvB6LEuq49/eUK3PO5I*)
(*Ce63tdxuWZToclNKcL4huyWaxXpl1Kw1pVkg3vEyB81yuIC9EuLsz5F4aBYV*)
(*Z3cGJdguoVibeSkGH8+aQUcPTGK3xONZoltxtFn7BmWz4mDOos/7Zr3qZL0y*)
(*2RGVZv23e5W2r5pTt6qOZMBclQ5Sca5is1WqDW8VSLPpQRl2/YztIMq0G0FZ*)
(*sPNRRo3KcpzePd6pbJdplOMyp0FbleOyoPTJdUkLekUdg/2OyvNY0dDflw8z*)
(*lXDc6wLJ9bjIXSbHPFdJLuyAx7zXoCvrGkqPGNzlfDbl7Ryfq9wWzE7bknqe*)
(*oo5Bn4RcfzjN9Eg2SXVb3EflQ6eOHbxHcoLu807dhz49kJ3KPfSYCXmq8/y7*)
(*WO+ZFRZmLyoz4JmGvl36numl+T2U9N2i9LdNuuWpsNgtM5Jcd5DSLdWsBRJd*)
(*txHtlaDskFdIvAtrVoITI+asBHqqupXgsCybRSXYsmbJOYs3K85mljcLZi0b*)
(*+jj8OIrlsxbtlWJA9kqQrw3WdYu+zoX2KnVfAVekxTuVtq+YK9UpQ6n7KrhK*)
(*LT5X0Val769RdaqeayQZB5pIGrQq1aYVW5VmC3AHpHNVL8q0H2DshqBPw2CU*)
(*ZDucAuOMvWmjsumMtEs5rlq5rvPomNsCynVd5Jbg9hkpD3ZAyqhT6iYZNUrt*)
(*mOcllAc7H0VbledzheRBg3J9FEqPmGy/LUQ/zvXdlI75X5Py/KFP/jc08mCG*)
(*ovKhTXmBlGmLRI+wSQb35UObUMh9knvwAXYq99BDDhoV+kRx6JnOi+9jtWeW*)
(*We/ZCybwuaRvmCX0MTA1o34ZzWCyXV4Kc+2yJBlmLEp0K8n1htwRqSS3ayjR*)
(*dROpu8XaxZqV6MwkOF1CifTEbp1HiY7nsFlCot1ZxPbDRdmteNs5bFaczTSK*)
(*t5mSzaKPbcXvHwXDiPYqfn+vfK0KaxZ/XbC8rkEbx5qVAa1iinSKUeb+Egba*)
(*pFUO/SmHna6Sq9LicxVtVcb+WtmpzAMNXBPJtGmBHa+N64D5qRN0o0zYAals*)
(*+yGS40CNoFyHMW6C5MIel+s4Ix1zmpXynOesyoX5KddtFh1zn2OgUXnui9Ix*)
(*t9NI9InK91iWzM1Ngv6+Aq+LGvneq9wVctxnHeX7wgntofL8hS10TBJdUu7L*)
(*89/GRuUH3JDy/G+i/IAdBjp1POAOyg+izLRI0N13HNokFIQ+JHmHYJYKVeQd*)
(*firlhz0j+Ydf6Lz6LnmhLy3KDXlhkbWe5QS/lGS7dP2yRO6VqsfEzPXLcAbz*)
(*VphrlyUp7neQ6JbSrhso2V1plrpbSr/WUZLLFSS6lcibleh0ASU5wunAukUl*)
(*2S+jePsziDaLSrCbx2bF286gBFvarAnGdowkHDjFjZD4A4MkAZpFX1NHX6si*)
(*usXaxV8nTF+Dx9FuZe4v4op1WKey9pdyZToVKAPalG6oRtWqWtmpLJtGroWx*)
(*pZ0SreqEOaoXZcEOSOU6DnOj0KFT5JjjOMpzmkJGjcp3md+1PDf4Ho95Kd/j*)
(*tM4ZjvXpuOc5qcBrhRz3MG2UukdG9xX6XFLAPHXcZw07VeC7gQr9rpIC6I+Q*)
(*j7ZRnnSdY7fzA66h40E3NWijjgfdkgqgTcJxeur6JFsEsxKl6RO/jyqENhUc*)
(*fkTyQx9Dm5j8sCfYqOPhzxVhL3VefxdrPcs99PLnhLyGGfGVpO6XScMMqXZL*)
(*9eNiVtolupXmozDqljWpHndRCuyGlNKtmyjFfQebJSS5bUmsWRso2VVpFnK+*)
(*rHC6SJIBbVaS4wr2KtmBYfPWWd6t09Ar1ixmFnvFTKJEmzFEe5VgM4Svo2Ov*)
(*qevFZgnx+zsVB5RuZUGrmBId1qnsA2UMzFJalSgT2sRU69SirAN1zP4G+DmN*)
(*KMemGbSSbNtW2atMu26UZd/L8F4do9faoaBVeU5jYALlO08jo0Ydd13YtXx3*)
(*+HqPBanAc0kq9DpDCjzOcudQoeeKwus8fN0FqZC2iCvyuoSM7jvhcxkV+QLY*)
(*/agTvlcRbVURzFNF0KBCleO0RSrKDCU6dR0VBO1osEbdlgphXpJgnyu00CNs*)
(*ksF9VBF0qigMGnX4Ce/UE+jTU2xUQfgLlVc6b76LtZ7lhb76OYfesGYJqnZR*)
(*Vntl5rEyS3OXulvpvoy+WbslemXcLdYr5HFD161rvFtXUQpIVnUrGfbEZJdV*)
(*haZZF0gKxR/Xor1ilkgiNCvRfkH2KtFuhpvCXiXZjstm0esN4Ot9bQeU1wFr*)
(*utWFRLOon+1V9i56lW1Tr2uV0qtsO9oq015l2w8g2qo8p1HeqjFo1CTHenXc*)
(*ed6wVQVui7tS6K5u1aLslCB6pe5UEXRKsNQqda/0rZJg92NYr1irNskJaBBV*)
(*xBVgixTKDHVd1aobslOFwbeQplXBd7BTRTBHUepemeuSYacE3ivWKUbdqsKI*)
(*l6TwyGuNgiNvv4+Vnv0VvRKMuqWft0wYPU5m4fkU+maJXv1os9I87yGlV3dk*)
(*s6hUj1tmm6XMW6xX6mZhr1TNSnHWNiuFE/uhaFai3RneLNatRF2zknizWLeU*)
(*XllrFnYLepVrU8JAk7TKdSq0oFE5B6hqBna/3AO16JhNHWjQyLNtQfl2rYxt*)
(*Gzlm10by7LvJMQcAjaLyHAZQPuyAyGEEHXccIwVO42CSFDpPkSLnWVLgClwW*)
(*UKHrIipyO61RDLucOSc84fRa0jmrccJzmfFYIcWw9wklsOOdoPT90Sn2XUUl*)
(*fmuo1P+KRlnAJioN2EZlgddQCbSnNPgmORF4nbuBCoOEHQa+Rq0o5LZ0IuQO*)
(*nHelEyH3wANUHPKQnAilHml6pCfaVAzzkwRdEgrCn6HCiOfcS1IU+Ur62V4V*)
(*RbyzqCD8rUXHw95YlB/6FpnrlrXPW30838zvK+Xu6P9YyvB7hNQNs9aydM+H*)
(*Cq/7KvdQqscdbJYJz5soxeMaSnO/RlLdNxXQLSrFZZ2kuK5hr4Rkp8sk1fEi*)
(*SnY6j+iemIR74jI4w50mSfZzJAmalYTdmiLJHGvWKX4dFfb6X223elW6ZbN+*)
(*plesWdXw/fpW1ak61chpe3UcZqo8StWrPIc+3qohTa+OO47KXmGrXKaxVydc*)
(*5mSn9K064b6ELPUK7bJX+lZJvEfmiE7pe1UWsM4pvRKtKodZibaKot0qRjdR*)
(*UTAHex6ldGqHY50StK26J1u1215pOqVqVSk0qjjiGSkKfy5bVRT5QnbqRNRr*)
(*VBTxRsdyf0xEvreo4Mg7y6z0TPTIXJOsfd7q4/n6+Uv/fApVr36kWZpeGTQr*)
(*zfMud1vLawelel6XvVI3K82Nusp6BVJdtM1SenVR1asV2BF1zbJfZM3i3Uq2*)
(*nVE1S9crk1nLtFnHbEsZm3IrKrVgtqKwVUDpVB10qV7VKUbplMB6le/Qy/VB*)
(*k/rJcYchVAB7IDNKCp1OkULHcVLkNEFOwA5Y7DID5kix67zVRpV4nrUMdj6t*)
(*ZY1ir3NI9KkUdjsN2qBdKKONAuXQKI3ALQZ2PgStok4G75Ay6I/sFtzWgi4F*)
(*35adOhFyi7tDikPvSqJTxaH3UQk0SChGj7U7no56lhKdosqgT6W0UREveKde*)
(*QJ9eyk4VR79BJyLfaljrj15x1AeLiiLeW2StZ/mHdXRt0t9v2q3v+/2kSbcC*)
(*nkj6ZqkZdYvK9HpkyvuBJOYsxR2VW9grKt3jumxWmscW75UyZ6Vis5RupTlR*)
(*l+SOKJpFe8WapfQq2X5e9iqFNkvOWRN4LRX1NVbUzWLd6tXIsy3jynUqdKq0*)
(*bKo5mKlsa1WdqoddrwE0axxXtarAvo0UQKsQtOq4Yy9rFShwHEKFTqOoyHkM*)
(*nXCeRLRVJbAHlrotoBIrjSqF5lhS5g1fo3FO5zzD+1TmfQmV+15GokPWqBt1*)
(*MnBDoq06GbQNH19ngm9wO6Ti4C1sFgq+RUpD1KBL6BY057ZUEnpPKg2jfXqg*)
(*UQoNospgVipFT02aZNQn0SjmBRP1ghRHvsROFUe/4t6Qkpi3UnHUOx3L/fle*)
(*RZFWWOtZ+Acm7D3S98vwflW7rP/+0bhdsluBTxmDbu1m7sryfmzM5yFS74am*)
(*vbrD56wbJMPzBjZLct9CYs5Kg2YhlyvYrHQnJgWalYLdYnshfQxeNCvF8Szv*)
(*ldKsFE2zJvj1n9g1C8w1K8mmT/aqANrEVOhU6lTr1ECHqDqunhyHTlEFdo3w*)
(*+RaNQrs2qci+A3SSQsqxD/Y8agAVOg1ztFWnYOcbhzlqAjo1BZ2ahkbNkTKP*)
(*ebDIQJOEcuiPcBJmImvKQLnPspb3is4FdBLaJFT4raKTwGReMkPdqIqgq4rA*)
(*bVIZdA0+voEqYZaiaKsqYbejTh4C0Caq/BBHe4TuQIeY0rC72KiysAdSadhD*)
(*VBb2iHtCyqFRVFk49UzTJD1Nn0A5tEmCPpVGv4YuKUqPvpPKYt+T0pgPOp++*)
(*S0n0R4uKoyyz2rMjHyXZLlW/TG6bNO21RVbbFfQMyW7p2qXvl37uYn16qqJt*)
(*lpy1oFtadxGdsagskOG5g91C0KwMj23ZrXRolkC7leF8BYleiWalOlIrslcp*)
(*9qcR7RWVaqc0K8VuGq9Bp1xbUzdrGTSrwK6cq9SCGUpL26tCmKmo49ipeqVT*)
(*XCHMUWqsUcwJB6qbFAHaq0LnfjCEipxHONqqMVLiNolK3WYQbVW55wI4Dc1Z*)
(*MmxUBXRmt076ndPyOa/lexHadEk2qtJ/TaMq8Kq2PzpGjaoM3lRAqxDvVNXB*)
(*HSRaVQVtoioO3UUnQwXoEoWNugvnPVQe/lCDNqo8/LF0EhoklEc8IxWqFhlR*)
(*96kC+iRUQqcqoE9lMW+gK0xZ7FtsVHncB6ns6Eedz9/FetM+W1QS/cmioggd*)
(*Xb9MWqbqFmXt8Xz17yIN2xX8HIlumbTLwuyFvfJ5pvNE5yH3QOceyvS5jbK8*)
(*bmOzsrxuYq8yOdos5L6JRLMyYTfMFPuhqlmsV6xZ2C37M6xZDguyV0qzWK/E*)
(*tVXErKVuVrLtIKK9on62VwV2DRzvlH0zg41SE51iih27yQlQ5NSPvSpyGWKg*)
(*VSdcRrFVVKn7FCpzn0W0VSe9FrFVFV5nDBtVCZ0RfrZXtFWV/peVPsFuJ1QH*)
(*rpPqoE2LaM8E9f01wVuoKvg6d5NU81ZVw45XDbMUgjZRlTBLqVXA7FSORKfu*)
(*o5NHHmlgoyKeSBUwL0mwz1Wo5yUD+kYJVdCnytg3pDzmLe/UW+jTO9ap+I+K*)
(*2E86X76L9aZ9schqz6K+wE77WTLXLrPdsvZ4Pp+zzHaL9+pHu5Xt+1znqUaW*)
(*7yPuoYH74A7jJZp1U0P0KtNjC4luZbpelb1SNyvN6YKmV6kOZ2WvKNEr1izj*)
(*XmmbNcj1Y6+K7Cq4Kp1qLdj9tOrgfgBzFdNITtg1o2L7FqDtlbZVnbJXJ5wH*)
(*oFMDcLJeFWOrRkmx8xjsgeOkzA1a5TlNyrFVc6TCcxF7VQmtor2qhLmqwnuZ*)
(*92eZd+ocqfK7AFbkbXMn/ZoK/xXVeQEadUGe1X6XsVf0rPJfJTXYqTVS67+O*)
(*vaoJ2mACN+WJPQrU9sqoVTXB29CpbejUDWxVtWyV0quaw/dQ1eH7GpWw41En*)
(*aaOEIw9IRTjrVEXEY6Rt1VPsVCXMTdRueyUaRecp0SmB9op1ilO1qiIB+hT3*)
(*WeNk3Nfvstsu/UyvBMNm6dql2Rkpq4/nv7bcrIMv0LEg1it60lblBj6TJ21V*)
(*bgBrVrY/6xU9s/3hc36iTaatMupVjo/2FHNWtvc9w2axOeuaSa+y3Bj6GJa6*)
(*WWn6ZsFeqG5Wmr2qWfYzeC1Nee1yg2bhNTlt+hG9rnAJtMhYDSqFJmk16DST*)
(*EpinSuxaSCl0SSiDLpU6qjh0kjLoU4lTNyl1pnpRCfSqGDpV6jxMSlxHSLnr*)
(*GMxR4+Qk7IDlMFdVuNFWTZNKd2iV1zyp8qCtOk1qvM6SKspnGVpyjlT7rOBZ*)
(*43cemrIiT3G/4Qlq/S/A112C85LhWQetqg28jGdd0CqpD7yCZ0PQOqkHdfQ2*)
(*2sDb9bDv1R3chM9v4lkXtM2EXOOuk/pDN6QauE3VHtpBdaG3UG3oHSbsvkYN*)
(*7HhCLXSpJkJRFUXPJ6QKPWOinnMvUWW08ApV0VlJRd0mSt2mk3HKKVTEv0WV*)
(*Ce9QVcJHnc/cV0OVCb9rVMR/QyfjtMpj/zDj664ZNiz6K/gdevUNFUd+/Q6f*)
(*zf8+0sJzwWTDQl+TotB3zCH4nkNvSWEIfG3IG1Jw8A2e+YEvoWEv5XksAPoW*)
(*+IKdAc/xY9o0eQY8VUDTjvkpcn0fk2M+j6FVj0iu1yM8abeobK8H2KwcL2gX*)
(*NIvZgds7JNvzOsmFZuXAnJUNu2CW6wbJdtlgO6GrshtmuKyidOeLJMMJOF8g*)
(*GQ4rJN3+LLdE0u1OgwVuXr6PQho6pTKK6PXu5LXvbPtIGex2xmoYaJQGzFJq*)
(*tFdUGex/QjnvlWhWmVMHtopirVJ6VUpbBcpcRhDt1Um3cVJBW8V7Vek+g72q*)
(*8pgn1Z6nkehVDcxI2B/aKtoprtb/PFLfZ6SWt8kc7BSoD1iVGoLWJNovivaL*)
(*2eBYs+oPXkOiV+pWNYTehEbd4LS9qjt8F6lbVRf+QHZKT+nWE96sv7ZX6kZR*)
(*5fGM6JS+V9WJn7gv3DdDVYl/IH2vKuJ/Z+L+1Pm3yp+k/OjvP9cs3qsfa9Zn*)
(*k99DWnv+l/a5qq9lqyjaKgF7BfKDXjGBLyXaKonOZYHPFOpeAdGqPF+G9kpQ*)
(*mvVINov2St2sHGzWDejVddkr5MKbRXtl0KxM50usWdArZhl7laFp1jy/NvmE*)
(*6jp2Y4hd326EX+9ukGTCPkiV2VUyP9irMttmUg6zlbpV6l5hq0A5zFXlfLYq*)
(*c+kFfQhb5TrEWzXKWzWBrar0EK2a4a1a4K1aIrWwB1bD/kd7ZdQpqi7ggua2*)
(*EdEjc8x1qjHoClLuW4fbG6jp4FXSeHALiV41wAzVwGcr2ilBtKsOPqbqD99G*)
(*old14fe4B6g24iGqg13PSG3UU1TN1cDOR1VDm9SquGrY79Sq9OLeIjFH6clO*)
(*Jb5H1UkfGN6rmqSvOr9rVGGzjLq1y17BjKWfxczRNwvFfEOsW4x6R7TG3PMn*)
(*rD13lfaq4PAbUnT4veyVvlnYreDXSrOMuhX0XKK9OqZrVp4/kw97o2iWult0*)
(*5kLQK+R9H3uV63WHu4W9OobNukZyYQfMgT5RtFdiL6QzF+1VFuyFFO0Vgr0Q*)
(*2S+TTIcz2KsM+0UOmmU7pbnmpr5XmTbD0ClVr+yrGLsaQ+X29Vp2TTotslei*)
(*VQjmKuTURcqdu7BVJ517sVXlrtQAA70qdxvmrRrDVlV6TLJWgSqPWcRatcBa*)
(*5X2G1HmfQ7W+po1Ss9ar+oBLmibpGTWKajq4jpT7WKekkG0kOtUITWrkrWo8*)
(*vCPJbsHHzG3SEHaH1IfdUxy5Dx6iushHDLSpPvKJibqoZ1INqIVZiqqBmUmt*)
(*OoapiX2rUaVTHf8O6ecos50CNckfoUWfOcu9qpb+lM1i3eLi/6XzH5V/KV2z*)
(*wqhbiM5nwKhbu2H2uROWnrsquhX2FntVHMoYzlnQKzV9u9S9Qrpm5Qc8Q8f9*)
(*n2GzTLol9kXfR9wDbNYx77uI9irX6ybJA8e8rpNjHlvYLNGtbPctRuyJrld4*)
(*sy7D7Usky+kC9OocyXI8izIdTku0Vxl207rrlI8jdj3OUZJlO0Ky6LXv7AZQ*)
(*uV2VTo1GhV0tV29A6VUFNIoqd2jjWK8qYJ6iaKsqXJhK1z4wAH0CrsOw842A*)
(*MZijxkmV+ySp9pgCM6jGYw7Vei6iOq8zpN77LGnwXiH1PiswA2k7VR90UUPf*)
(*Lz3WK/Mag1alpuA1qTnkCgNzldBycAPu22QObXHXUBM0SWiGLjWFMaJbTWG3*)
(*UANoDL8N7pKGIyD8Pmk88oA0RDCNkY+lpqgnpCGag1lKqI+mnqO6mFcatTAz*)
(*qdXFvkO1cVrVQsJ7DdEnoSaBqU38wH0kdUmfSF3yF62kbzp/kNrkP6BtCtEt*)
(*bbv+ZBL+bUh2zQrz7fpDNkvdrd32S/3cCKvP+9J1qyj8HSkO+yB7pW6W6JbY*)
(*CyV9t4JfINGrfFWzqOOBz1FBwHNslrpbanl+j1G+70OS5/0AWnYP5cNOmO+9*)
(*Q47DXpgPM1ae5zY2S3Qrx4ORc5fbOjYrF3bCXNfLJNv5IjRrhWQ7LTMOS4zj*)
(*aZLlMA9z14zm+uTZ9hMMXo/zFMm2G4XbwyTXbhBV2Ffr1GpU2tdxjYZEp6hK*)
(*h3bZqwrHLlTp0s04i04xVW5DiLVqhLXKY5y3aorUeM6iWs95VOd1GmGrfJZJ*)
(*o8950uAL85G/aacagi5J+n7pNQRdtkjdKHWnWkLWGWiU0BpylbRAo6jW0G3S*)
(*gq4j0SmqBZrUHM6ITjVDo5qxU7dJ05E74B6iraKaYAdsjHyIjVJrjHnKRD/T*)
(*aIh5gRphhqqPVdTBzKRWH/ce1cVr1XC1CTAvJSrUcxQlOlWX9JH7ROqTP5P6*)
(*lK9ayb/r/InqUv4ktRzr1r+Q6FZ10r+YxP8Ykj2zwly7xE4pWWiXEXPP9bL4*)
(*vFUxcx15z3p1mDPTLP1jWppu8V5JumYVBL1gAp5Loltq+f5PGOgV8ruPjnvf*)
(*Icd9bmGvjsOMle91TdMs7JYnn7ncN1CO2xo55raKsp3Pg3MkB50lOY5nEO1V*)
(*tuMCNGtWc23gHIdJxnECjJEc+1N4nc5j9kOowr6SM+5WpUMdY65bsAciaJVQ*)
(*Recq3qtqmKeqYP+rculjYKZihki1+zB0ahRhqzwneKumSa3XHIOtWuCtWmKt*)
(*8j2HvWqEVjUEXJQagy6hJtoZTtxnThOdmyxopo0CLdioK9CkdQ3lvquoDWar*)
(*1tBN7BU6fI27gWirqFboEiVu03a1HIHb0CqqOeIud580Rd7HXjXDHtgU9Yg0*)
(*Rz8GTw1pmwVn7EukbhZ2K46phxlKrS5eUQP7Xh1tUeIH1fykpXTqI/Tnk9SY*)
(*+oX7ptGQ8odGfSpDuyXg3AWN0vo39781ZM/MsNatyjhFRew3qfzo192J+YLK*)
(*oj9LpVGfNIojPyoiPmgZ9ErfLH271N3KP/iS0fVKKAx+ib0qDGTU3VK3q8D/*)
(*KTru9wgV+NxHhbATFvrcJgXet7BXhbATFkCzjntsY7eUdl1FeW4b4ArJc19D*)
(*uc4XYNZaIcecV0iu01mU47TELZJcxznNNYJzHafQMcdJdl1OhzEwCobRT/fK*)
(*vlnTK9oq5KD0CpsFraqGHRC5D2CrkBtt1ZjsFW2VulesVQvYKnWvmnwvMP7m*)
(*W/VX9Ep0St+rttANpLSLtUqCRgmiV21hNzWtUveKtYr1qhU61arqVUvkA2wV*)
(*1RL1WNOrFmiSWlPMc63YV6gh9o1GfRzTALOVXn28QvTKXLOMWtWQ8nnXvRLN*)
(*qkv9l6ZZf1WvjLqlblZV/B9mm7WrbvFeWWuWplu8VaVHQNhHpVc/0CyTXuma*)
(*RXtFFQW9NNsspOtVod8DRtWrAtgLRa9Es7BbXpvomMc6yXdfl63Kc7+MrWK9*)
(*WibHXKBXzmekH+lVtWO1MYdarl6nQWHfBG1qhTZBpxw6FLxXVDXMVswAqXFT*)
(*gVbVeAD3MVTrMUHqPCfhnCb1njOkwWseNXovoibvM6TZ5yxp8V0hrX7nSav/*)
(*JdIacJm0BFnWCs35K7TBjEW1Q7PUOkI2NNpDr3JbpD1sG1xHbfQMvwF2UAfM*)
(*U1QrfMzcJm3QKhR5F9xDrVEPpZboh9grtdboJ6glRtB2qznuJfcaNUpvURPM*)
(*UUJjgqKBa0yEbiUZSGYakj9ITSkfSSO0qhk6JcEuiFJ/N9GU9rthv5h/cf9B*)
(*9cn/ZpL+A+38N8J+Je+OuXmL9qo6TlEV+7tUefSbdTFfpYroL6g86rOJsshP*)
(*ioiPEu2Vmrl2mdsTCw69ZkJeKaBfQtHBV0yQtlnCicCXqCjwOToBOyHzCBX5*)
(*3CNFfnfICe/b4BYp8r6BzSr0uMa7tYWOe2yCDZTvcYUcd6dWSZ7Lee4c9irf*)
(*mVoieU6nGecFdn1gpzmS5zgL901Dp6ZIPuyE+ape5dsPo5/tVS30qhr6pFfl*)
(*2I1qXQx65T7EeuU+zFs1LnvFWjXLW7Vg0ivWqgukHVpFWWuW6MxfRenUOqe0*)
(*qpO3qiNsk3TALkiJXnVgq25oWqXulWhVO8xUlOhVe+RDbbN0vWqLeYpajwrP*)
(*UfPRF6gldve9MmoW7ZVhs3S9oq363l5Ru+2VbBb0SjRLzlzf0St9s2ri/zTb*)
(*q101y6BXVpul7lX4J/O9stAsk16ZaZbo1Ykg42bpe1UMM5ZRr4p97mh6VSSb*)
(*xXpV4HmV9cpznfdqFW5fIvmuF7BVea7LiLZKcllUrmfuxJsFvaLM9arWoUrL*)
(*sUanjoE+aTWSGodm7FUt9KnWgVGapfSKEq2qhVbVqnpV6z6O6jxoq6ZII7SK*)
(*aoIdkGr2Oo1aaKt8l8F50gE7YIf/ZdIRCLNP4O7mIrNCLu9Ke8gq6ghd0+iC*)
(*TlEdoUxX6CbqDNvirkGXrmGvOsNvwsl0RtxG6nbR27RVHdApqj0KzugHqC36*)
(*kUZrDCN6ZdSt5tjn2CulWUq3BH2v9M0SvTLXrcYURvSqOfUT94W0pH9VpH3j*)
(*/tCgM5ZaY+qfGpbmrO/plblm1cBOKFTH/46q4r7tmqVmGXVL3yzslWCuWWYe*)
(*i2fPiX9tsVknQl4zQa8k0S2KtqoEvYBWsV4xj1CJ331slejVCa8bqIg3S7RK*)
(*gp0QQa8K3Fmv8l1XSIHrOXLcZRmcYZwXuXmJ9qrAaYYcd5wGU2CCHHcYB6dI*)
(*gf0IstarOsd6rlGnCbSQOqd20AEfd6EaJ6Eb1bn2IXWrkMcIqqNzFWCtmuGt*)
(*moNGLaIWnyWErfI7R9r8LrBeBUA7gmDeCdrdPGTe6q6oG9UZekWireqGmaqL*)
(*64ZGdfNWdYVvg+uItqorYgeaxHRF3kGiWxS9LVrVGXUf/UyvUNwrqSWeeqPR*)
(*nPDeUFMi05wEs5OKev+j1L0SrWpJ/6xtlYVeib3QXK8aU/+NzM1ZtckgxTqj*)
(*ZlUn/kvTqx9pltGspW+Wvlvq3VDTq102S9Ot0DdI9KpI16ziQ2+Yg6+RultU*)
(*KUd7xZrFelXi/5iBXpX43uXNuk2KvW8qvfLcRoVem6xVXhuk0HMDerUGs9dl*)
(*dNztPCp0o806q3A5zbHrmYtmFdLrnEOzCmDGotc+L4BmFcCMVQgzFlUHu5+x*)
(*WlTv1KAFnVI0k3rnDtAFn+vWqHXuRaJX9W5DiLaqzmOY1LmPoHrPCURb1YSg*)
(*VT7z0KjTHG3VGdYq/xXeqkukMxBmm2DYy6yRe5s5a7vSRdvEdYeuq1wlPTBP*)
(*SdApZpv0wlzVDXMV1RUBZ8RN0h15C/VE3UZd8DFzh3RH3ZW6oFFUZ4zwELXH*)
(*PNboOPoEtcdyR5+htlimHWaq1viXumYp3WpNeKvRrNKUCGfSO9SUrNXAtUCr*)
(*WlM/qHyW2tK+gG9M+u8mWoG+X4p/oaaUf2s0Qp+ohiQ2Z+22V+pmyW5Br2ph*)
(*xqpL+JPUxv8h1cT9vmvVdG+EVgnqWasSOqVWAa0SyqFVVNmRz8ioWYZ7on4/*)
(*5L2SdM0qDX2LvSoJYUS3hFLZLDZjlQY+Q2XQKqrU/wH2qtTnLilR9aoY56xr*)
(*rFnQqyKvq9gq5orsVZH7BY42a5kUoTOk0HWJ49cyd17g5rBZRdCsIqcpUgR7*)
(*YRG9trDjKWStVw3OjVpOzSotcF8H6DZRBzsgVQ9zFcN6ha0C9R6jqNFrCjXx*)
(*XmGrfBegUUscbdVZ1qqA87xVl0l3EHQDetNtpUdiXzNL1SFL1I3qCdtQ8E71*)
(*QqNQ+DZ3DfVAo6huTnSqN/oO6oaPmbukJ/qe1A1t6sZG/XyvsFlmetWW+E6j*)
(*Rac1+T2iXVITc5WmVWkfVZ36YrVXbbvoVUvqf5DSrP+tNAsaVAe361ItM9cs*)
(*ukuKXgnf2yzaK8GwWbp2qZtFiV6ZdGuXzSo6/JYxaBZVevgdNqv0ECO6JdpV*)
(*FvRa9grxXpX7P0G0V6X+92SvSnx2sFnF2KxrsCNuIdor1qwrqMhzFZ3wuAgu*)
(*4Pu1FLmfIyfcz2KvFPxa5i6L3Dw26wR9fwbnaXIC9sIT9DroTmOozqmSMdOr*)
(*RpcGrolxblFpJU0wWzU598DHvRr1dKYCDdCqBt6rBnfeKk9tr5q8pnmrZlmr*)
(*/BZZq/xYq9r9l1mvAi/wVq2S7mDWqh4rPaLzj2Xru6buVG/YVZ0t0gczFYJO*)
(*9UVcRz1cL+yAiHdKEO3q4Xpj7qPuoxzvVtfRR6hDYp3qjH2q0RH7XAvaRLXF*)
(*v9ZoTWB+tFeCplVcW/on016Z6Za5PVH2StUt0SvRrN32ymyzoFd1MGfVJ/4B*)
(*rfod1cZ/+w5/GPbqe5pVHvEFGc5ZBt3S74eyV2aahb0CZaHvZLPU3aK9QoEv*)
(*maDnml6V+T4A91Cp7x1S6r1DSrxuIqVXm4j26oTXOnRK6VWx5yVwkRTT95cC*)
(*tFdqxa6nNWivKPr+DEa9anCq0qlRONZBixpUmlRaGJcOpVkuKtisXtmrRrdh*)
(*7BWl7lWz1yT2qsV7Blo1h7BX/qd5r85grzoCzrFeBV3kvVqDVl1hvQo1f/Ye*)
(*Yk0yf67v6uwLZZ2iJ+1T3+Gr8uwL3yQDYZt4YqsE6FQ/7IG9URz0qi/qFvTp*)
(*FumPvkv6Ym5r+xVD77uLveo7+oD0xD6QvdI3q4s36+d79YZ7hyd2KomdzXCy*)
(*Xr3lfdKf741bxXvVnvGVdGT8rvOHhtIro26Za9a/Vb0CqbtTC98n4PPooVX0*)
(*dUHqXn1vs9iM9U2qOvpVqoz5YnY/NNwL6WPwVpqlf0wLXy99+K1y6npVFvZe*)
(*9krfrLKQt7xXr0g5oK1inrJeBTyC8yHrlT/shL63WK+8r7NewWnUK9Ys2ive*)
(*KlBC31sKm7Ws6tUSvv9Cifsi79UCou97he8nQ99Xhr5ng/M4N0ZaXKq1nGtU*)
(*6nQaFE5NqMkJZiyndtTo3I7tanSBfkGrqFZoVZPHAGmBRiGPEdLiNcqNk1bv*)
(*SWjVFGnznoaZagb6NEvaoVcd/tQSaQ9YglZBr4KgV8HnSdfBC6T7IMxYIauI*)
(*9qMPutR3CM7D62QAZqYB6MrA4U088X7xeZNz46dP/LPAUPhVMggGwrfI0JFt*)
(*NHDkOgOtYm6SwegdaNUOGYS5aiCGduu2RPs1AN3qj7lHBmLvk370UOqNfYx6*)
(*4sT5hHRJzzQ6414w0CS19oQ3Eu1Te9Jb6NEbbJLJmQJnCsxYqfBxKjub06Bj*)
(*aeJ8x+8Hae85/Xxlec5qTf2q802R8gf8c/yuSPlThXVLvKbHLPo8VAvE64PU*)
(*r22sTfyqUZPwRaqO/yxVxX0i1XqxXzRM+8XxbuHj7lH8+Q2R/DmkKsXhH7XC*)
(*PklFh2m/PvF2fcJ5q5QrPvQOyTYdekNKQ15LJQdfoXLYCcsPvkRlB2GuCnoG*)
(*vXrMQav878M+eBfO26TMbweadZOU+l3Hs8T3GtgmxX7MCd8tUuxzFZ2g71nu*)
(*A/sgfY9gr0vK++F5nWPvj8ffG6bU4zRYxGaVuC+QEtd5fD8ZZlp2qhSNklbn*)
(*ajNqGKc6nQaJNauFN6uVNDu34bzV7ApcuqFX3aTVow8ovWr1HEW0V61eY9gr*)
(*ivaqQ/TKf473CgSeYbBXK6xXIRexVb2H1lh7wABtFRW2oSE+b9ahjR9H/1ze*)
(*KunIJrdNhiOukUGYryjaq0HeK2oIZqwhnLN2ONYqCVo1oOuVullKu368Vwhn*)
(*KAMpHLZKwVql0Lbqvcl8JRjPWUa90nVL3Stds5pT/2StSTFPvN7HLNVrGs31*)
(*ylKzauI/6nxm4r6iqpjPjGGvPrNWRbFWCaUR71XN+mS2V1Rp2GfeLKZU1yx1*)
(*r9TNYr16IVtVHvKc9+oJwlZhr2C2CriDrUL+N1ivuBL/a7JXxX6brFe+62BN*)
(*0yv6XniiV4j2yvO0qlcLiL6fjGgVvneDyzgqczmFWp0rOeNetTnX6zRKrc7N*)
(*ADrlwlrV4tIOWK9aXHtQq+cA9qrVY5i0eY7IXmGrQBvsgx10vvKZIh1+0Cy/*)
(*GaDrVdBZ2ANXYAc8j63qOXQJW0XJTqlape6H5vP/BezPYecwdEqCVql7RQ3x*)
(*XolWUaJfdNZC0KpB2AmVXmnnrN44TtUrozlL6dVLjvcqkeO96oA5impL0ZKN*)
(*ojOUSku6lrZVH2SvOjI/I/O9Yti8ZWH+ojOWGsxEAt0R6Wup6yyoh+ZZpHtd*)
(*trieRG3SZxM19Hpe9Lpe9HqEHG1UXZzaZ42aGOErqYZGCVWwCyq9em/aLFWv*)
(*BNaszya9UjerFGYtdbPEHqjvlejUyZBX2CqJ96o8+BESvSr3v2W2V8h3U6K9*)
(*KvFZQ+peIc9z3FlNr+h7XbH36Jtj6HthuZr2qs2liqvRqUXtLg06TRptLi3Q*)
(*JdGqdtLq2oXa3Ogu2Eva3AewWW2eQ9irNlWrKNoq5DMte9XpP0u6aasCTpOu*)
(*wLOkK3iZtQpmq94QaFXoZWWuCtsw7JTohn7e+quxVq1rWjUSsaXpFe2UpGrV*)
(*MOx/4mPRK9oqFPdAGkCPUF88B22ieuOfom7pOeqKf4m6E16RrkTqDepI4hLf*)
(*MlZ61bbLXrFWfdC0ane9srIvWulVo7UeWSFe12jULKN2iWYhk1Z9X6+q8DGs*)
(*D6Q8+oPpnCWeT6rqFWvWZ02zRK9Es7BXsllvZa/KQ5UZi1J69UIqD3lKTgY/*)
(*la0qD35IygPvyl5hs6BXQqnfNdmrUr8t1iu/DYb3qtjnMrjIe7VCSoHoVYnX*)
(*EinzpE7z9+eb572aYe/bAPS96oBWacBMpdbpUsc4N5jAZrm2gnapw60TWtWN*)
(*vWpz7yPtMFsh6FW71zAYQR1e46jTewJ6NYG96oRWdUOrZK8CF0l30Blo1Tns*)
(*VS/MVr2HaKtWYbZZQ6IXrBkb0kjEVaT+/H/DcPiGNHLkKrYKRW5z1xFt1XDU*)
(*DhrBVjHqdlGDsdCwuDtkKPYetOqerllKt7Bdql4Zdasr4Tn2SmmW0i3Rrs6U*)
(*dxrtqQraqo7096jNqg/Qp4+KrC9M5jedPzTUO6NR1+TvEtP+NNGa/qfJ66m/*)
(*W4qiIemrVJ/4xURd4mdUm/BJqo//wH3S+YKUXsH+GPPJsFdCeeR78BGVRXzg*)
(*zD8PniqH21QZfCzQXolOnYRunTzMekXReUqtIlQ06xkDvToZ8hiJXlEnA26z*)
(*ZgXc5L26rrKNvaLK/K6SUt8NcIXxuszeZxidx17R9ylW94q+Nx993yt8rz63*)
(*eXxvGdGrctcJdNJljJx0HSVdLtWk07VaOZ1roU+18ux2qSddrvVwNsLXNOrO*)
(*ZtIBvepw65A63bsYtx7S4dFHOtxZrzqgVciTtmpU9qrbZ5Kbkb3q9p/DXnVD*)
(*r3phF+wOPkt6D66QPtgDBw7xVoVdQUaNQpGbSP35/wp1q0SvZKt4r6JuaFql*)
(*7pXolICt4r0ajrtPhuIfSoPosUY/tKkv4ZnUI71gYPcTupOotxpdFnpFiV5Z*)
(*a5a2VZ922atvP90r/fPjTV/fY7lX4nWMRs0y6pZolujWT/Uq+iPshB91zfqo*)
(*IV9raOb5WaJX2mYpeyBtlUB7VQG7oNKrF9gr5jn2qiLkCe/VI8R6dRt7dTJw*)
(*B3tVHnADiVYJpf5XsVdlfuusVX5r8v3QaavK+HsUi/dWL8f341N6hej7YKFp*)
(*fL8Z1ivWKqrbuRK6Uwkna5Zysmb1Qqt6QC/sgj2uDXA2wdnETtgFu2EX7HRr*)
(*I10wVzFdpMujm3S590KverFZnR5DpNOT9aoTWiV0wT7Y7T2JenymSK//NOnx*)
(*Zc3qDZyH24ukP2iZ9B1cJv0Hz5OBkAtkCOaroTCYqw5Dq8LWta0AoxGbGur5*)
(*x9CR9Z82ErGh+fNZK7fJaNQ1aJVwg4xG35S9GoU2Uep+jcBsNRJ7Bw3H32Ww*)
(*Wfd1zXqo6RVrlqDtVm/iS9KT9FLXrNeqXr1Bnala7VxH2lvSnq5oy9Chrcr4*)
(*oMBWMZ1Zn8FX7ndD2DALXTN53pa+V7C/NaWZp1zXxph8PTZohN2PaoC9T68e*)
(*9j+hLuGj1AAa49U+a9RCjxBtVvQnqRp2P9Grypj3Zucsfbf0z3WogN1Q3azy*)
(*w+8RnatwnuKtqgx9g2ivqMoQaJTs1XNNr1izWK9OBt0Dd2SvWLNucNcQbVW5*)
(*/yYSvToJyn3XSDm0irmArWLvF3oWWyV6he8n6r7AeM5hr+j7zOD7zbhOgnG8*)
(*/jBFe8VU69Qi2qte3iumSQvmqx63dmgY61W3ezcD+2A3tKobZqtOzwFsVhfs*)
(*gV2qVpn0ynea9NFWgT7/eWxWP+yDAwfPgfPQqotkCHbBYZivRmirgLlWjUVu*)
(*IfXnTdDO/FX0rYRGCfpeiVape8VaxXo1GncXiV5ZmrPM9apP1StsluGc9dps*)
(*r0SzOtPfoY4MlSwVTas+6lq1i15Zm8N0z9tqT/+Xxn+jV9aaZb5V39cr1qz3*)
(*2KvvmbP0vVKa9YGcDPvAesU7VRFGP35j2CsU+kL2qiL0Ke/VY3Qy5AFrVdAt*)
(*UgFOBt5E6lZJvFfl/hu8V1fAqmxVufcKoq1SesVbBfB9RaFVyGNGeX8sVauo*)
(*fpilDEGrqAFolFaj1OfajL2i+mAX7HXvIH3QKqaH9Lj3kT7PIdLrRY2gPmhV*)
(*j/co6fUZQ32+k6jfb4r0w3w1EDALFshgwCIZCFokg9Ar2qyhkBXo1Xkycvgy*)
(*GQ1bJWPQqjHYxyZgltGI2kKT0dsIb6s+Pw67ohr9GWPhV36Yyc+L2mRoL+HP*)
(*H4u+jkbpGXMD7KDxo7fQqVjhjjQapzRrJP6BNJxAPZKGwGDSUybxuTSQRL1A*)
(*olf6OUt2KxW6lfpaoytNJfOt1GmgI+u9Rie26hPpzv6i800r6w+G31a69lXT*)
(*r90/P946oza1cE3QI6ERmrRrsAtqrnUoQdNiPyhgF5TtArJdMR9RdcwHbBf2*)
(*Kwo6AzMWVRn5CVVAq5hP5GT4R6lCpxL2wUrollAT/p4JewfekOrQ11phr0hV*)
(*2EvwHL73GfTrqaZXFcF3wW3sVUXQDjoZeF2qCNxGJwO2UAX0ilkHa+Sk72Vw*)
(*UfVe6/z9jfn7HdNO0fcVFej7YOF7zHjOMO6TeC3PGvdxvPaUtV4NujbqNGn0*)
(*wy7YhzpQP+9VP+yC1ADMVrRZfZ7QKm/Wq37vMSR6ha0CA9CrQZitBoPmwCIZ*)
(*CjoNoFWwDw4fVHo1Fr4GNpClVsleCYbNWifjkWs/dkrsZ9GfTVs1Hr1FxqO2*)
(*kejVOLbqhqZV5np1SjVjnYp7oGvWI42RpGdkKBlAm9QGk1+i/oSX2mapekX1*)
(*wQzVk2aqO53pyXhrsVmaVmV/+L5eqW6b69X3Pz9+d83S9+qHmwW90jSLPpbF*)
(*eyWIXmmahfPWB9Yu3ivRLKNeKc2y0itVqyrD36l69UZSevWS9+o579VT6BWd*)
(*rx6ikyH3WKtAZbDo1Q2EvQra1vXqKqkEolXI7xI5ie+lzt5PXfSq0vss9Om0*)
(*rlez2lZ5TmGrWK/YdT0HXap0ajSGYBdEME9pKb2iBtzboVXtZMCjC/TAbdar*)
(*Qa9B0o+GyQDMVwPQK2rQa5wM+IyTQd8JNOQ3TYb9Z8iI/xwZCpgjw4G0V4tk*)
(*GHo1HLRMRkPOgwtk7PAqGQ9bI5PhrBXqHqk7NRVzDZl0Sz1rRULvomBGilr9*)
(*oRPRnwHGOfnnxGwz0degVdewVxNHb0KjmAnY/YyMxd6VTkGvxuLvo9GEhxoj*)
(*idRj7JWatlkv5JzVl/RKozeZob1S0zeL9krfrC6DXmGruO6cj9Cgz5yVbqEv*)
(*mv1R7ohZX6w83/QP0prxbVfEdW001xKkkj+TliRFMzRIaIJ9zyrok9AInWrE*)
(*br0jDbHvuY+oHlrEQLegUXW8W9gw2Aepmuh3sCPCjBXxDlVGvIXzAwO9oiqh*)
(*WZTlTkH7YJ6iamEfrA17i2ir6qBPVC1t1Xf2ijWL9aoi+JrsVVXgJqrkvaqE*)
(*+aoSWkVV+VwiVX4XZK+qvM9hq5glfK929l59cwqvWf5+M9N8ruK98hiBFlXr*)
(*1GoMuzUw0CatZjQEuyBt1aBHB+PeRQY9uwG0yqOPDMMuOIRGsFeDMFNRQz4T*)
(*aBjmqyG/SdaqgBkyCrsgdSrwNBmB+Wo0+AwZAadgHxwLvUgmQtfIBOxhtFdT*)
(*ERtkKmrbsFMzR68jdbP085a6Vz9qIhL+WaJgtuLknwOtmjwKf3bMdURbNRm7*)
(*A01iJmHnMzIed08LdkDqVOIjjdEkLvkpeC4Nw0ylJues5NcafSmchV5RvZnv*)
(*UHeWMXWnZKvQFyb3q87vWrxj/+1eqZslutWaApIZc82yykyzGuM+aHqlNOuT*)
(*plliXxS9ojOXulnycS7eK9ms8E8aVdAsNTFX1cGMRYlmiV5RNegF79Uz3qtH*)
(*rFeh97FXlQfvkMoQ0aubSPSKqg7aQqxZolVXSBVaxVYxK6xXPsuI9qrKa0m+*)
(*r6i6VaxX0CqvSbzuMF5/2HMUjbrVGHOtQ6fcGnWapRG3FmhZGxrx6CRDnsCj*)
(*mwx79oA+aFQfGYHZath7GLo1gka8x6VhvwkyAnsgNQq74Cno1VjgHLRqkYzB*)
(*XDWKnVpGY9Cr8dAL0KlVMgX74DTsgtORV8lMzJbW0W1pNvYa+1j1+anoTWky*)
(*ah3ArBa9+mPo98LPUP/MKfpnINbMqaM30GQsnHE3wS00HX8bTUl3NSZgpkKJ*)
(*D7iHaAxmKuFUMkh5xr3QGEl5hYZSXnKv0EDKG6kf+tSf/tpQbwaX+UajO0sl*)
(*+w006h3qznnPQatyPymsdcukV5+/4/kQfxh0zNLz6L+Zvu4n+YvGdzdLfY1D*)
(*vD6rulmsW6xdxt1SP84lZ6zot7JZolfYLIM5y1yn9L1qCH9D6sNeS9pePbPa*)
(*q6qD1A5r1sHrJr2qDmK9qvYHgeukBnpVA72q9r/I+KwwfqxZ1d5nUI3XIpiX*)
(*xPvM0Oui13tNK73yGEWn3GuNudWjMfcmnRaNUZitRsCoZxeirRrx6gX93CAZ*)
(*9R4CtFXQR9j9hFMwV9FOKa1ivRoPWiDjwUvgDJnAVi2TcdgHJ2G+wlZFXCEz*)
(*EdCqqE0yG23aKGEu7rrmc+p2sb7AfBZ9Bdqy9mPo9+LP2DToJZvvpmNvItaq*)
(*m7JTMwl30LR0T2MSZiqU9JB7hMaTnmilPidj6KXGaOprNJz6inuNBlPfagyk*)
(*/VyvurPfq1r1XtOq3mOfSS+0ifmm8wee/7d6Za5ZbSmMUbN2w+S6rCaz1gfu*)
(*k65Zn1i3VI9x6fdCyuT3iao5i6qO0KqFXVCtPuK97JW+WfVhL6FXzy306g6p*)
(*OsRBq1DIDeyVUBO8LXuFoFVULeyClOhVjd95bJVEe+VzWtsrb/4efl6sVVSd*)
(*5wQ3hsahTUydTgOa8Ghk3Ju5Vmnco5Wcgh2Qoq065dUNetGo1wA6ha0aIqd8*)
(*RtGo7xh0ahxbRY1Dp6iJQIa2aiJ4ESyRiYPL2KtJmK0mYLaaCrtEpsPWyGzE*)
(*OpmN2oBWXSVzMcadEtT365s1HXMVrMN9az+Efi/7GVc1rcI/C+YpajqOmYnb*)
(*YXin9PTdmkxkpqFR1BTMUtRECgd7IEp7gcalV+hUOiO6NQK7HTUkvUOD6W/Q*)
(*QIZWXybTn/UW9XE92YrunLfaXuV+0LbKYq++qXr12WyvTJ8P8aeGac+09M9H*)
(*VV8zAq8tqNKa8kmR/HFXWhI/kLaED6Q1/j0H90GfFB9JM5zNsZ9QU8xHSenV*)
(*e7N7IT0Z0azPu+qVmKtoryjRK9GsBmjV9/SqOuSW7BVr1jaivUKwD6KgDU2v*)
(*av0vQatYr2r8V0gN7IQ1PmeRulfy/Ub1veLXS5e98qhmZLe0/ZrwqFeapekW*)
(*a9e4exv2asyrEzrVScZgHxyDPZCivRrzGQLDiPZqzG8UezUGxmEPnIDZasJ/*)
(*hkxCsyaDZslkIOvV5MEzaOqg6NUK9moG9kHRqzno1TzsXYotshB7HWyjRegV*)
(*vU9tLmZTmsXe/HivRLNmjm6ATTQbu4VmsFnQSTrjxUM3YbaaiaduodmE22gm*)
(*Ubirch9NJd2XvZpOeqxtloVeiVaJXo2k/Xd6hc3KVreK6T32EVr0kZ0Gzeo+*)
(*pujI/YywU7xb7bxXbbxXHbxXHbxXHaJV2Ks/4Ou+WTxbM9njX/TE+SpDvF7x*)
(*i6ZXmmZ9Z6+UZpn2CpvFe6VuFs5a8veJtFnvVL16p+vVB+1uSHsF+yHrlHJi*)
(*ryLeaXt15C1pBA3hr3izXpn0qpo2K1TbK7oLslaxXmGzeK+qoFFVwUqvaoO0*)
(*zar1F81a5c1ivar1XZG9QmK+8t5tryq5ajLhWSNNetajCQ/RLHq7ATSRKa9m*)
(*adKjDT7Xjsa9OuDzXWTCu5tMwIw17t1PJnwGyCS0ihr3G4E2jZJx/zEy4UdN*)
(*kCn/KTBDpmG2mgLTQfNk+uACmTm4RKZCzpDZwytkJuw8mQ6/CDsg9CpiFTq1*)
(*juZhF1uELp2GJjBbZAnasBS/LdH7qMXYDbQQewW6xcxFr0G34IzZMIs2jVLf*)
(*Nx97lYPPxcHn4jek+YSrTPwWWkiAZiZeV87EHWkx6RZZSL6D5pPukrlkZjb5*)
(*PveQzKh6Rc0kPyPTYCblJZlKe6lp1UQ67IKww1HjGe/IWKbaezKqMpL1EQ3D*)
(*59SGsrQGspl+A705FPQp5xM7c0Wn3pP+Yx/I/2HtPYPiTPNsz/00ETdiIjb2*)
(*w8aN3diJvbsRG3t3p6pUJYcM8iC890YIIYS38njvMklHApkkJvHeI0DCeyNk*)
(*yrer7q72091TPW2m79zbs1Nnz/O8mQmoJPXM7fnwi3/mmwkJSPnjnIfX5Ees*)
(*ojByUyFqm/d3kBe5i1ySE/mU7OBh5JZCGPNU+CYn3SJu2wlhRgrdkq66F7oj*)
(*HXSHKHNXOuuedNfea+cdsSYftLM/xT5bgbb9GwKUvHXPxn+Xt7xXJMJbdpRu*)
(*uKasxdNV+53wm+tYwlFpbkuSVNdFsiRJcVncX8uyY+uICmvKvKT4ye4phUW6*)
(*SiGL97MuLUoyL84j68ICMi/MOUijr4SrUp0VUpwf2ZhEytkx6aoUeitF+Ir5*)
(*Kvl0vyTFqc9Bqpgne0k30o5300+dDl+lSVqQdqyZswmp9JZwlkIDt9Vzm0GS*)
(*fkyPtKM6okH6UXFdP/X+9WjerZBUvnvLRiI9leSg+kiqRPGVguKwDHoq04bw*)
(*1W3prOoj9xTeu8/tDxzOqvmgCNVHixzOEr6S0FfVxyuhpq8Ewldq5iv1KZ0C*)
(*fSUQvpKcp68uWqC50iY9I1wlqGOGUeiG0b3HQb1nt8To0YU6907SAQP9ondt*)
(*g86lVaKVn+ff5qt9Vym+0ngcRuvZYaMTeq8ueqrHgZ6+0nv1w+A9INH7DBxy*)
(*lsDuLK3NWWrvCZuzhKumpa9qfR9/w1fCVXZfVTIXHXbV8iFX/bv76hVPFci5*)
(*Qj+toDh6A4WCqE3k01m50TvSVw+j9wgnM5bdWcJX96WvDjpr28au9JXgjs1Z*)
(*gnvSV3tv5I5wlkDmrF26aseB+Juh7IlvcJb01r/SV3e8115x1r6vDjvr4DqW*)
(*yFX7vtp31qLDWYd89Q1nrRxw1L6rDvvKzoLiKxsHfSWQvjo/LRGuSj1LmLGk*)
(*q2y+SjkzgNRT/ZKDrkp1OEvxVRozluKr9m/46rCzFF+lHa+zOUtvc5biq8wP*)
(*1I5sZfdVFV1lp/q9BLonSVLzXqqk+t0UG2m8ny5RHcmA6r1Mwoz13h0b9xTo*)
(*KoUc+imXvipQnEVX1RwtJWVQHS+3ofiqlp1QdVJFX9FZp7SoPa1XXGXLV5rz*)
(*hPmqlvlK+Ep7yFeveIr5SkJXNXj10ledkoO+2neWFTq66G0Inx3Evl1mNfcO*)
(*m6esEq2n4iu9l+IqiXePgnQVM6C3Qp3PIAy+xGcYet+DjELnO0YmJCJjCTTs*)
(*gVrfabpqRqLxe4JaUm3zlKA6cJ6uUqhidxNUBq9IykNsBK8eojR45bWUhCgU*)
(*hR6m8AD5YYI15IevKzBPFUSukVUbdN61DcJ8Fb2FfLoqj47Ki2a2in5GlIyV*)
(*E7ntwOEuh7d2bCjesjvLgS1fvQmRwQ4hMlaQkrHsvrpv43XeOrSm9Tocvno1*)
(*Z72yr8MBZ+3v56D4Kt198TXOsues5VdYPUSaWE8/gOh+B8m+siR9lU1fCbIc*)
(*znoisfsq7fyMdFWa87TiKpuvUs+MStJODxGbr073Iu2Uwr6vlE5o91XayY5D*)
(*vkoXzrL5Ku24GekfmOikfV9lHFfyVcZROusDjXSVQFw7K+NIJTLeq0T2e3+p*)
(*rw466x633ycPoHr/IcmVqKWvCqA6Wix9te8qhdoT1dJX0lWkVvpKB80ZvfSV*)
(*dJXNV9qLiq900h30hWvnYUeRBk8bdNWrvlKcZT2UsUQ//Nf46uA2e7fUswvq*)
(*Drmq3eaqw74y+PQe8FS/jUEYfYdg9BuC3m/kAGMKvuOck9JZWt8p6SqBzneW*)
(*rpqF1v8xNMxXNYFPpKcENUELdJRCNfOPoCpkVVIRaiNk7RBlfOx1lIYqlISv*)
(*HaL4AIURgg0UCOipwig7IlexC17jx1/fRJFkC4Ux7IQxu+QpcmP2JIq/dpXc*)
(*FX3QXTtKX4zYPeCsHZmz7Ahf3Q/deytvdFeQsp4l1uQf2Lj/Gne9mre+gc+q*)
(*5Js5a/2ws16bs/Z99c2cZWflMAeO6RGkX1k9RAYzloMri9JXgttXXnWW4quM*)
(*80+kqxQe0VdTSDs3IUl1HlN8dXYY6WcGpa/SzvQpnLI7q9/mLeGrbqQ7dUtX*)
(*KViRfqJV4biFKK4SZBwlxxv5mHCWQfoq47jwlRYZx2qRdbSWvlIh80gVsog4*)
(*d7qg5p1bDlTvJjhQv5csUb2T4kD9bipJRy07ocDuK/WR2+QuXXWX84ECnaX+*)
(*IAe1R/PpqkLpK/XxElImqRWuOl4hfaVxqoGGfbCWvtLYXCV9dZbzfAO0F8zS*)
(*V7pLSocTvtILb5BXPdXofZh6zy6J0UP4ql36SjrLrVl6S2Sut6F3tR7Cvl26*)
(*j59TLxzl2SYxePFxrw5JHV0lMNJX9fRVvU+fpMHXzgDq/egsf8HwPn6jMPiP*)
(*S/T+E9JZEt9H0Pk94rZZB7qAJ1AHzkEVRG8Fc4bMO6gJXZJUMwcdpJJ56CAO*)
(*j9kot1EWplBOLwlKIw5TQj8VR64TZX1K9L7i6HU6itti1mwwq93gY7FbZBtF*)
(*sbsojH1KntFdz+mtZ8xcT2Xukog1LrpLINa58uQ6146yNk8/CR7QWYKHYU/p*)
(*o91/G7Y1e8Fd2xqYWMd/GLwleRC06eB+wIbknv/6W7H76lVvvdoLD3rr0HqW*)
(*PIZnyeasb3pLWd9aPnws4gEyXFYkmVcOs++pZc5F6SvJxTkHiq9mHaSfe4QM*)
(*ku48YWMcGWfHyAgy6CtB+uk+SSYzliDD6SA90lfpTp10UwfS6auM460KJ5ql*)
(*rzIlJumqjGP1vG1E5ok6ZDFjZR7TIfuoTrpKXCsr+321vB6N4A6dJc7v+Zf4*)
(*SqB5L8vmq9uoPXJP4YOHNnKg+SBfOktzrEj6qvZ4qc1VCtoTVdJXWrpKoHPS*)
(*QUtXac/WSfTMVtoLJuguKr7SX9n3lYEZx+Epr34FOsrks89BXx10lvQVsftL*)
(*8dA3p+KpNpurrDZXtdvyGp/jobiqztMqfWUUrvLuVCZ91SBd1YtGm6tMvvwa*)
(*/fptcxAN/kOoD7AzouA/JjEGTCg5y39KwW8adf4z0AfMwBDwGPogdsJgOit4*)
(*31Pq0AWJKmzZxipqDlDF3nYQxVsrjlkhHBauzPIIzoh1VLDbldFNZQdmadS6*)
(*pCR6U/Y9pffRY9e57fqqpPgG3XZzCyXx9FXcNtkhT+mtPfJcUnht9xCKvwR7*)
(*ctpzVk74UwWbt4Sv/q286i7xt8ec4G0Hb/PWm7jnuyb5prPWJAd9dXA9S/GW*)
(*4io7dl8ddNbB46dfRXTKTHZCQdaVA7A3Ck8pLEnu2DLWnUvzh5yluGpaknl+*)
(*ir6aJBOSTOdRxVVnh5BJMs70S+yuOohwVYZTlyTdqZ1T0EYXtUlXZZywELN0*)
(*1T4N0lWZJ/T0FTmhRfYxDRHXylLL69AIlGs8VEpU79x0oH43Hup3EiS17yZK*)
(*1O8kKfxtCmrfSZVo2A017+77SqA9kk3uSDQf3IfmiOIs7bE8aI8WSISztMeL*)
(*ua0UOmYszYkK6SvtiRp6SgXdaTX0p7X0FTmrf42vLDBcsaLOxSpdJTiYpeyO*)
(*MtMFZt8+SYNXN/NXh0T6in4xuLdKhK+Mbq0K9NHrZh3z3MH79fRVvXubnOJz*)
(*GdkF6zz5uEernPXMW0avdr4uX9O7Cybmq0bfHuVr81O+JrN/P5roLLPfAEz+*)
(*A2gIGFSguxR/Kd4yBowpWctvgtlrEnUBjyTGwGk+Nou6wFn66jF9Jbw1pxA2*)
(*b2ORrlp0eKsm3MYr/lJctXRoVoQvKc7irGS/q2S/s89yzvJoZZZF00d0laAk*)
(*RkBXxW5IT0lu0mu36LIEZqv4HbKLkrg9OusZn/dCUnx9j1nr6T4Odym+sues*)
(*/ay176yDeetNvO554m+O923HLuaF7JAt5AZvSnKCNw7xIGDtrdzzW3Fw13f5*)
(*35SzlLWtZXprgSxJMtwWFYS36Ct5LOJrjke086qr9j217PCU4O7lBekqO7cv*)
(*PZZkXZiRZNJX2eemJFl0lSCbfTBTumoA2WfI2X5ksQtmn+6RZDFLZZ7eR7gq*)
(*U9JBB7VLV2U6tZBm+shCH5klwlNZxwRGZJ8wIPukHrePayV3jmmlq+S1so6q*)
(*lOs6OM5BXPEX+UqgdbhKQcdOqHAfWuYr3dFch7N0xwpJsXSW8JVAT19JVxG9*)
(*k+IrwxkddNJXehjYBw3sg8JXhivNb/TV61wlfSXylcNXVumYg85S3NP8xqn4*)
(*bH8efLyBHy8QrhLUM2cpKL4SCF+Zma8k/HqEpw5BT5ltNAbaCBiWNASOOnKW*)
(*hM4yBkzRV1OKs4JmoAums0KfKNBXmlDFV5qwBbIEdbhgRaKKsMF+J+HtKjrs*)
(*dVRGKFRHMZNF71Nx7TDl7H+l9FTp9Q36Z99TgsJ4zgT2wwTFWcUJ9NVNxVml*)
(*cc/5/GfSV3YOO2tPctBX0ln2nGXz1r/WV69zlthXVbgqzzZz6SfFWes2X63j*)
(*YaBg7Q1z/ZCvpLPe4Cv7WtbrfJXlsejwlcNZNk+9elyPWPeyI/fnclnbx5Wv*)
(*6WJnWXJXzCsL0leHnHX5icNXt88/kmSfn5RknRuTrso+N4Is50HpKYVeh6te*)
(*76xOxVVO1kOuynRqopOa6KpGG/XSVaIDCl/dYb4S3D5eK6+PdfuY6rCr6KkH*)
(*7yto6SiFW4d5J9FGsgPduykkTaJ/L13h3Uw6K5N+yrJx2Fk65izhLe0HireE*)
(*s/THi0gJXVUOg1O1RM9OaDitguGsRvpK71wHHRG+0l9ooK/M0F8idJbIPMJZ*)
(*RnZC4aom9irR05r5nh9PWJEeELeFoxqZr4SzZN4R2Uc6q1licG9WHORmQb3r*)
(*66fRhbiaD21vcFOo58c3MlMdxOTVBhO7ocDMnNXEjGXH4t0raaZXBU0ya9lh*)
(*R3Rgy10ia/kpa1pKR5yQGAMVb9UFTUlfaUMeK9BTuogF6CMXoSP6qGVoIxZR*)
(*S+8cZhXqSAUldy06qIrYp5JURy1LqqIVqq+tSGpi6C92v8rrm6iI3USZIG6D*)
(*/Y+ZK2EVRYkKJcl0WcoWylOfojx5D2UJe7ITltgojVUoub5rY4857amDwig7*)
(*ewqRTx3k018HyQvf2ecN+9N/A7qqIGQdBcGvn3l0Ul7Q6uunw137/nJkL3/2*)
(*RT/6zHfDwV0fsd61SY9tOJD7mr5yjW2JYx/UtVdYP8Rdeuu+26vw9W3kuK3i*)
(*4dUVyYOri3josoAHV+Yl9y/Pkcd4cHkW9y/N4N7FacndC5O4d36CjJER3Ds3*)
(*ZGMA95z7Sa/k7rle3D7bfYg7ZwSdpJ1YcfdUG+6eacG9Uy24Q28J7jqZcOdk*)
(*I28bcZfZ6h57oJ37AnkNB3HdGXFNhxrkHK1C7gfkaAV0f6v4Sve3iqcc0+Yr*)
(*3d8qntK/kyKn4V3FU455JAMGZiyB8JX+yG2J4cg96N8XPOD9HBjez4X+WD70*)
(*RxVfGU4Uk1LU0VV1dJXdV3VnNKhz1qJOZKtzRumruguNqKOvDFcsqLti62hi*)
(*rZ35yp6pxN8ARX55lLJBh/U6Mo3wVaN3p8NXIv/I7ubRLHOS4p6mN07pqKtm*)
(*OQ9ub3RvIRaYPA54yobZW3GV4qsOWHy6HdhdJWjh12uhq5oCekmfA/OBzGWS*)
(*HXFEIpzVEDBOJiVG+kofMiNdpQt7An3YnMNXhsglziXpq9c5Sx2poIpYOkR1*)
(*5CvYfCU54Co7irPIjQ2UCVfFrzBHKa4qTGIfTKPH0rdQlraD0uQdlCQ8tWWs*)
(*nUO+2nfWYV8VR++90VcOZ0XsOKbiK7uPtv78FG56C9JNb0HJYusOXzmcRV8J*)
(*DvpKcdamA7G+9VpX/Rt89TpX7ftqRfpKOovdUvgqx/Wgs57g4RXFV4qzHtFX*)
(*U7h/YVwiXHX//DAZVHDus9FDX3VL7vD2Pl10E3HuIO2kDffOtJJm+spCzNJV*)
(*d081SsR1+u6d2PeV8NRBV+Ucr5auyqGnciVlMLxziy66tT//NoEz4cBMoouS*)
(*UcceaHg3FUZmq7r30vbnkXSSKamT87ak/v27qHv/vsRw9CHqjubBSF8ZjxWg*)
(*7kQhjCeLUHeyBMZTVaQG9WfUdJUaxrNaGM/pYHQ2oO58HV3VAONFE4yXhKuY*)
(*h+iqelcrncHO5d4hHSWcJRwl1qqeZG7LdXCRqdqCh/hYl0RxllVid1aDh+Ic*)
(*s7sZZrfXT9PVJpjcTHIe3N7EbGXy4DbPFkmTV6sDi3cbaZe0+Haiha9vp9W3*)
(*dx+6ykJXWQK65WxysO8te85SOuKoxBQ4IWmgr+pCZukqBX34YxjC5+mqBUld*)
(*tJKzFJYkmqjD1PIxgfoVaqIUVNFLqLmmoIphFruuoIplr7y+hurYDVQRh6+k*)
(*q1boqhUUpLAz3tlFWSZdlbotfVWayPu36Ke4XTpqh7nMxvWnktKYXUnJtaeS*)
(*4uhdSQm9VUxvFUfSWRFP96GnCiO3UUBXFURsIZ+uyg/fdEzFTRtvntJLq28k*)
(*P3jlLazJDml31uu8JTKWwuZrshbzFzujuMb2PiuHsHvrruf6K2xIHnps2tiQ*)
(*5NjIZd904LGCPLdl5F5dIgt01jxyXOYkeXRW7pUZSc7lKTy8NImHF8YkDy6M*)
(*4CGd9fDCkCSH2UqhFw/pp/vnhZu6JYq/Om100GkdeOBsxf0zbaQF9083cZrl*)
(*NY/vn2qQPDhtlNfAun9SI8k5WatwXC3JO16DXDor73gl8umr/GNlML6XeJh3*)
(*k14hxUYa6ukmOw3MVXbqJVloeD+b3EHDB3fJPRsPUH/sIclF/fECNJwoQuPJ*)
(*Ykn9yVI0nKmmq1SctWh01qDeWYeGc3o0nDcqXDKhnjRcNqOBvmpkD2ykp+y0*)
(*+A5KV4kOKDKW8JX4O55wVlfkGH3WbaOT3hLrXe0Ob8lcROc0eZjI66d0lHvj*)
(*oe0WTzOxSJq9mumlFpuj2pibrDY6pKta/boU+DW0+fWQPonVXyCc1YPmwIPQ*)
(*YZJ+iX19qymQ7g0cIfyegsYlDcGT9NW09JR0VeQT1NFTRvpGuMpI19hzluiG*)
(*sh9GH+bP+Up9bVkiXCURniLqG6uS6tg1VN1Yo6/WUBHPPMU+Xpy8TFctIz+V*)
(*z895SWfRM8xZJcmbKE3aRkXCLipExrrO2zd2JXZf7TtrT3LQV9JZkXv7zrK5*)
(*yo7wlR3FWZs2N70esa9rYejbeZvLBLk2Z9k5uFYvnWXLWQ/8t6SzDnuLPvNZ*)
(*JcsHWD2M97qNzVfYwgOvLeR42tmU5NrIY/aS0HWCAg+61114a1E6K4/kus4h*)
(*3/WxJM9lms56hNzLE5KcS2NkBLkk58Ig8s4L+pF7vo/0SHLOdytZi966L+m0*)
(*0U7PCdrw8GwraabfLHhw1oScM+Ia7Y2SnNPi2lcGokWek47U2lCjQFKDghPV*)
(*pAqFJyokje8l2Eh6heRDmJilFDJgZo4SNL4vSIfpgwyShUZiOnbHxj2Yjj8g*)
(*OWggjSfyJSbmKpNTMcynStB4uhSNZ2pgkq6qhYm+ajyvg+lCHRov1MN0sQGN*)
(*9FTjFQG719VmmK9a0cRsZfZgbqKf7L5qDVLWqyYSl237LljREz3hyC9N/l02*)
(*Z7VLGkVn826lb5rQ4mVGi+frZ7MH8TQ55qHHvS1o9Wm20Yo23zaJ1c8Kq2+H*)
(*pN2vU9JBLwk6mZvstJO2oB4HLZJeG+yM/J6kswI5g0ZsjKI5eExiDmHGCp2G*)
(*MXxWUh/5mI6aR330gkLMoiNr6e3esvfEaAUNnXSQ2uhXoKME6usKtXSVg7g1*)
(*6avquHVUEeGrEnbAomTFVXnpfI2ST1D54Ln0VVESMxgzVlXSHirj6aXrWw5f*)
(*SWe9JWfZfeXIWQ52yJbjOMUC+/6rNhzHCr0Gu69e3Yf/0P78IctvRPhK5DOF*)
(*Tcmr3nLkrYDNb3hL5K4HdNZDn5XXsKbgvfEKW4fI82aOPMSmpMBLochrXVLo*)
(*ybzrwa/ZfUmST2/luy2g4OoTFLrOSgpcZlBwZQr5lyfJBPIujyL/0igKLg2j*)
(*8MIw8i8MKJzvleRd6GHuOkg3PUYudNpo530r81gL8pzFdY6bkHPWjFznRoUz*)
(*RuSe1iPPgQb5TuS0GoX0VZGTCkUnakg1Sk5UkjKYjiTaSH6FFIn5/VQFZipB*)
(*0/tZDiwfZMN8NNNGNpqO34b5+F1JE10lMB9/SHLpqQKYnQrRRE9J6Kqm02Vo*)
(*clbDTE+Zz2slTRf0MF8wwHy5HuZLjTDRVWYXdjDXZjRdbZWusjBXNXnSQV7M*)
(*Iz79sg92hI3J9etOTrEmJDpgd9S4I7conYsf4yfWuTqks5p82hTneDe9Eekm*)
(*G/ZtbT4WB1afFjqqRXEUafdvV7B5qpOvqdAr6Qrql3QHD5B+tAd1wxos6JW0*)
(*BvfZGJAIZykM0VEj0lMt9JSgKXQSjWEz0lOCBuYr4akGesqOyFkCA7PUQXTX*)
(*FOzecvjr2mGEqzTX9x2lYaZywP4nM1bcKqpurqLylvDVMopT+N5IW5K+MlZ9*)
(*FzV5L1CUvinXs8pTdlGTsoeqW3tyH4jKuKeS1+UsgcNX154pHHLWjsNXb3LW*)
(*n/NVUdgqit/CW10mYU6TbDmcpXjr8P4RwlcK29JZCnzMd/UNrCv4bL7C9iEK*)
(*fXdfYVtS5KNQTMcJirxWFeitQoe3FlHsNo+iq48lhVenUejyiEzRXeOSQuar*)
(*wktDKJIMoPBivyT/Qq8kj+RcEvRI8i522eggVmayNj6nFfnnLArnzcg7Z5Lk*)
(*OzeggM4qPGsgeoUzWhSTkjNqSfHJGhQ7VaH0ZIXE/H7SK6QcoumDNIX3MySW*)
(*DzJtZKP56G06KcuB5Xg2uUPuwXLyoaTpZI7E4pSP5lMFsJwuljSfKYPlTDks*)
(*zFVNzlpYmKuaLuhgoauaLtWh6UoDmi6bpKuabK6yuLVJVzUzV1m8upQ1bNEF*)
(*6anuyEm+30dkDxTuEvmkM2LUkVf2vdXlcJbF14o272ZY6aw30cb8Zce+rZ15*)
(*SmD15fRtlXT4tUk6/TsO0c3XlDBL9TAr2emli3pIRzBzV3AX2jkV+iRtdFlb*)
(*8KDMjS3BghGFkDFJayi9HDYBU/g0XTUrXdUYNUdfzdFT82iMWZIY6S9BHW9L*)
(*olcOobu2+Fq0MQqa2CWJ9sayRBPHeXNFctBX1fFrDl8Vpq5IV+VlLMGk/gHU*)
(*hR9KX+XbfKVKffYNXx1y1qGcpfTC1+Ys0RUP+Oqgs+ze+kt99VaXSfg6Nt7k*)
(*LemsoC3JQW+JKd3kt/JGX+X6bSj4btnYOUSx/94hSvx2Ffy3Feg4ifeapNjh*)
(*rCWygBL3ORS7z6LEbRbFV2dQ5DpNHqHYZUKB+ar4yrCNQZRcHEDJpX4UX+yj*)
(*t/qQf7GXnXGf/EvdChc7STudZuVso6eaFS40SWflC1+db0Chs7j2ld5ByRmd*)
(*pJSdq1Q4ixmrzKka5ScrJc3MVpYPEg/MZM7kAzMVFtLKbNX8QbqcLUcz0Mbu*)
(*13LUxvFMtBzLRitpY8ZqO3YXrcfvk4e8n4OWE7lodcpDi1MBZyFaT5eg7Uwp*)
(*Ws5UoOWsCq3MV4IW5qvW8wa00lctl4ywXG5AswszjmsLLFdb0OxuRYtHO7tY*)
(*F1q9lL+3yf2bApmvYibQFjPKn6UB1hvjsEQxm0QO8D2uZBaxVtTm341Wvw5i*)
(*RTPd0uLXIr3T6dP0Rtq9TOjwNjs4+FiXrwWdfq0OuvzbiFXSHdAu6QkUzupC*)
(*b2A3eoIUeuklO13BHRLhLMVdgj6bt/phDRqANVDxlvj7QWvIMNpCRyTCWebw*)
(*CZgjH8EcMQNT1CxM1+ZgvrYgXWWKXbb5aukbvjKKyfsGmb3mD6GLUdASfSy9*)
(*deMAN5cc6OLFGtYKVMxWNSJfJSyjNJnvhVT+7k5bQE7WIoz1X6C8/AXyssTf*)
(*C5dQlbqF2tTnqLn1TPEV/WSn4saOjX1nfcNXgqhdhehtZd96eSyQQmHUukQ5*)
(*Vmjddkz26xH5qDhMoTT0v2cKX61LV9m9VWhzltgfQvgqP0hxlpjCV3mBirNy*)
(*7dBF+eyE+b4bNtYO3S9gb7ST50/8th0UkBK/PZT52qCnFLZtbHL7hqTcex1l*)
(*Xmso9VxVYMYq9VhEqftjlNNVZa4zkmK3KfpqUlLsMiYpuTIifVV6aVCBzhKU*)
(*XBTe6mH+Uii4ImaXjQ4UXmlXXHWxhX2SXLSg8HwTMUmKma+kp5x1Dk+VSE8p*)
(*rio7o0L5qRpUMF9VnKqQtL+XgPYjCY7ZQU+1v5+MTmarjg9SONPQQTqPZKCT*)
(*uarr/Uw5u+mrrmNZ6DyRja6Tt8kd9J28iz6ne+h3eogB0u+UiwFmqr5TRQpn*)
(*StDjXIIu5zJ0nytH1/lK9JxTofe8Gj0XNOi9qEUvfdN9xYBOl3p0uDaiy8OC*)
(*Do8WdHiyb3l1MOd0sod1MRcxL/kyLzF7dMXPwhgzgI2m7+Gni/+MnpJF1N6k*)
(*01JH0RY9gK6wQfSIfOPTSdrQ7dfMTtbEPmbhbRN6fJveSq+fxUGff7OD/oAW*)
(*DAW2SgaD2jAUbJUMh7RjOKzDwWBYF2cXBkI7HfSHdEjahfv49YzSr+PXhtEf*)
(*Sreyq/aHDGEiZhoD4aMYjp5Ad8ggesNGMBo7jZ6wIbT4d6EnepTO6kdrxDB6*)
(*bszCEkF3RTxCR8I6WuJW0By/Dkv8Jppubjkwx61Lmm5wst+Z6CNB4wEabigY*)
(*4xZRTy8Z4+k1G/pbhzEkrUGfuArdrTWoEtgLU9dRQTdV3qWfCldgmfl7FLV8*)
(*iLy8eVRmLaMyfgGVsatQ3XqOiuvbqL6xiRp+LWJWxYm8tU3oLpG3SNmNPQWR*)
(*t+iwiuvkGp9zbQsVMVv019ohxHHWgpLIFUlp1KpEHkMUseKgJHxZUmajPOz1*)
(*syx0CaVhS2+cyjHgGygJ25DuKg5dl84qCtmQs1C6it4heYHEn7nJf42eWpP5*)
(*KZ+ZqcBnh2zZ1p7WFbxWJHnenD6rCvRYgR8/P3tkfsAWivy2UOXNfu35FFVe*)
(*O4Q/E69Nsk4/rUkKXOclRVcXUOrGr9ttBZXu/Hdy4+8Ycf/KJB3E7HRhUK5N*)
(*if5X5Cqux/QIFd4z7ISjKLoyKnOWeF7ZxWFUXFCo5PMrLnSjwnH94U6UXO7g*)
(*8xUKXax0WBu91Yriy+RiEx1H6KpSUk5flTnriY63tTbUqJCoUOVcjeqz1VCd*)
(*qUINu5ig471bkk66StDFTniQ7vdTbaRL+tgJez7IQD+d1XuUME8J+tgDB07c*)
(*xeCJ+xgmIydybORhmJlqyKkY/eyB/WdL0edcil7ncvSdr0D/+Wr082sbPF+L*)
(*QTqr/6IOfZf16HUxoselAT1uTdJZnZ6t0lnt3p3sZF1E8ZXBpwdN1ydgSXuE*)
(*ra4v8ZtPgN5a9pS0buhudqPl+qD0VZ9/Pwb4Mf3ebej3bWHeMaE3xIxe/0b0*)
(*+5n/VQz4N0kGAywOhgOaMRLYguGgFowEt2I0pA1joVaMhFkxGt4uGQkX/rJK*)
(*BsLaDtHu28Cc1YrhiB4MhffSbb3cLvqi4i3RHcU6l4XONnk0K90xsJPfO2+H*)
(*8WcR1o32iH7035iS3rJETqCH/mijr9rY1+zOUry1BotkBU3sdQIL/SQw2zDF*)
(*KTTeVGigowT1dFNdgoIhcZ865imdIGEFtYkrqEpj57vN98N9vr9K2ElXfo3c*)
(*nufIL51H9b0F1CQtQsWvqTb5Q3bIPajiNmQ+E7P6poDvO1J5c09i95U9c1XS*)
(*cYLqaxt0FnPDNXoohn66toKyaIXSqGVJGZHHDpGKyGUH5RFLtmOO/jzlYYtv*)
(*YVkeEy7PXRGmOEv4SmFTcRZ9JRC+yg+khwIUZwlfifzkWHfy3iHssz50m/e6*)
(*Y72pgL4SFNJXBeyJhfy4wgA+zmwm+p7wlcqLP0evXemrSu+tfV/5rKAmkL8D*)
(*+LFl7vP0FX9XuC2imtlK7baMGtcnnFNQXR1D9dVRVMhrjo+g1HXMdk3xcRTy*)
(*dqHLCDPWGEqZsyros8qLI6i6QC4O0lldRLn+ZtllOouZSlDs0k7v0VUurShy*)
(*aWbvsRAz/UbOi2vHEPbBivN6orGhRuU5QQ2qSY2z4irV2Qqoz5RJut6/5aD7*)
(*gwT0HkmS9DFbHSYN/UfTMcBOOHAsA4PsgQOk/3g2PXVbMnziDkac7mPs5APy*)
(*EGPsgGPsgCOnCzB8ugjDZ4sxKHx1vpSeKieVdFQNoa8u0FeXNBi8rMOgSx0G*)
(*mK96ma963ZmBPJtf8VUnc0m33IepPZpdKGYcpqRJzJk+xy9ffI0e1Toa7o6h*)
(*OX2CvhpGd9gwPTOIIe8+DHp10VdW9NEx/UHMSQEmPvavYzDALBkKbHIgXDUa*)
(*1CoZC1ZcNR7WLhmL6HAw8oq3BIPhVjyK78fY9S50Bpph8WIH9mqAlT21I8CK*)
(*zmB2x/B+DMWOoj96CP3MkGPxYxiOG6ar2Gnpuc5I9seoPvpqHK2RQ7Bem8RA*)
(*yio66Jq2+GW0JqxJWtjdBK10VSszk53mOIUmG+abCqZ4G/SQoJEuqk/ax5i8*)
(*Kl1lSF2FnmiT+B5IoQ8y6I97q6jIYTYoW0TT1m+Q2/cSxTV87+Qs8ffIMjQp*)
(*26hN+xjq5Jd01ybU8fz9cpM5K16wS4/xvRf/TFIRp2Bf46qiswQ17JJVpCJm*)
(*bR/7MUI2R4njHR3HEjFr2RHHGR085uhtvN1nK7bzV6xLysLWmLs2JKXsgoKS*)
(*4A1JMftgEfOVQPhG5CTR8Yr8dhTE+rjvpqTQh5nNex9xv4hZrIi5SlAsXBWw*)
(*g1JS5fsU1T7PpLcqfdkBmdOUDsivh36rDePPzJ9O9Xgsu5/KcxEa32XovJZQ*)
(*6z4Lg/cUmYDOexy1Xso1TsR1L4vdR+iqIRS6MV+5DaOEOavUhT5jL6wglZeH*)
(*UXV5gHP/mp7iWsFlLh18XgdKrlolxXRWsWsrHUYuW+g1C11nRhWdVU1fVdFX*)
(*Vee1NmpRc46cV0F1TlCDWucaaJyroDlbTkqlo3qOJkr6SP+xJHopRTJwLI1e*)
(*2mfoWCZGjiqMsgsOH8+yOeo2RtkFx9gFJ+mrSXbBqVM5mDiVi8kzBZg4U4Sx*)
(*s0UYPVuC4XOlGKKrRi5UkEpSQ9QYvVSLEbpqxEWPYRcDhq7WY8CNvvIwo4f5*)
(*qserBV1ebej0akcH+2CHbd/Lzhix3jzM99MEdnt+IfPVSN0e9FnDaMmYROv1*)
(*UfREjGHQfwRDXnzvezPDsBcOBHZggH6RDmLWGnrLHAoyY1j4iXMkiJkquElO*)
(*wVhIi2Q8hJ4KbcVEaDsm6KHJiE7SLud4JP0V2YnRSGYu4a6INumuIc5mXw06*)
(*QhvQHlKPYXbYkZt9nP3opO96Y/phpL9aebuHt3tv0Et8fCC+l7e70B3Twe19*)
(*6IzuRX+c0n07YscxnL6KroR5WOPn0Z6wjLbEfawJCzbm0XZr3uYtdscDWOIV*)
(*msSxTex7AnOyQmOKQkPqGuqZpQx8LV36snSWcFFlNn31gHkmbxl5lQswb3+F*)
(*B73PUKLmthz+bk9bgDadHSb1Q6hSPoT61hZqbzFvxTNn8bbqFl10i+9B9kVB*)
(*VfwLBWYtQTVzVvWNbahjBZty/3o7lXSWoJq90O6pmui1fcTxRzaq2QkFBz32*)
(*Ot7uM/ZeeqoiglmPnVA4qyJsU/qqPITeCCXBirfKgrfpLfbXQMVbwjnSPcxI*)
(*xba18WK/DQclPusOSukfQYk/Pxd7oKAscFdS6c/s6fcM5f5PJQfXrkrpxMpA*)
(*OtR7HiVuM6j0mIYuYB71QQuo838CLfOT3nOY/8eGUOc9Cr3PGGq9leuclNFX*)
(*RW5D9NawpNSNuctN5K9h5RrlLoOocumX1wO2Xxu48iqdJXDr4McLrPyYNnbQ*)
(*VlQwY1W5WFBzSaCc31x1sRE1F+pQc1EL9QVysVZSSx8ItHSD7jw5V0nKCXPO*)
(*sQQMHE+UDB5LxNDxJJIiGT6RjtHj+4ydyMT4cYWJE1kKJ+/QU9l01F066h6m*)
(*T9/H9KmHmDmdg5kzeZilr2boqynnIkycK8H4hVKMXiiXjF2swvilGoxdUmP8*)
(*Si3GXHUYu6rHqFsdRt3rMeLeiAF3E/o8m+irZvqKzvKx0lUd6PTtlPtfinWb*)
(*xuhRGONH8enEb/Hj7a8xaeJ7IZm5484srNfH0Bs2hhH/MYzy32WUGWvItwuD*)
(*QZ1yrUnxjgmjIiv9mTkabMYYny/meHCzZIKumqSnJkPbMBnehik66lGkoANT*)
(*UZxRnZjgnIjqkFNxl1XO4Shms0Qr5h+OYiChFV2x/D5jW/H4/hQGE3vRF99D*)
(*H9NV8d3oS6SXbrbDFNEIc2QjuhP4tacPSn9101n9zFzWa3Ra/BTG2cd6k+mr*)
(*W4/Rmbx4mKR5SUciEU5jv7PSS4JW9khBC7OUoDmJt9M2JM02mtL3MWVuwJhF*)
(*V2Ut0VmLUGcuouIuM0nuEqoKl5Bfs4DG7V/hdjffgxp2tIdPUJE6j9oMvteS*)
(*nqE65SVqE7ahSdiA5hZzFm+rE9hvEvZQk/BCYvdWjZjMWyo6S3VzF7U3dsiW*)
(*dJY6dl3ua++AGctOLf2l5hRo6K9aZq6D1Bw83ug1VEUuvQU6ja6qithEdfim*)
(*dFYVO2FFGD3BPijcVRm6jQpBiOKuskD6Jkg4Z1O6S9wW04H/ho1Nid0/5f47*)
(*kooAOiqQmSmABLEzBz5DWcCeg1I6q1RmL74eP0+5P39P+LCLeynneWwIJoGP*)
(*5Hm4xTVX7OcNr/fqo7cG5HUFxPVPxLWaqjzZEemqco9hmbnkJBXug5Iqd3Fd*)
(*zT5Uu/c4qBJ4dNnooCOt3NaGmqutULk2Q01vqa+YUUtvaS81QnOpDprLWt4W*)
(*aCR6+kBguFiDOmJkDzPSF8YLZYqfTiTQTckOxk6mSMZPpEkm6KlJG1MnsyTT*)
(*7IGP6KnpU7fxiMycvoPZ0/fwhM6aO/0Q82dySB6e0FePnQtJEabPl+DRxVJM*)
(*XiqXjF+qxKPLKky6qDHlUsupxYSbDhPudZjwbMC4ZyMG3Ruks3q9mtDr3YJu*)
(*71Z0+7YRZR8nc0gvWm6NozdvEb/c+ho/ffo1lnu+harEVhgT2BdvjKAvfJS+*)
(*GcGYz6D01YhfNx3UgWE6Zkw4KLgRE0GNb52TwSZmKJOcE6FmTPHjJkItmApv*)
(*kTwS3S6iFdP01XSUlXRgJrqddGL6Gr0V3YHJa8xdnBPRbdJdo9f4sdmd+MP0*)
(*T/Avy7/B/7f8W/J7/Muzr7GrZn4JN6D5uhlN1/n9p3Vj7N4QJ7twogWD2V2Y*)
(*zh2n1/pl9uq7qfiqL2EKjx5sYCB1Dh23ptGTuoju1GVJV8oSulMWJD10Vk/S*)
(*AjoTl+gu9sfENce00lNtzFRt7HztaZtoy9ggm2iln1o5m7PorswtWDgbspdQ*)
(*l70IY+YStFkLco2qMm8JNUXzKFTNwbzzC2R3rKBEt8DcNYPylFn6bRflicxY*)
(*7IPapG3okragS2RHTKKHkvagTnouu6I66UOHt1QSbo9/KtHe3IEmjh9zY0Oi*)
(*ieVkxhKo6ahaGxre18UoaJm7JFGrEuEv9QG3vY4a9so3IzIbO2zElvSVHeGs*)
(*qrAtGzsS4S3prmB6J2hbektQLhxmQ7hL+ixgP0fZPVXpz58XHSVQBe6hlp5S*)
(*Bz2T7ioPIrxffsBd0m30nYrdUxO0hrrgJcVVAeOo9++X5zgSx6h1Bg+i038A*)
(*LeI4XE86y1Oct1tcC2VUnttWXNtXXnfcQzBkY0DBsx81fL4Drx4bXRKVVwe3*)
(*W+m+NqiZsTRuzdAwY2ldxHkLxPHAJujYqQx0leRyLeouCVQwSqrRcKEajexh*)
(*jexjpvOl9FISSbTNJIw7JTMzJTMvpdBLaTYy6KcMzJzMxOxxhccnbpMsPKGz*)
(*5tgHF8gi++DyqftYYb5aPiPIxdLZPCw6F2Cevpqjr2YvlWD6Uhmmr5TjEZm5*)
(*UsPbaszQV9NuGkx76PDIw4BHnvWY9GrEsLsRQx6N6Pcyo8/bgj6fZvT4tsq/*)
(*87X7E2aLppvdKIswoDLRhKJE9uFMM0ri9MwA3ehi/hiM7MdY4AAm+G8yzi44*)
(*7t+urDWFtUj/TAY30D8Nb52P6KwpIuajUBOmiZgzYc2SWXa72YgWPGZ2mqWP*)
(*Zumq2RjevtYhp3DX9LU2m7taCbthrAXd8Xp8NfMD/Gnj1/jj4i/wi7Ev8Lv5*)
(*X2K5+gk6U1vQkdIMy61GPCmfxk8nf4R/WPwVfj33U/yGz/3Hxd9gKJUOix2U*)
(*vmqPGcBg8gxmc7cxlL4gfdXHrtabtkRWJH0pywrJ3J68hK6kFRurzF8rzF50*)
(*FKc1ZZXwPr3UTi+1Z23Bmr1BlNl6ewstdzZgzl6msxbRyGylz5qH+t4cavKY*)
(*oYqeoEQ1A+uzX+B+F3ugcQnVOTNQpT2G6e4z1NBX+oyPoU/agT55W05N8lPy*)
(*DLXJL6AWXVFAZ6kS6a7EF5LaW3sSXfyudJb2xqZEJyadZcfuKP31DRhiFPTX*)
(*1iUGekagi1acpn4Lb3OZip9LFbUBNfOVHVX4K4RtS2pCdyTVIduoYi+spLOE*)
(*qypCNuR5qcvFulew0hsVb21LZJ6yuUpND2kCnkn0dJZAxU5YHUR4u4rbBaIj*)
(*VvsxozKXadgLjUHMwvSVmblKnHNN7Ns3enMKi8zEC0lzeHxjBqPsIB3i+Hu3*)
(*Xpjookb2QpPvJGrZAdXuB65F7slcxRymwGzl3a/A95bK20431HSh2rsDtfSV*)
(*xrMVOo9m6NzpKTd6ytWMOpdG1LvUw3hFj/orWhu1aJCoYGKOMdNX5ktVsFyq*)
(*gIX5ynKxVHGV0y16KgkTZPJUMqacFKaZsWZPpJJ0PDmuME9vKWRhgXlrkVlr*)
(*iT5bprdWmLPWma8EG3TWGjPWqsA5H8vMWAvnCzFPXz2+XEJP0V1XyvDYpRqz*)
(*5LFrDR6712LGXYsZTz2mvYx45NXAXmjEiEc9Bj0VZ/X7NElnCToDLOx7rZgq*)
(*msYT/RIGNZPo0Y5g0DiJlqJONKZZ0BXfjkFmnfGQLkwwk00xm034WXi/CeNh*)
(*wj/CRUbMkD83p0PrMRtSL+fjsAZ6yoTZsCZ6ymJzVTOeRLWRFszRR4+vsdsx*)
(*U83GtCru4pwRzoppke4ajTVjJrcLf1j9Cf7Lxs/xd9PfxWzlMAYf8t85sgLW*)
(*dDO671lhiKvFYH4vvpz6An/Y/g2+Wv05frn4Y/xq9mcYShtGb9wQem6O8mdB*)
(*X6XO4nHeFgYz5pnDHtFXi9JZfemr0lf9qauSPjpJ0Es/dSfv05Wi0EHa+bwu*)
(*ZqtO6SsFxVnCV4I1NNNXTXSVOYPdL3MOuntPoM17An3xDCpUU+h7+Qvk9SzA*)
(*YFrm9mno05+g9cEL6JJ36LlPFVclb8qpSVGcVZvC7JDywuErJWsJZ/G9mkCf*)
(*3dqVvtLF82PjtiS6V5wlPCWou77p8JWgjo6x85f7iv0ykrkuckuiOGvrkK/U*)
(*4TsSVdiuw1eKs3YUb4Wu285DfdhZ5UE70lf27qdiz6ulh3S8beSU0FFaf752*)
(*gID9mF5T+/Fn5/sCGlLrw9d0W2FWWobJfx5m5iVxXpChmDHs5m7hJ3Xfxcd5*)
(*T/E0axXzsY8wGDCIdva55qv0FvugxXcKhqsj0DJfadzHbNf2HWJuGqSjBhVP*)
(*+Q6QPkkNM5vah/h2cXby9Tug9RLn322G3sMCA31lpK+Mrg1oII2udTZHqRyO*)
(*2vdUNT1VheaLFWhmvmm5KCihoxJIvJxTTomSmVNJmKW7Zk/QV8eSMHc8VTpp*)
(*9Uw2XZSNVeaspWMZWHg/BfNHEvGxSz6enXuAlfdTsf5BJrad7mKXnXCDeWvz*)
(*dA69lYu1c3lYuVCI5SulWHYtw5JbORbJvGsF5q5WS564qfDEXY1ZDw2dpaOz*)
(*DBj30GPCux4j3g3oZ0/scjWg26MBwwGtGKETWmPq8E/bX+HrHwH4ivwe+Odf*)
(*/Al/+Py3mK0dQ/ctE4aile72yJ/4mTDlb8R4sBZjoXydYAMdVIfHwXXKDDHS*)
(*RcY3zjm66klYvZxz4Q1YoKPmyDwz0wJZpJcWrrdh8Xo7FmOtmKeX5mLJdSvm*)
(*bvB+XAdpx8JN9sQkdtaoQjyq6saGaRrjpZ1493/4PxD8f3vh8v98hu8X/ltl*)
(*NqI12wxNvAoDxd2YqB7G064N/Hz5R/jp7Jeooz974oeYI4eYmybQdmMQg5lP*)
(*2BcX0ZX6GN1p85wLcs2q7eZj6Sexv0Mfe1/PrVUMpm1gMH0dfWmrkl56rYez*)
(*i7OTdGeuoyt7HR23FdrvHKY5dR69dzaZw1ZhTnkM88MFNBUvwFL+BI0NC5j4*)
(*9Jf4/E/AL38FtFcvoT5tCqNl30Jd4gbqU57CwKlL2pCd8KCvalNf2vhI7gsv*)
(*jjU0Zn7K572Q+yzUM4Ppb+3IvmdJewHjrW0Ybm7KWRUxz963AkMss9R1diFO*)
(*Ow10mZ36uE35MbqbGw60cesONDforOsrb4Y+00Zv2dh5hV2JJvIpnfmSue45*)
(*fbUlvWWI+ZCufMGMdeC81OFizZ7+Et0x7ClhXgp9Dm3kp6gNYm8OfM6sxCxK*)
(*TEF77HM7MLPztUU+Y8fbgNGXWc9lEWpXdmMPusznIzQFfY6mgA/R4MV85fME*)
(*zX5TaKVXhqOH8RPj9/D1J8C/LH6NH5Z+xP+n4xgN6JfrvD3sgq3MVZ2+M8xA*)
(*zFne09C6sRu6DMnrzKm9h1Hh0ce8x7wVyNv+fSinp2o4tUH9qA8ZZKZjt/Tv*)
(*gsFLnHe3BQ30VSN91ciuZHZvkDQxizRf1aLZrVbS4qqWtDG7WF2IaxWs7GAd*)
(*zDV2JumqSac4TJ1KwDSdNUNmyZMTCfRUEh4fTcD8sRSsnExnZsrCllMWNumr*)
(*dWasNfpp73Q2dk5k4IUzHeWUiedOd/DyzH1sH8vChxfypbe2nXOw6ZyHDd5f*)
(*u1SIFdcirLgVY9m9DIv01cJVQSXm3Wow5048avHYU4tZLz0m6a1JrzqMMW8N*)
(*uBvQ46pDD/viSEATfdWMRw/a8fXnv8fXP/sTvv67P+Jffvl7/PFHv8LvPv8Z*)
(*FupG0ZNkwPD1OkyGN2I6gFnJX4+pgFr6S4XJMLoxVEsXkWA9noTqMBdikHM+*)
(*tA5zYXrHfTHFfbF9PtyAebprPtyIhYgmLEZbsBjZQl8101dtWGKOWqK3lm60*)
(*SXctXG+R7lqI423hqngrFuM7MZPcAk3YA3j8p1Pw/E/OGCppw0hpF6Y1I+xa*)
(*JrTeNaMpqxERR8Pg95+94PF/uSH0aBDSPVIwpmYHLOxG8pEUDGeOY66AeSl9*)
(*DAZ20570SYznMEvdXWBGYidLnKG3FumxTQzf3sVo1h5GMp6jL2nT4av+NzhL*)
(*+OpNzhK3W+lBa8oi2lMWYM1aYtd7jPoHk5htfYkf/xB49hvg0/8C7G7+HF3V*)
(*j9F+bxbt2aty31NT2q7c31Qn9jllxhL7OUhnpe45fKXP+BTVzFQVN4TP+L5N*)
(*3JP7QDSmvoAl82PpFHGum8rwOVRHLsjz3zQmsVdGL8NIH+lf8ZXxxr+vr2qv*)
(*bbzVV8JRuuhn0Eaxo4VsymyljaJ76Bnhq+qIDYlYs6+KoGvD6alw9rqwF6gO*)
(*ZbYM+8jhK4Mfs5XvNnPSNpp8NtDsu8Y5J2kJYNb124LF7wVMXh+hzv1D6F1f*)
(*QOuyDZ3rCpp8l9HsP43eiEn+v3uMrzp/jq8/pa92vsY/Wn6G2WsjzFgzGAma*)
(*YM56hF5//u5xGUdf2AYaPWdh8JxmL5xE6eUBqHzGYObPvD76CR5caUV5QC90*)
(*kWP8vzyICi8rKq5aoA/ogjV6BEb6qt6r+cB5UBphYV8SNDOLtLppYKWrFFRo*)
(*dyVu1ehwrUaXSyU6XcrRxYzTIymmo26SODln6K5ZMkdfzZ9MYN9LxOKxBKwc*)
(*T8HGyTS6KgM7dJLkRBZ2j6XjE+Gp95Lw2dm7+OT0HXIX372Uhxcn7+Czi/l4*)
(*cfYBntFXT+mq7Uv52LxShA2XIqzTV2tuJVi5Wiqz1hJ9teRehQX3aix4qjHv*)
(*qcETLx07IXOWt4EZqw7D7nr08fvrp7fG6avxa03YVo/gt1vfwpeL2/hscRWf*)
(*b27iB8+e4Z9/9Hf43e730Jdai7Eb/Dx0zUyABtP+KkwHqjAVVoXpcHbQEA2z*)
(*khbzITo5F0LppDCdnAvh+kP3xVwMM8jtS+F1nHVYijRLlqOasRxjwQpdtRLT*)
(*jFVmquUbLYq74lqku5Zv8rGb7Vi+ZSUdmE1phib8IUKPuCHkPQ/Up/PfKacJ*)
(*heEP8DDgLo7+9RHUxNcg2SUZV/73Szj9H08h4IgfNrvWsda+JJ9z50I2/dSN*)
(*juR2NN1q5eerYzdp4Pu1idmig+/PbpT4NrL/DGEq7wVG7z9Db+oGhtOfYeLO*)
(*Swyx7w1lrNNZa+jPUBC+EnRnkOw1SRfpuP0q67IzivUu8bfH9oxF1KVNQHt7*)
(*COuD3waYq1Z//BVe/va/YWqMuSmrme/xFnpkCE2pi9AnLNJX7CvJ6w5f6VJ3*)
(*D/lKm/YhffVUWYNnH7T7qlKcv+sm/ZO8i8roBems6uhFlIU9hkkcn8iMpY8T*)
(*3XBNyVk26ugro51/B19pYvh1x2wfYPcQYm1KFbkNddRT+TdDgSpyV96vDt+W*)
(*a/VyvT6SXTGC3S/iOXnJxz5CDV1VFUS3hbyAIYg5KvCZdJXFZx1tPmuw+jC/*)
(*xm4zL/HfwH8RTZ7LqGe+Mnm8ZJf7DlqDvs/nf446j100B++igXmpPXoazaHd*)
(*6IsXf1PuxGhsFwYirPzdP4DxmAn0Bo3Aynxl9Z1FvdsUs9UijN5L0PsuQeu3*)
(*gCqfGZR5j6PYaxR5nn0wJS3z5zxN/9JX4UMwRo6gIZz5KoBd0MOMBm9xfjhx*)
(*7iUTmj0b0OJpJAZJG7NIu7sGHW5qBWaVTmaWbuaqbrdKZpNy9ElK0e9CXIsx*)
(*c/qmg8dkjt4Srlo8mYhlsnI8kVkqGVsnUmV+EnnqxSlmKPLxqdv4mA77xCkN*)
(*3zp7B5+fUfg+++EXlwr4+D18dj4PH1/Iw4d02PMrBXjqUoBt5qstN3rLvUQ6*)
(*a829XLLiUYkVzxoseaqw6FWLOR+xlsXO5mPAJBn10GGQHh6klycDzZiMMWNX*)
(*O4QvJhfxfHQCnyzM4bONRTx9Mo2f7r2gr77F96IGE/E6zITzcwWoMeNfg5nA*)
(*aszSV08imOVCa+kiDdHJuUivLYZpHVNsP3h/idlqKVwn53JEHVaiTHRVE1aY*)
(*sVav0VN8P67GtmAtttXBSlwrVm+2YZWeWktol6wnduBJGrNybBEyPOKQdPka*)
(*HgRkINsrBc7/8TTiL8Yh6EgwzPebkHAlEe//9fvwfdcXwceC0VFiRdnNUujT*)
(*NEg6fQOtyczVyXVyrasxqR4lwaWooItbsnv5nrPg5rG7yHAuwcDdFQzc2UJ7*)
(*4qJcX5+484LZjJkrU3GWYIBZSjirz0ZP5tohZx321jp6bu+g785Tud7VmDhL*)
(*rwyj9nY/plp38KMf/jMWvvwF9n7zB6wsfQJzQSe08RY0JA3QM9Oo5f9zsc+p*)
(*3Ve61B2Hr7TseMJVuvSPoE5+zu/1I6gS+Vgis0sSPRDFzhe/IRHHXItuqU/Y*)
(*QtW1RdSK431i+D6K35S+0t1Yl9h9Zecv9pU4b8X1TaK4Spm7qLW5SkyxPqVi*)
(*3tJce8apOEq4qTZ6T26ridiRCFdVRzyTrqqK+IjP+4S++kTuU6VnzqoL3ENT*)
(*8B5a/LfQ4rWEvkD++wQuYCx6DlOxi+gLnsMgP2+b/zM0sws2eH0LevfP2R2/*)
(*zw75EVpjPpV/IzTRV8Vu9ch0yoPX/+QH979yQ/T/Eo2BWyP0WC+s4RPskFPS*)
(*bU1BKyh2HoPOb00eB/3g0qg8739pyDzueY6g5voCSsNHUB7Rj5rIQdTSU5qQ*)
(*XuiDu9FAmoO7YPZutp2zqRGtXvWwetbByt4kaKevuphNuj3oKA81eukqQR/z*)
(*VR99NcAcM3hVUGqjWDrKzryNBWasFWasVXprwymRrkpmpkrBHjvhS3bCj4SX*)
(*nO/jW+fu49MTafjx5Rx851Q2Zy5+7JKH7/Gxn7qW0F33mbXy8e0rhfiUrvro*)
(*aiGeX6WzOHfcCqWzNj1KseFRpuBZiTWvaqx6qbDsU4sl+uoxvTXjw4xFX42z*)
(*Iw5dVWFErG0FmTB13YQve1bwx71P8au9Z/j1px/h77/3GX76yXP88Ysf4utv*)
(*/Qxj2ex/CQbMRuoxS1/N+qnwOFCNuXA1FqPoKnbCxVA1loSLwmqxTBcth2sc*)
(*U2w/eH81Qk+0yow0YDW6kZjpqia6yYL12GbJBjPVOtlgplqLb8X6rTZsJFix*)
(*mdiOjaR2bCZ3YD7Dyk5Shoq4fGR6JyHiRDAeBN1FZVw5dCk65ITk0VfN8Hkn*)
(*AB7/2QfhTpHw+n994PWuD266xsOSY0T8mRAMFpjRk2tEH2fbAyOM6Sp2LBWq*)
(*rlehPs2M7Ks5uONWiq4707CmzaA3axVD9Nb4ffbCrE2M0lHD9JJgMGuNzlpF*)
(*f5ZCT+YKurMUum7v0yFhV7z3jJPvpWRxLKH4+98oqm/3ods4h+1nP0Ins277*)
(*0x18+PlP8JOXv8ZXT/8J35n4FUzZM+x4I6hLWZK+MqRsSV/p055Cl/bM5qsX*)
(*qMv6VDpLn/5S+krsr1WX9lz6yZT+HMURs6i8vsjctSmP6xH7cpWGz0IVu0x3*)
(*Lcjz3mjj1iQ6+kdPD9kx0E/6eOGpdQf25wrEx9rP+/V6VqCJ3ZL7gWlid+Q+*)
(*YY55nXky9ilqorb4vF2+Hr+fuOfSWRXhW3Lq4z6UWUsVucf3+3PCDhj5Mb31*)
(*qaSGiOOXjRGfoC5oF62hT2EN3GCumscjOnCW+W46ZgbziUvoDX6EMb5me+BT*)
(*tAV/C61hP4Y57CcwBP8QqqDP0XDjO/KabYUBQ0i/okfUsXs49h/c4Pwf3BH/*)
(*fiaqAxtRG8xMFDIElbgGJt1WG7iKYo8FuV9EcYA4tmgdZXRwccwGcplvS2KZ*)
(*a2/OoipmhH28H6qwfhgiBtEQ1ot65iujOJ+lrzg3nDjvUiM6vOvR4VOHTvYl*)
(*Qbe3Dr30VT/zST99NeChkgx5VJNKDHuUY4Q5Zsy91EYJnpyNk0hPnYnHIlk6*)
(*FY81ekq4attJuCoJT0+k4Dk7ochUwlXfvZiD71/KxQ+d7+H3AVX4yqME/+BT*)
(*jt/5VeHLiw/xI+apn/E98kN66wtmqO/wtT5jB/yIPHcvxB5dJZy1w4/b8izD*)
(*llcFNr2JVxXWfVRY9aU7/NkJvekWXy1mfcValhYjzI1jniIrmTAT24jfTn+I*)
(*r3/2G/Jz/P5738bvf/Q9/Muv/w7443/F1z//J0zcrsfMLbE2bsQsP9+sH3Nb*)
(*EPNUpI69zYDF8FqbpzQOFB8pfGMbP24fAzaumaSr1tkFN67vu2qTnhJsxVsl*)
(*wlOCraQObCd3Yju1C0tZHRh62IIRdR+MmVpcOx2JdI9UTKjH0V85xPduA7pL*)
(*BxDhdB0X/sZVeivkZBRMORbUpKhw9n89hpzgm1gydeCRhv1YbUJbbg0MWSVo*)
(*uFONqvhCfGuKLl/7FX65+lt8f/JX6L47g4H7SxjN2cZ0Ifth9gbGsjborXWJ*)
(*w1nZCsJXr3OW8JVYw2q7u4dG9su6pEU0ZLGj3ZtG6e0edJkW8NEXX6H95R7q*)
(*Nxfx7PMf4MuPfyn/LvL1l8CQZgclN/pgSF0ma9JX+rRtm68I/SRQJSlr75rU*)
(*56jLZEeiY8Tx0iJL5QZOooKuEpRdm0dB6CPUxK2gKlZ05TG+v6aY4ZTzdDmc*)
(*ZfOSdFb8X+4rZf+vLdv+qweIVXylilFu6+NfSqqYgYoCV+Q+8NrYF+yFz6Cm*)
(*p9SR/F4j+f1FfkY+l6giPqcrnqMx+lP2qy36agcdQfwd4j+HzbRP8TT7I/xT*)
(*5x/wu/bf8v/SLmZSXtIRy9Cw/2l9vg2V7/fREPsVqsK+QBmdVxy9jSz/YST7*)
(*WuBNX/2nv7qA9/7aFYWR9QgV1xG9OcyePcavbxyN4m+y1/ZQFrKLtCuzyAvd*)
(*RenNj5DqN4/bkSsoSn2B9NBJpHg0I+5MDWKOlyDzgga6sD503JxEW9QQu6BF*)
(*ngPF6ivOZ2JCp68RXfRVF9/Lgh7mkX7mkkHvWgx5CZhFJNUY9ark+7wck/TC*)
(*pBenp4Jw1ZwzXXVWYYm+WiZrp0S2SsDO6WT2wGQ8O5mMlydT8Cn74HeZq35w*)
(*JQ8/cc3HT84/wJ9uNeGfHwzSWUX4nU8F/nS9ET9lrvptgAo/oae+JN8n3/Yo*)
(*xifuxXgpfVWAXfci7HqWYtuL0FVbPpXY8q7Ghq8aa350hB/7GL+PeT+d4ive*)
(*HnWnr7zoHf4+EL76w+NP8PXf/R74x/8K/PYfgD/8lrf/AHz1R3z9g99h8q4J*)
(*jxPN8m95s/4G+Xnmg/RY5r/R+vUGxUXMWoK1iFrJeqTGgX3bwe0bUVrJWpQe*)
(*GzEmuspMVzUpMGNtxTXTVc3YutmC7cQ2yU6SFbvJ7dhJ7ZDspnViObsTxthy*)
(*hB4NgM//4y59dfX/dEPUqRj+36rAbP0Skq5mIdXjDrzeCUH0uXhc4uOhpyLh*)
(*/Z4/vN91RWdxFf707c/oAObJ73+B784v4OPpWfx06wVeji/iF9tfAH8P4Jf8*)
(*0ez+NwzmTaP//mP2uycYz9nAKHvdWLaCuD2SzexFBrJXJD10kKDbRtdthY47*)
(*S2ijr0zZO2jMfkrf0lncVv3gEYrv96HV9Bjrn/0Y4z/7HsZ+/m0sffgRetpG*)
(*MVQ/jY3Bz9Gn20Qls5g+bVH6qi512+Erffqew1di7Ur0wqr4LTr4M+mqsmv8*)
(*WnK/K/1UHrOA/IgZFEY9xj2/EeRzW3/pl7jjM4Tugu/JzCWOTxTOkt6KX5dI*)
(*Z/07+UoVt7UPXXWQKvbE6ut01s3nUMc9k+f5u+0xhfveT1AZwbwY9ZJ8SD6m*)
(*uz6FKupbqI76Dud36DDeDnwJS+y3Uee3iTb6qjuY/zbBC/g050t8UfYl1tMX*)
(*8DR/Ex3BAxilwxv82cvDPkNz7C+Z3f+BHfXvURz1QzwM+xiFN18i5FILQlwN*)
(*OPtuBv7mf3TD//ZX5xDjXgCnv4lGsk891CkLKLk+L8/1kxO2jtv+a8hmpssK*)
(*3kJa2AZSItaQFLWM+OgFJEY+giZjFZY7q2i/vwHL/8/Ye8fEdeb925FWWmml*)
(*SFEUWVGsRLYj23HcCw4uGIwB03tvwzAMMPQ+tKF3hl6MqQZjG/eKwQUXiunV*)
(*uJc4fZPdbPvtPs/uPtn19X4ZZ/d5f++r931+f3x1hjNn5rT7vu7rc2Y4E3md*)
(*Gp9TlEsGrBVOtXt0Gv4XttP5sPDpEMecGjghzDrhVCtVTY9TJWccKzkrTnL+*)
(*57pgv1RlXBRvubjEKodiemV61VAFwqjgf9ftPSphlYrB3WqGpUbFryaFV9OS*)
(*BWeNIlj4LIqHu+N4YZrC1xY6vrfK5dVuLT9lXOAf3Y/40ixZcmA6PxX18q19*)
(*Lr/z0PO1cPILqRe2RTwRj3ogzFqw0TFrk860dSaTsty4Q55UAePCqzGnEu45*)
(*lXFPPGjYpYpbwtubsl9L1Sf7csm6RLgl89zruBbcwMnIEs7mVXO6pI6Lh9q5*)
(*1nmCax09zJy6wQ/XHtCfdJiB8CYGfGV5lyVXK+eW25In1XNPuPqGVeUMG3il*)
(*Z8TApYp/T5fm/9//vmfgVeXP0yruKRoNzLoXdJhRpfBK1Wzg1RKrlmqJU/9i*)
(*1WTkm5oSXk0Lr4aEV81hFVitOiDM8qBF24LWNQPFnlA0lnHE2qUQbBZOlF0c*)
(*W9/9jP0fW3Kpvpe8kCLJhM547HSgTZfNHxfG+Hb0Bp8PXeWH2UH4w7d8PT4i*)
(*mdGOEEsPMn0SyfHOoVnyZ71w9ExaH0fjLnAu9SYXk+5yQbhzJmmIHmlznaky*)
(*jqePS9acoilzloY08afUKcmlMi9FnktecqoltxqQ6W1xqkG6sh/QmjFHWdwA*)
(*WYmXyMk6T2VtH80XRoloPU798BQ3Zr9gYOAJRxtuUJV5hmpdH/qkPqpjb1C7*)
(*xKxo4Ue05CbJeP9iVWWs+ELyY2oTHxryx1I+zAta+i79JE/7XnO98RtiHA8T*)
(*aVdPduAJkjyPkOTRIZz+iWL1VX498poy9U3h1d3/jVcVoYOGWsqOS9e4qg3f*)
(*4fqZW5IZ/30/QpUwSXnr/8Wof9XSfeyXfK9MXl+mGqcseErmzfy7lv4uCBgx*)
(*3OemOHjU8Blnsnu/nJPTaGwuSN4fMnCq1ucBVZIDlx6Xi0uVBjwyMKvU/zkl*)
(*Hk9oVn1NtcssLZ6SvT1HOON9hxeF3/Ft7ffMFs4xWjhDke1hcmw68VpdjOea*)
(*BgI2ncNnyxXSPB+RG/SCjMD7JHje4YO3PHn3LXPeecuYD9/ey9r3zPn4bTNW*)
(*/spSnrMmTXmBeK9LmK0tx2hFKT6WF2nV/yf1RX9An/trzhx7TVTYPd59J4pV*)
(*H8QQ731E/KxduNwhvG1D79FIlcshmt3b6Pbupsul3XD/puPOTZx0quOUONUb*)
(*Ri2xSs9ZyVGnncs5K3VO+uYFx1IuCaMui7/0ChP6HArpF5+5bvem7uwLNtRd*)
(*U+GUiYoh0xDumYYxtk9YZRLB7J5I5vZEsbg7msfCqud7EvnKLJXvLXX8eDCf*)
(*0RUqfsq8wT96nnN7pTs/JbbxU+NNjr9vwaFf7aH4ra0MbInhK+9GnkrOW8qE*)
(*X3mW8MpNx6hJGLMOGUw55DLlmMuEY/6/mTUm+3JP9mvpWtYt4e1S3RTuXRPO*)
(*9jvKfsjy59yzqPeMI99bQ653FFUReXRlNHKr9hJnU5uZqrhEj18Bl7wLuOaR*)
(*z22PQu54FjHoVfazT8k6/IWN/rI+qf+v6WhAKeNSS9OJwDLGpN5M9UxIppxQ*)
(*1DEhrjYefIjJkBYmwtqZEKcyVMQRQ00Jr6ajjjATLf0ptpP5WHGupC6qvHJw*)
(*WuuE1UfiTVsCcd+owHuLSnzLk3iHFGri6tizfDed+e1cbDxPgkc8XaXHCDBT*)
(*EGjuTVt2Dl+NXufp7dP84dFtvp2+zOPbJ/lS5kU6OhDvrCTTQ0uUaQztMcep*)
(*k+x6LOY0V3X9nE+6ROIOHT2xNzmacY/usocEeHahSbjDftcTmHldxNLrKtYu*)
(*l/H06CVC0U9y4AX0Mf0cyxnkSGqfeNFFmlMk00mmLJLcGKM+jS5vABPbLDZZ*)
(*aFllkc7yPUnk1E1y4txXpKWc4lTnE04cek6q8hT56hN05d2jMVn6vEb4kSB9*)
(*N/4R+th5qhIWqUy6T464VWHEjOF3V3UhN+gsfsCfnsHL0f/gP2R6/9pjHgw8*)
(*4+HgV9w5O89Xs3/j75I7/yG5szjkIpXCrCX+LLlU/dJv9AT2UaS+QXXUqOQz*)
(*yaKqGVoi5g3fg6hfYlrwTSqVN8RNrpMnfbc08IaBVYZr8Ko3n00WLP1Wo3IE*)
(*vWac7IDbb+41L7muNvxLSgIfCxtfCMseGO6BUxY5QVH0PdZL/97wYRKr3o/n*)
(*w/cSxW0Sidy59Fvdj6j1nKcj4nMqAmepDntCmvuMvP+3ZLt/Q736P2kI+JFG*)
(*n+d0KxY54X+X37b/hbmSR+LDd4g21ZMRcJpg+yY8Tcuw31aMcv8FfIzPkeI3*)
(*Su7S/4sHLxBhchSXFRpizRNJ90kXn4og0zebPe9bsVFy4bq3nWjMmmbHyjRW*)
(*vpvIsrfjMd3dwnM5xhMTrw01Nf2altY/8d67Gn71Cyf2fargcKZ4VFoLJb7p*)
(*pJqqKTuYRk9A+5sc6NBBt8PS97sb6PNu5oRFNpdthUF20p89amV+EcfdSjjl*)
(*XsJ5jzJ6PUq56ip93CmP6/Y53HUqZMgpn2Fhwz2HfO6aKA01aBIsrFIJq8Sr*)
(*JHdMGHgVzpww677w6oFxFI/3xPByT7xkwBR+sMzgt8KrwRWhHH/bgfGtUZz9*)
(*0J6hnQoW7OO4uNGLjo9syXvLiDNr1dyXLPfco44XrmW8cs/niUMi45JD5xzF*)
(*s5yzmZbtmxaeTjoVMeEkfBDWjgt731x/L+W2cOqWPD8gLnbDIVtKx3m3dHHP*)
(*MBmPEmmMLOJcXicn04/QFdPE4YBibqUd5Yzwqtczh5ue2dz1yGbIK5dh73yG*)
(*fIoZ9n3Do/+/Gg/432viZ1Yt1aRCz5SimsmgOql6plSNTKoPC69a/x+8amcq*)
(*skN41c5cdLuwqp37MfKc8Gq85ia5PoWoxGOVu6Pw3hpKXkA1nbqznNP3YvaR*)
(*GWE2KlQHA9i1ciel8cUoLIMw/fiAtMNMTldU8pu5IV4Mn+PPz29LP77Br+cu*)
(*8+uZm2gcbMkKiCHEJIiw3ZG0RR6nI/wYp+LPcCP3Gj1Rx0jekUzqvjwyZFw8*)
(*UjlNkPo468zy+HBfESst61hh1sjybXpWbSjAdE8lyaEXuHj4Kbe7HtEhXt0q*)
(*zGtNkr4fO0SRMCs5up+07Lto0nr5VN7no535rNxZRIDMj029Rbis/3TXK8rS*)
(*hmkvlqyTc43B45/TXTRPbfI0dclPqUl6QnncImXxC9SkPqEkfp4ycaz8KPGV*)
(*mGFO1D/jb7+Gf/7483eE/wrfP/yS37/8Hf/5wz/5+tH/gt/Da1kmX3WGcuFV*)
(*RfBtw+d/S7wqDrlJacQATamzNMYs0BC2IIwae/O7ZQE3DKyqktdUh97kcOyI*)
(*gXdFAb0UKa5RGnxHMugtwz23lq7/54XcEfcbMPxWYrHyIaXKz8U1XqEPeUWx*)
(*6gFFoVMGVqndjrJlTQIrPghnzcfJvPteJMt+Fc3et0sptJmiIegh2a53iHe8*)
(*Sn7IrHBmFrXNBMEWCxSF/Ke85x8lH34p/jJGvVcfX3T8jt7Uu4zUfU2SvHey*)
(*+hLFefJcxSz1xfNUpz+hMuUlOtlGnex3qvN1IowaybMo47CigjJFKuHmHhT6*)
(*JxFuFkSaWw7u26OIdjuE5fZcNqxM5u23FSz7IIItO6Q9rBSfWhvDmnUxvPOO*)
(*N7/8pRMfLfOgOruHMLsQWtLKiTZ3J87YldhNHpwKauWs/wnO+52nx7Wbo7Y1*)
(*nBD3OGOTR79LCXddqww554KLzBNGXZC6Ity65l7EbfGZEQ/pa0tT51xGnbL/*)
(*XcPCqaUaEVYt1ei+EMaEWZPiWNP7wpg31bC4N5IH4lmP9kbx3CRWcl8i31mm*)
(*8rVtNrW/2E/N29ZS+6lfZsrZbV5MeSTzUlPJoyA9N2WMHbbJFyZVsOAiJYyc*)
(*s03ngX0yj13SmHeSbOiYx4xzPjPC0innYiadhQfOekMNO5Qw5FjCHcdCbjsV*)
(*cMsxmwHHTENdck/nWXs/FwqayXSJQmsXRaJFBMmyzTrTSBoc0uR4FdLnlc0t*)
(*qSEPHSPe2dzzzuOebxGjfsU/c6j4/6gmAksMNako/bnKxasqmVDWMBlcz8TP*)
(*vBoPa2ZC02bg1FJNGlj1s1sJrxakFn/mVbKMBwE7gslwLaAz/TwxVln4bA8n*)
(*1lZHsmsWGutI3Ha6YrvZCvsdNjjutEdxUInddhfUDirO1tTx5yczfDl2he/m*)
(*evli8gwvx07xbOgC/mYmnC5r4WhmO06rXKgOamKwYpSQTWppV5Fky7kps87i*)
(*WHgLDeGHKIxsQJfcgXdAEYqoZj6zTiNcew5N4hlionvITDjL2Rbxl5mfeD78*)
(*G85Vi+tkXOVw/HWqYoaEK6NkJw+SmnmXwye+xthGz/vrUlm9Q3gVeoX6Q5/j*)
(*LudUl3CeuqwxCiIvcr5hlC9G/8bZ6gccShc/SX5gYFZl0gMDr6pSH1OulUp5*)
(*Rm7ULNlRQ+TGXaO9aoSj9f3UZzVxrKabQ4VNtFR0UZBWQ2PpaS50zHCmYYHS*)
(*8CuGe3O9+X2MYcP36A33QdXcpCVrQXLufcM1s6XfyygJvvvm3jahd6hYYpry*)
(*kuS5U8Kds5SGCg+k8kOukqO6RrZKsm/wADkht8lUDAgXpwx8yvSeo0DxBH3o*)
(*M/KV05JlF0n0PY/Rx3GseNefVctD2LIxlS1bctiwKovN7+jwNz5Fmvcw2oBB*)
(*MiImiZXMai+Zcc2KKow29KB0e0Sc7xfUpfyFgqBZCgP7eXLuT5zW3aU7ZZxU*)
(*95NkJwygy7iD0r+TkIATBLmcINz7KhF+N8mKmDbcV0xjXEf8Fh3ha4OI2uNP*)
(*uIkjBV7BJFu7477+AK5bXMS5MvE6kE6cqoPmmll06b3k5l2jsmaQzKxzlBRd*)
(*JTX5KKV5V9BGHaa5+DQRzpFUROfSGKWj2DVCXCGPowHNNNo1Gn7Xbun37dqd*)
(*Guh2r+aSfy19/tX0Ln1n27bY8Hn9TVc9d9wrGPas4J441j3pC8PCpkGHdHmc*)
(*yYhbBkM/1z2T/+bUf7MqlGmzMGaEWffNxK+k/z+Qemii4YlpFC/NhVlWiXxu*)
(*ryNV8l77JhX1a1zJfHcn2nc2CD/l+XRxDGUZ1+x0XLcWtxEHnJbtWnArZU78*)
(*aNZey4JTOvOS62Yd37BqxqnYUFPOpW+Y5VJmyIYj4lzDUneFtXecsrjlnG6o*)
(*Xs90alyjaYsppj6sgMbwMnKdU4g1VlJsk0izLHPRv4Dr3vI6b9lvzwxGhVfj*)
(*PrmM+xeJPxW9YVFgwf84NbBKUfSGU0HFhul4kOTD4CrGgmsYV9UyHtLAeHiT*)
(*sEoyYWSroZZYNRnVZnCrWZnOS92PbRNetTEp5z3oE288NytxXR9EguT0CAsd*)
(*MbY5xNpl47DRmwy/HGJcY2jKaUSfVE6CXwL2Rk74mQehshVvsnflye0+fnww*)
(*yH++GuU/Xg3yt2/G+f3De4Tb27D13ZVYrNhPsLEa51WeZMgYU+lbKTlETbV4*)
(*5ilh1ImoWmpUhdQn1fBo5AVXzo/Q3z/HrcEX3Lj5jFsDnzMx/B3TQ9/xdOZP*)
(*fPv4b4zdesLJpgHaM/pojL1ORdQwxbFj5KeNo9MN0332d3ire1BE3sQ3uE8Y*)
(*NklKknhKZj+DF39HSWw/hzIGuHZkih8fwbmG+9SljVIRP0V18iOqhVFlkgX1*)
(*2ieUaZ9RlPCM7NgFqXH8nZowWh/MltVOhLjGo0+ro7vhHJlx5bhah1GU0cVn*)
(*a/1R2JZRGTNAQ9y4uNI9Q5arkEypjxgWzghnc+dp0M3KcR2lVLZfHynrjxxH*)
(*H750b2fxrIirlIWdFhYLsyK7yQ47Ipn3MlXpw+TGSPb1u0SO5jZpiusUhU+T*)
(*rZwk3XuCdF/hg+YR2YoR2Z9JgmybMdmYyH6jNFQ+bTjbVgm3W9ixQYeP1VHJ*)
(*cJ24mXcT4tdPdOQQAcH9mNt2smNPszhNLcs/rGH5ezXEBD2lJPE59WmzPB34*)
(*O03JwvuiB0TZtVCQfoOaelmvfoJTp36gp/sbygvmSEkYJyXinjC2jxDx3Ogt*)
(*WjRrgoQrCWTYe3MkLppEczP69fX47jiI0Xs7iPHIxNsyARvp8+HSh4MC87Cz*)
(*jcRc2ly4KgcnmzCCvFI5VCacDSsSTz5CfXIJV6uPUuwZS6FdAvVu1ZzVXDLc*)
(*Q7Iz8BxNXs20+dTRJrnvuE8ZPe56+v0buepYarjWc1e4NSxsuCdZ8J5LrjhK*)
(*JoOOWkY9MsQxUiUTpTLknWLIZEucmjBkQGGVWYiwSm2oWbNQFs01b2rpsdQj*)
(*4dhTcZgX1jEsOms5sjuMG2E1xH+4H4+3PqLGxJvB6BJOOETSL9n4hrfkOHG7*)
(*2+KAw8KiCRdhklsB867ZkgUzmZNsOudcZKhZ5xJDTcuyU8KqScmO4zJ/1KWA*)
(*ERfJcK65DLrquCtedkfWfdVL/MBWTaqNUs6FO7FmKjn24URu86fUOpE66ziu*)
(*BBRw00cn+5rOuNSUTybTftlM+uUzucQhxb+q6H+cTgYVvGGVTKeUwi+pcVUF*)
(*o+pqxuQYjIXXM645xHiEZMLIZsajWwysmopuZVrYNRfdxkJMq7CqhUexwrLk*)
(*TuGVLxrxnKDd8eQHNErmaEG1T4vTemHYNgXO231oKzhCvkYyW4iMe95xRLjH*)
(*clR/Wv7OoCgykf949pi/PJ/h0eAZZm908PV8H68mromHHUB5wBXjZTs4ktnN*)
(*5fLraG3TKPIuIM8tjcOhZXRqymgM0tEcW0xuUALnWk5w58otrp7vo6ujh9M9*)
(*l+lqP8OVC3cZuD5L/7UZOo9Lhi1ppaz0FHUZ4k3xt6iMm6QwZsLAq8KCaUqr*)
(*F0kvmMBPuKDNXCBYeVHG/WO0VkzQf/QV52ufUJVwkYnex/zHV3C9+wmNuhHK*)
(*E0YlxyzlwEeUJi5QlvKYkmThVfJLStJeUZn3klD/HtZ+7MfurYE4SPtd9c4O*)
(*dHG1qP1z+ODdPcTLOTDfEYOtUabBo2piJg33L9WHjKEXv1q6n03G0j20i+ao*)
(*yx+T971NQewd8b1hCkIHKVDdpiZukO7cMV7e+jM/zP2d3z76B98/es2Tyf/i*)
(*zJEX5GrvohUWp4XfIMFfPCxSOKUcplAzT7riHqWSM3WqO6TKelz2FmG6OQH3*)
(*gwUESA4y+ywJ6/35bF0fKxkxjl2bsrAwqSM2egR1xC0Cwnv5zKqGjftKMbHr*)
(*ZoNRC+s3HCE+/HPyk19QmTnH03v/pC2/l0uV9/EzLaC+5jaNXWOkFV+hsO6O*)
(*PL5HUtYpYtJuEhl5mUqdOLCmixqPGspt0jmZWE6WrTN39fkci1Vzo6wMm48+*)
(*wXWjOa7i8wprDXlJ9cSLB+Rn1aMKTEQZEE1CRKb4XzJB7mHis930NF6mQltL*)
(*fmg6DfEF9JZ1U+qZSauqjQbfLg4FnKXOr4dil1paQ9uo9SmlXVlNk4fkwEDh*)
(*lXcNAx7V3PGslD6qZ9S3nMmAUmbFBeZVxYz6pEqlSBZK5J5/IpP/4pTUlOkb*)
(*Vs3sDzWwas5czaKVhvuWocwfCJFSsWARwgMZwx7bRjDploj3L9fhLO3F+/3P*)
(*UHy4C7/3NqE396PVKYIjks/GYxqZCmvint/SZ3153JHxfcatiIdeJSx6FDHv*)
(*slTFzItTLdWcSykzrsVMu4lnuQsbhG1jbnnC2VyGJc8tOeFdj1QG3bT0+Wg5*)
(*F1NCXXAmdapcmjV6qvzzJWOFUuOYyslAyYLipnf8dJL/0pmU5Wd905jzy2RW*)
(*kcO0Ik88KU9Y9D/XZFC+oaaUBf+uiWDxM7Wee2GVjIZXMaoRx4psZEw8eTy6*)
(*mbEYyYXCpynh00zMEq9ahFfNLMYe5kFcC1MpnXivckdlkoDjJwpC96dLLjki*)
(*Y3QtfrtiibBLp7PoNFpFJjZbbSRDSbuxD8V7fwBupgG4m3ihtvXkxeBdfvtg*)
(*gi+nr/HNQj9/fDks3DqJ+Ya17ProU3pKjpIrbE6wT6Un6yQNmmqSbSJoi9Nz*)
(*Oe8I0Wa+NEn7bc9vkIzVyfVLA4wOT3P9+iDXrt3l1Llr3BqaZ2jqOedvzaHv*)
(*7CWtpodT/U+ozLku4/0ItWkLFCROkZc+Sbl+kZiU65TWPCZQ3Y8i+Cq11Z+T*)
(*FHGB4rTL3O75gv7mzzmSf0vY+iN/+fYfzN78Na3F96iW1+tTZqhMnacgbpqC*)
(*hKX3fUKF7tfU5P+GmuKv0agusGFdCEq/CuoLe1G751OccRytHFulbxmxYW14*)
(*i1sF2jaiC+o3XBM33JNUPU5FxBgNyVMk+Z7kcNEUusRzaKNPkhF1lcLYEYrl*)
(*+YKla/PCqxOFY/BH+PuXr/nuwff88w/A3+Dapa+JizxLUnQ/RemjpIddJy10*)
(*AK3qlmTiWRlHBg2/tZgdITkx9gZq10bcLHJJDu/C0TwNeylfaesRylZCAw5j*)
(*f6CY/bvKSEkcJSLuLhFJt/AM6SY46RKmsg9WDj2EBAv/kr4nTzyzQnLzs7Gf*)
(*OFJ8laEj3xNgqScr7wJh6e2EZB6nomeGw5dnUaQ1o9ZdIzy5j8zE02ik/3ks*)
(*90b5kQfdESXU+IQyXFZM5oG9zDW347RiAwdXGOO72wujD034bLWFOKwZ+42d*)
(*xAX388mKLax6fx1Kj1Ai/aKJDUgmM6JYjrOaY+XtlAvLaiLy0Dkn0aLppEHV*)
(*Q7rdIdzXxrL/fS8UxlGEiN+k2CaTL1mpwbeCLsmA57wr6Q2s5aayhluSVwYC*)
(*irjhlck14ctoQDpjAVrJOcKqgHimJA8aOCWONSN+Mrs/xFBLrJozV7FoE86C*)
(*jbDLSpaxUjJtHcysrSzjEMqgZzzu723Bd5Mdbh/vI2y7HV3iAY8PX2I8r53j*)
(*Xsl0HIjgovSTu+6FTHiWMSe16FnKfecCZiTzLLiWsCAuZZhKzUvNuhcxIzUt*)
(*PJvwyGPMI5sxT50hzw15pXHXK4VBryTxN/GrpWvRW+2I3ONDhLE/aVZRZFvG*)
(*UGwRRaFxINeENXcDMhnz0zLjm8y8TBf807kfqGNOkc1UUA6Tyrz/45oKzjfU*)
(*tEp4FVLIqDjKcISekchqRqJquBddz0jMIe7FNhlqPLZF6jDTsc3MynQhXlgl*)
(*9VBqStuB98eudKSf42TRDVLd9ISYZpIsWd7XOAbHzYF47A7C2yyQ/MhCQp3D*)
(*KI4vI0mZgdVWZ6y22KJTxvPV6CR/eLwguWqM3z8f5nfPhhjvO4GH6W6sN+3C*)
(*dNVuMoXRUTaxlKlKaJVxM9kulK60GloTKsmV49Mi5ytb+NXRcpXR6W9ZePkX*)
(*OiQXXhx6zPHr81yd/JKzY5/TOficisszZB4b4uz476nVj9KYN0VD/lMK0ubI*)
(*1U1RWfOEmNRr6EqmhVdXKS57TlBAD7YWRVTl93OmaZau0nFaC67z/dPf88Xi*)
(*Nzwa/S3NJbepzhQ3SRLPSp4kL2aU4qR5Qw4sSf8Sfc53FOmeyTh/jtVrQoiN*)
(*6uKw/h4Z0ccoz+2lu22OSBnDw4UDCrcmdn+Sari+VBO3SEX4nOS7WcrDJRfG*)
(*j4p7NlKQ1Ic6oAaFj56ogKPkRw9RETcnGVAcT1jTmn7NcN1+7to4Jdosug93*)
(*8tuv/4uZ8T9SXz/Dye7fcvvSP+iq/YIY2aZo/3NE+Z2Xx+cJcZMxIuEmSaGn*)
(*cBFWeUvWz03qwc1aWOWgw9MmA7V3CSnqRhxNUrHascSzAdITR0hOvkWo5M+I*)
(*+BM4OVdjblpDmJ+wzGuSyqRXHC16wedDf6Ux7Rzn9V8S7noKXeEwAamncUk8*)
(*QViFOFXNVeKbBnFMuIIqbRBfvw489ubhtzaJyE8TKLDTod7gQIapPep121Bv*)
(*NEWxyYaacD2RNol4mWhIV9dSrjtKgFsS4UFZaILSZTtSSIsspjCxlmRVHhEy*)
(*/keK8xfH5hDrokS514U830yq1c3UC9PPFs+SHdBFa841xs6+YPHaF1xuvCFe*)
(*eI3O1OPUBNXQrKqnM6yBU9GNXIhu4Kr0pRvh5dxWFzCkFNcISmUqIIlp/wQD*)
(*p6ZNgw2s+hevljhlKAvhlV248CmUKVsV45K7Ru2DGHMKZsw1hOv+sZi9vZp4*)
(*Zw1JTuHEWQZS4BJOi/DwXGg+nY4xXBQPuil5eNSrgDk5PwviTAtOeTxwLOCJ*)
(*sGnRueS/WSXeZWCVcGraU3zGK49xz1xGvZeukwurJMMO+qZw2zeRWz4JXA1I*)
(*IXu/Fw1q4VHTVdqiK8hzSqbIPpFKu3hKTYKEV9kMCp8m/JLEqxJYEK9clO1b*)
(*DExnQY7FlDJLOLRUOf/jdCpY+Baca5hOy7maCMljRFPCUKRk76gKhqJrGIqp*)
(*Yzi2nuH4RkYShFnxTYxJTUhNy99zicKspCYWkw4xmdqO9kCs5L9YoqwzSZFj*)
(*kCh5Pl5ys9dODVGO6VQkNuC+xxuHnc6UJJbSXNBOuEcs3hbBpMjY42fqyN1j*)
(*p/ji3iB/fDbF376ZEWaN8HD4CtmRarZ/8DE2Gw9wtbGXTMnFCY6x6LwSCDXz*)
(*INYmkBgZhwL2BhBoGUVKVB0//Cj98yUMPXnN3RfQeuMV+tOz1F5+SM2Vh5xZ*)
(*+DPXJL81DH3HidE/caj5Po1l8zRWfEFB9iLZedNUNDwhs3jEkEX8Qi4RmzxC*)
(*VvYo2dL/qwr7uXr8Icdrp2gu7uPFwlcM3RhjbuQ7qiXf6DMlmyUOUJIyTH7c*)
(*EPV5T8mMmiAz9gF52pcUZD4nVliye1cm5eUjJGl6qMi+bfCU+MjjrF4VgJNN*)
(*OdvWxrN3vY7y+Bk6dF/RlPCU+thFStRDFIbfwnZbrvhBOyrJHx722fjZ1ZAc*)
(*eIni8KV7x9+jKvKW8KqPvsP9DJ68QnNpMVUFBZzt7qWy5DQ56b0M3XzNP5Z4*)
(*dvc1IV6dKFzbsTYpwdepCVvTItleyWCFQ9iZ6/ByzCM8oBJPWy3eNsl4WMXj*)
(*YREtTtckPnaIRP9jaNxPEKfqpVH/kPNnXnG8e5Gz4qIt1U+5c/Y1Tbrf0Zb+*)
(*LY2Jk3x792/c637GWM8/ZduP4R95jorzX3Hq4Wuq7nyPokby/P3XdM6/5uLi*)
(*ayKSb7B/WzpuqxOJM8qgxLWUAsdk8qyCOBYpTmQVisfHtnhtChReZaO00hEg*)
(*x8XHPpNtn7hiYuTP27/4FOMNzjiahRDoqGXrCiuyYio403KRxtxKqpNy0Ufq*)
(*iDwYSo6PeFPpKL+dek19+k06Su/QVCQZvPis7KeWurRO6rRdmK10Zu9yG3a/*)
(*Z4bpsn24rTxI7E5vKu2jOCY+ciM0l0GV8EOZJllIy31zcSdTJTMmCubNgiX/*)
(*hfHIRsMD2zde9dxLnOyggod+8bwMz+SxOpVXifn8taqVr2uO4LXelFNVxyXD*)
(*xFMWlEFruPThoi7OKLNpk+x4NzCLQY80Zr2yGLNJ4pFrNk/FBb+VMe2JYz4P*)
(*nItYdC/hc2U9c67iLC7ZPFj6roBPLrPKQl4mNPA4vorTlkpuByYzFJIhmTea*)
(*Sx4RXAhKRO+qpjYkjcawPDKErTWS80qcZL5NNIfsIxkIyeGeMl2yn7iV8Pm+*)
(*ZOClWhBezwaksiCvG5dxY1G8dkK8ZYlNc2G5Bg+dDskSLuUYpjMhsj2hOcyq*)
(*8wzPz0uun9IUMCl+MqGt44qwT7vanOHker5t7Gcq6wj3C09wP/84/+h7wldV*)
(*lxiJrWEysY7ppFqm46t5VHqK2fYRzpReIV0YPdA8xY1DU5SEHcZ3VySK/ZFk*)
(*KHMlC9ph/qm5ZIws0kLSUViHYP+ZJ37mCvzNXDlT3cCzOzfFryaYHzjJl7P9*)
(*9B6tI9TVHpNVG7Bcvw8PI1csP7Ygxz+D/EAtfp/ZsHfZOooD0qgRL/Q3j6Ug*)
(*4xwhESeoOf4dofmj2MZcILhkiPUuJWz3LsbIt5Dj4/+L+T/DVeFZ38Jrrg78*)
(*iY6Ozykre0RIWB/a7HtYu9fjGNDEXrsS9js2sdOkFEfXJjSabvJzztB37inN*)
(*+kHOd80yOrTA5Qs3eDz/J47UD1EsjChJHaA07Tb54ie5cXfIT5qkMOUJecnP*)
(*JBMtkpMxR3XVQxJiL7J5dTg+DuIfik7Jh23s+UyLu2Mde7dlYbw2g7K4WaqE*)
(*dUu8akp8TJ5iABejUrrKHzPZ/zfmBv/M6LUfGe/9iastfyR76Td2lIOG78Ee*)
(*Tr5IWWQZx/VN9DTUc+nYMWHHEcmkJw058psn8Kdv4JsHcLL1C0J820iPv4y+*)
(*aJR83U0aa2cM/mlhkoyrbRbudpkkhtUS4KQl1EPOo10cnvuCZTzSYLdVyztv*)
(*2RLq0kV3wwvu9v3ApZMPOH/sofD9e0bOvKYt89ccyfhavGSO3wz9k9Gjj3kx*)
(*+JoAjy68Y3q4JOPL3f+Egb9CzKlx7v4Eg/+Qc/U1FDQ9YOv6aNy3xlLuX020*)
(*qYbDkRWkmQeTsMuPEnfxp91R2H4cgE7RTKrqCGvfd+OzTcE4WGuxMotir5GC*)
(*NR9as3uLL6Zbg1mzzJzD5SeoL2jkfEs3zbllBO13Nnw/uTHhCAXKdtS25Ziu*)
(*DWPjcifUXtmsXbYHi+1uHNjijrtJGEYrHCQnBOC2KxSLNU7SJvdi8f4udv/i*)
(*Yza99St6pE9eEV71ynvOxpWyKEyZ369kQbZ76brUEqsWrNTMWAYzaRXM0IEA*)
(*RuyU3LUPZtAtjMUoHXeDYripiOBeVjlbfrVcjrcLTpsOEmLsTrl7PLczD/Nt*)
(*/SW+LT3O32vO8l1iNc8lc7yQLPfQLoFH1om8Eif+SlzrmddSPizhuaKSeS/J*)
(*Wh7iL345zATl8312O3+tP8e48KF8owWhb6/E8613hA8l/Nep63zVdga9p5p8*)
(*73DJxAo6EvSkWKlINg0kz1xJjTy+ZeBVmvAqUXgVx33JwIYSZs0Jr5eYPR6U*)
(*xpgiVXiUzZC428PoIoaXfCxsiVU6ZtRZhlp6fmneUs2Hy3ZKVr8VJly2C6FV*)
(*MnLNfn/0pr6MZ7Xyz3tf8s+53/DPoS95/eCP/HR+mvm8DkYSq5jObOBBXiuL*)
(*+pM8lXY10jXC7MlF+utvM3f6CTeaRog4mEiss5aSyFKud17nTs8Al1ovkOSf*)
(*RLBdGF6mCsrlvYLM3VEfdOD57QFejd5g/MoRFm73cLWrlsKYMEpiU7DeYMbG*)
(*tz/FabMjkcK6pmTJfRkV7Fu2hmYZW0dbbpIZUEpHzTg+/kew9Oxkt8cxTJVn*)
(*UBVPYRl2DEvVIRwjmjjS9wVPfwfdfa840fslfbf+QEf356ToRijQPyK7dIpf*)
(*LnPjnRVefLAuhF+848mHa2LYJ1kwPKKL8opevpU+fvWc+EPHBA8Wv6Wiqp2B*)
(*a0+5dvELKvJvkRV3Ab3uBokh3eiiL1MkflasfUCRVlwrdoYo9QB7jPPZY5SJ*)
(*n7Nsl3kprjZ6HMSrfL1aUCuOC6+y2b4yVfZf/Cr7GwoUo5wu+LW4pDjvyX8S*)
(*7nhY8nUdQfYFUkXC/gq0vpdQmXUZrnHVxtymJV2cPaeTM4e6Gbncy3Cv+FJu*)
(*I34OiShdq9D4dGBplI7lZ+l0Nz1hYfw19+7+F+0t96msGOF4z0t6ej7H3aWY*)
(*9ORTVBT2YrVbzd4NwoE1tpRrDxFsG4W/ZTzOxhl8+EtPUkN7aamYp6KglxMd*)
(*o/i7ZJGo7pA+XcDh9Bd06V4Zvk822/MNx/Jv8vnYaxztGgnPvc0J8aj+P0LP*)
(*N39nX9oROl+85vSvofdbSNbPiXfW42eSgcsaH6zEaVzX2qFY70zIJg+8V7vh*)
(*uT4I980RhNmXEOZeywfv2FCYdRFf7yK2bPFhv1kYZntD2L8nlN1bg9iw0gZn*)
(*S3+yYjPRqsIpjUuiLknHjcPnKQgqJyugHrstsbjsTsbWOBxdbAMp4UWcbL5q*)
(*+Fxxg/jUntWu7PhQxuNPPOhrHeZU6VkOfGSG0sidMCMXFGtMKbDw45BjGJfU*)
(*Ou5Ln56VcXpB+PTUMYLH4ihTZgGMmgYwfjCYYWslj1Vp3PXQULhiC7U7DtCw*)
(*z5Y2e0/qXQMxEoZsXbYBkw92YP2+EQErzDivLuKPh/v4r0MX+VP2IV4qhQsH*)
(*/fnSO5ZXLjH8Xnj0tWMqD62S+CJQz0OfYu775LPgm8esX574WLIh931b0Mo/*)
(*TtzgmEMQOZtMmcyqoNMzhDp7H4rMHNGZ2pJl78X54mqaE3K5VNZGkrUCnY2K*)
(*CqdIGuzDuCWcuResFV5JFgyMFVbFShZMkEwoPBLnWrqOd1e2a1q8bUQYNqVK*)
(*/3fNhi6xKtNQS4/nwrIMNR+ezYJGWCZ9fSKplIp97jwsO8I3rRdpcFDRF1fC*)
(*+YgCTgRnMpzdwkRRB/OV3Qyk6Lkpy88UHxZWtXMrp9awvVGyvX+Z+QNe2yTb*)
(*xh0iX1FChE0MMc5xMtal4SnjQYitH2p7BR57XQl1DEchOc52ix1RMs/P2IzH*)
(*1/v5w4MJYVsFt07Wcbm1Eo2zrbQ9d/au2MbuD4xw3uJg4JWvsSMOnxqz+Rfv*)
(*oFhnTFd0AQky1hfGdGImfW+XmR4731MkFN+n5tgPaMuGcPApY/f+COxkuWr9*)
(*BSLU4h2dY1y6+gVtJ56SWzJBfeuXaPNusWqrhvdWe/OJcQwfrNawelMSJua5*)
(*pGaeJyevh6npP3Gie4Hrwr7bQ8/pOTPCy89hYvgvJEUepTTzKhH+tVRl95IV*)
(*ferNb1gkjVOle0ZZpjhWwiTL31NjvDWdpPCLhPp1ofLvQCF+pRDeBni1s3lN*)
(*Age2llCX/thw/epM4W8M19vV5m20ZS3IuF+PxqWeALM8FAdK8DQuRWNzDOX+*)
(*I2T6ieNF9Bvuk3qito9vF3/gP779X/zt13/lxukxnEwiMN8YJf1Mjf2ubPzt*)
(*q4gO7kDlV0d+1mV0unNExXbScfQhLR2LREYdJTK8na6WGSJkXN67yZPs2Fpa*)
(*SnvY86m9MLlJ+u9xPl2uwtOunvbGB5zqvk+pZKf1a8U5doRTXziLyr5L3LCC*)
(*ZW9ZYSRjgp9pJiPnXhMr+TZcN861V+J5z15zTsaDd8yysdUNEtr+mNCaBbaa*)
(*t7N9fSn269OxXu5HmGkamS55hvwVZ6KUnOiE4ydemK/ywsc8ndTIDt592xQn*)
(*xzRs7RPYssOdTVucWL1a1r3Dg22b3Xjv7U1y7KM43dZNZ1U53foS2nS5dOfV*)
(*obHQUKxqxGlrFMYrvNm7xl32uZrs6BJi/VIwWXOA9e8YsWuZBbarPVn/ix34*)
(*GSmx+diG/R/spb/mHLcbLuK32QK1kS2B6/YRK+120TqYaXN/5g4EivuIP9mo*)
(*mTDzZ9wiiDnp8xNukQx5RHLbJ5qod1aQs2Gv5Cxv+uIzSNxlRaJTEPGuGmKE*)
(*baGSObzf383ZgCwueyTSbezCeSMbxiw9eO6u4Nf+Gl7YBfGDRzw/eqfzjWTE*)
(*F36FPPQvNLBqUVnAg/AS7gVoJUcm8zy3lpelTTwslnPoqaQrSEO9ZxAXkrK4*)
(*kllAbYAahZExx3MKqIxIJMbGkxTpv1orcVpzH+FaCANhck5VyUwp45kPXGJV*)
(*nIFX9+X9l3g1FZzMWFAC0+o0xpWJhulUSIphOq3WMhuWIZXGnGThufB05jU6*)
(*FiIyuR+ZzWy0+FhcHtUWnmTtsKTFTU3aNivKrPw4Jyw7qcnmeJiOCwlFjJe3*)
(*cUVbzGB+LcNFtVxOyKHGS01deCpt2nJef/E3srwTKQnOpSurg+KQPPJVWXL+*)
(*67DdZEaAuQtKKw/a8w+TqcogxS9dfCCFcFl3Q3w6cU6OPLt1hd8u3GLgeBVF*)
(*Uf4k+rpj+ckWtrz7MWf0J8gOyEDrHkeKSzipbioZX7cRstEInbUXFapcOvMu*)
(*4GdTgrNNLRs3abG2l/HRoZTUlBOU5BwX76nEXhza29Qfow92UZHeytWrz9DE*)
(*d1Df/JDQyDMEhnWwbnsYyz/xZuWnCj7ZEs9GyTqeXo0c63kizjHN5NTvOXpk*)
(*hv6+L7nULzw51M/E9F+5ef1H0hN6OFI3yqWjs3RU3ZAcNkqnfpyypEEqtHOU*)
(*aR8armd9+G4YOz9NxcGsjPjQs/i4NaIO6sRyfz4u9nV88lEEZlvyqU2+T33C*)
(*InVRCzTGzBFvf4wwyyYchXUWa6MJsahEaVaJ3+5aHDaW4revFYedehIVp6nK*)
(*GaCr4Q7jt17Sd2qYmdvPOVR0FuddsVhtjMd7Xwk229NxNcslI+YUl0+9pKHu*)
(*LrkFF6g6NMSl699zsf9HlKEdBAW1CMv6iJI+7GgaiYf050i/LEK9MshLOYrx*)
(*+nC2rNGI03iy8ZMwycivSEluZetmHzas8eajd9157xeOfPCWi/iBEmNhjoex*)
(*rPuzUmH2TSIzRoiunEJZfhWnjFO8b1rEWudWPjhYxnu7ctlgdAjzbY34GhVg*)
(*/5GCve/ZY7bsAHGmwWh2euKwwpKg3aGorbQUxknmLbjCL3+xmXffNebtdzbz*)
(*q7fXsXrdfpa9v4Vf/eoTfvXLtfzyreUEugUS4edPbrSaWm0sTdoUurN/vp9R*)
(*cA1B+5LYL2OXxTpXbLe5EmgVJO0yDuv1B3HZ7IzHOne81nkRtNWfGHMNLuvs*)
(*MFm2g0grBTVR+fQUHCLVXY2VjLl+Rge5bxPEpPTtCVMvZiwCmZP3m5KaETdZ*)
(*8Ipj2FlDr20wt4KSiVi2lqxt5sSs30WnKk7cxherVTvkfHuTKm6WZBJAwkZX*)
(*+lRFXHSI4KqlH4OWriw4efBNgIJvfPz5jX8oX7uo+K1vAr9T5rDokspLGauf*)
(*qUtZUGUbriXdCUhgNDKDJwU1XAqN40qclhp3H/JsndBa2pLv4cuprAJpgzGc*)
(*yMuhMSkRnV+QtEN7DsXmUOwTSbyxPc2eEdzUiDepUwy8WlBIHjSwSvxKkcK8*)
(*MoVZtXheTDYj4l2P43IZ8os2ZN5RRbxwK9nAqLnwNOFUhlT6z6zKlGXEtWKy*)
(*uCHPZW8352xIIidkHSfkNZcSC9A7Sh6V43wyNo+euByalLH4fbyF+F0WBkb4*)
(*rV6P9bLleG7YSpqrHw/PDaA2dSVIGG+9ai+5/snClyQ8jKwoDteSERCByaot*)
(*9B4+S3O2+L+dhmxFOpoDHtw53IXO25Mfxm8xf6mDqQutTF8+Ku0nnlRfFVvf*)
(*+Zj8YB1JzrEUBmfhseWgrEPOm7E5uc6SBdZtIXivCxUxDZIzk/Ewz8HdMo9Q*)
(*Tz1x/kVki7sneUUSZedHspy7XL8YHNaYSX+R8SG2StryZ5SWD1JYNEhbxwPM*)
(*DiRy0CaVPSYJbNoUg9H2VDzcaigvvc6pnhleiQdcOPWIvJwLFFf20XZsnvau*)
(*B5SW3GF2/B+01txh+vaXDF66z/zA11wXT6lNu02Vdpya9AfkSl7bv6VYKg/L*)
(*ndlkJVzFw0GPn2cDtlbF+HseZvfmdD5+J4RizQini74zfPeqK/UxYWZNxNi2*)
(*4Ls3H7OVkdJ/S3HbUo71mjzM1+bhb9WBzR49MWHnqdKP0nPiEZkZ3WRq26kr*)
(*u0KYVxk+S5/37S3Aal2SOG4adp+lYWUcx4Wep7S1jlBScYV8fS95+huU10/i*)
(*4deE0c4ktNqLWOxNwGybSpilFlebJyOqSVilYP+OeLavi+TD9zwx26MVf21G*)
(*KdnD0iyazcJ+a5m3Z50Gb8m+NjKW7PpQibvwyvgDBedbX5Fdcpecw2M4RtUT*)
(*U3mNT63yWW9dwfvGOt5dl8DmLYUYf5yC3cpwnFa4y7kPJMo8kCyHcNTiTRbL*)
(*dhv+h9X2Uy88TaOJVpSKL+biZB+FuYU/u/c6EyDjerSM07q0KnTaWqJlTC/K*)
(*zKO7sYq7Zzq42FDK2fJ8nvfeoF9/CtVnwQTtisR7ewipnllYf2qF7x5X6uNL*)
(*pJ27kyntMd812ZBJVdvcSLEJJV68x+Kj7ex6by25iliGj12hIbkQpYzXWu9w*)
(*FmwDmbH0ZdzMg7H93sxYB3Ff8sask4YRmV63FUfxjuOMSygqeY8230iyD7iT*)
(*ZuFGyE4LamJzUZi6Y75sG0ZvfUixSTD34mqY0RQw4RXOqxANL329+S7Qk9+p*)
(*/PmvhEQWD9gzb+LCb5TpLHqk8FVUJS8jSiRzxtK9142u/W5cU8VwOz6NS1EJ*)
(*lNg6MFIt7d0vAI2pOS2pGXRmF9CUlsrRwixS/dzJV4dQk5BCpSaZ2jAtMcY2*)
(*5Jq6cCMinaElXqkSmFMKr4ISpZK5r0gVXqVK1ltyqTc1rkwwMGkkIMbAqH/9*)
(*/YZTGYZ6wyodD6KFV3HZ9KuTyPnMkgZHf2qWcqqlGxkmdpxPKaRFlUi9IoaL*)
(*WeVcLayiOiiM3sIySrz9SRHuOqxYSYKtDW0pWmxXfoLTJ9sp8I+iOamEoqAk*)
(*8aZ8tJJ/oxy8OVfZzNjpPvLEFbU+8dQl1ZEuPqY0tuNCSRWlKgXTJ9t4ePUo*)
(*30/18vnQJRpS4zFduY4UTw3hlkoZW/YLa1KpDJM25xFGrLUrGT7esg5vgsxd*)
(*qdM2oLCIl7HQn3B7HZ+9b8beZVtIc1JSHRJBtqsnNaooatWJcoyzJTelEBWk*)
(*Y+d2LzSqJm71/YGqkhviNxk42qRgb5WGq60e2/3FuNgUEx3aRFXpOeYnf8/l*)
(*009I0/aQV36dXP1tzl35HS2tD7l87ivmRn7P1MBzhi5NMXpxhivCgNqUXg5l*)
(*TNCW+5yq5EWCrLsJcTmO5Y5MEsJ6pO8cReF7CLWyDW+XOjxt6jD5JJ0G7QLH*)
(*cj/nUvEPHIqcJEJ4FWfXQpJHi/D+FIG76sVRT+C6tY4E36uovc/i591FbOJV*)
(*Wo5+LrwZJzy2i5Kym8RFHiE+pBOlQw32WzPZ9p6CnctD0LjXY2ucQEfjMMe6*)
(*J9HXXCU1/wytPQ853P0UpeYEK9eEkZt7l6bqCfK1p9H4FBDkmE58UB1FiWcx*)
(*2xzNh287s+Z9H6z2pHPu6Et0ST3s3BjEwb3R2AvnjFYEYP5JBBvf9sTi4xic*)
(*NqRwcGUI7UW36eicpeTQHS4M/ZYzd/5AQJQcG4/D7LSpx9qtS85Di7hjOart*)
(*ybgsd6TAJ4lsDw3Rn7kSusUZ87eNsF9hR5O4nj7+CDtWOrJhpRV7jDywsVbI*)
(*2OPMnt12bN64XxjqiaWJF2uXbyZJE0lJahT65BAuHyrgSEY8zTEJsh570mzj*)
(*yHDUEWYSSWtyE/kBqVIJNAjzXFbuRS/tp9w/RZYvIss9nLiDfqS6hhBt642P*)
(*sQVW4v/Jkqsy/eU5pwCy/DTM2QWw4KBgxsafSfGhB05hPBE+jdmoOLXdEfVb*)
(*73JJ5o0nlNHmpqFJ3EW7z5EE4V1VWArb3l0lHm1OoW8ydX4ZXIkU1ooLLkQV*)
(*CBOiGLN34NsQP/4Sr+SnzEj+HhtO77r1nFmxnj9G6HgSkMazsELJZhnccAyj*)
(*dac1beaO9IXGcFKh5kJ8Ilezs0m3taUrPQ2dv7+45Ho6iopRO9hK/9pNXqgf*)
(*pytLuVTfgD4igRNZpdQFRKO39eWmeNpwWDKTIQnMBv83rxaDxJlUadyWfnvX*)
(*N5xBORZ3vMOYDU8x/H0/Kp0JlWTIiFQWItMMtTRvMTqDBzGZhpqPz+ayMppw*)
(*2ZeTwbEc9lRR46qgyk1Ju6yzSZ3A2cwSLuZX0ibsjTK3pjxYTZyVDUe0aWS6*)
(*u3C2KBvlru3YCLvCzazw3LiL2IMeNIiT7V72McbvfUS6j5JIOzdinPzkcQSj*)
(*Pbe53txHmGT2rtQyvDcZ4b1lIz+M9PH6yyn+8Wqc38/fIVvpi7fxfjTSDpbu*)
(*s5zjk0GuTxpV4Xm0JpYQbG5HclAQel0WIR7CJN0h6bM52Gz0JMM7E7d1FnKe*)
(*nTiRpOVCegqHQ4JojYpDK/ysjy4izCYcP7tQbMyC2bjSA118D04WyXjapeNm*)
(*nUxiWAsOpjJGmxWh8T/MsaYpetqGWRj7kRvnX9LZOk+M9jwZxXdpaHtOfsEQ*)
(*LY2T/P5rZNkL9B+/xoXD5zlde8VwT/hDqUM0pki/1IxhuiqHVGUftrvyMNkW*)
(*j8KzlgDvOuKkn7qJa7lYlqF2aqcj+zEtkgk7Ehc5m/c5iTZHKA2+gMc2LWFW*)
(*dXhsribYpAeb9dWkqgfxc+/Gyb0FZew5qrqeEZx8FpWsW5s3gI1tKQFuh7AV*)
(*pzNZFYPLjlz0sf24GWdIJtTSe+Ypvb3PqG26QVaZZMK2CU72/oizz2HCIi/i*)
(*7tYkHlhOfHgrYd4FpITUSDZqpFBzWjJ2LkYfCv9Wqtn3aTTd1XPCsYvCXCW7*)
(*P/bjTO0Yu5aLC+/Usv8DFdYfRRO4PQ+31VH0N8zTWnebhpYhydbTxGuv8MnG*)
(*CPZb6DG36sLCrBP3ffW4iXOGb07Db6UXua5R5AgbzibW06osxvNDO1a9tRK3*)
(*DUEke5QJg/Mo151gn5EXxtscMTNxIypcR5BPHE6Sv7xsI2QfYqkrKGRxuJfR*)
(*883c6dJz+7Ce5+cvUK+UXOmaQtiOYAK3+Bv+tzfa3E+ykYZuGY/dlhvhtHy7*)
(*ON0mfHdb4LrDBK/d5uKt5igO2BDp5M6+FavZ99FqFLst5bUu5LmHMOocxrR3*)
(*FBPyPiOuYUz5SW4KSeeKjZLyj42p2WKKbs0WNB+sJnuXFbHbLUiS3JJo6UFl*)
(*eIYcw414fuZIkq2afPsIcow8ueSdzKywaNjNj+eKQP4YreKFrx1/jlPwU1oM*)
(*izZWHP9oJXOuAcyHphmuVfVL3rgh/nfBR81AtGS1sirOx8RzWHJk1C5jvD5d*)
(*h+2qlbhs2YLSwhInI2PyNKEEmu/hSmMF4z3dnCvX05ScTntSJo3+EQbfGYhI*)
(*M/BqXHg1J/x5IDnvUWAiDyUPLqhSOGnmyrA6juqdZixkFtB60IlFmQ4EaliI*)
(*EUZFaFlcqsjUNxWtlfyYymN5bjFOx62oFLSbdhuOTaaxFfXCvwrJTO2aVI4l*)
(*5dJbXMuRpHQy3Tw5sPxDnD/5BNP3l8l4k0ScrRX5/h6UKnzw2biJSNMDVKmj*)
(*qY9IItDIFJtVn0p+sSLZ1QvHT7cSYe0kmcyHUCsvmapQSBsKM3EkdJdks0/X*)
(*MHCohIGWXPobM7lcnYXV6uXYrN3E5rdXYrp8N9YrLcTfsigOyCDJJohgUzvM*)
(*N23CzsQEtwMOnG05z5WWPlQHgsVD/Mh1CUEp661wdaPl/yLpzYPautJ97VR1*)
(*VVelKlUpVyrlssuUh7Ix8ygQCAHGzAgBAoFACCEkIcQsEIhBzPMMZjZ4nifs*)
(*2PGUOI4zOHM6czrpJJ3u08Pt4fRw+tzznXvPd+7Xz/ei+8cuKCShrb3W+r3P*)
(*s/faS7KPl+pruNDswhKpZq7aizPTikXqmvpwFpZMD/WFI5yZeoAtv4t0hZny*)
(*3B7UQbW+8ztuywavbf2S88cf88Hbf+TG5R84ef5XlEku1A2+xcjc50xPfcBk*)
(*9wOchaNcmbvPWu9JLs/f5Nbya6x13eVMzwdstH/mW8/P/1krawNfsjb5JYrA*)
(*WjLiWn3n6Ic6b1NbeYbQvTVo4yZ9c63WPZ/4vvPw+tB39Oouy/Hewil5tn3u*)
(*qj5riwrVVVL2T1Cjv4nFdJWcwhWsrlt0z3xI3+pXOAef0DX/Ge6Bt9Dnr5AR*)
(*3UXSwQYyA5pR7bGiV/XgrTvPsclX2Lr9Lavn3qVl4CInb37Lpft/pNiyiU6/*)
(*SlP9LSLE6bKTOzHl9mPNH6TLvEZRTIv8Dw+hLxRy8Pk80iPc3Nz4gQn3HbIj*)
(*GjGo2kg9aMCW3C79x0ZJUAPF/q1UCuOlvGDg8eYXnF16xMvy3p9++k/aPfew*)
(*CG866+5gtz9BFT5LVcYxcvzM1IY6qQs1ULI/CkuYitowDWW7kjHtzcYaVCrZ*)
(*Uon9iJsW4yRd9Su4a2epLOugWFdDf8c0UwNrzA5u0N+6SI2xVWrcoLT5EI9O*)
(*L/HtQ2HnaxdZdDSQ8WIwGS/EYAkvpuWok4EiF5MyzqdMTRwXRykPUKM7EIMm*)
(*WEGSfxDGlHTM6TnESC4kHTwsLJgsfBUonzmNpvQ8XCm5zAv/3Df1cMfoYTml*)
(*hLGYbNr9k1gVB/xh4QJvdQ7yZncLH092cbaykNOWch4LK0yVOHl5dJ2lxkHJ*)
(*RB0zwl5b0/L8xSt8OnqC30xs8sv+cf7UNyAZ5eJ/lBv4j9Ya/h+3k7/bK/lB*)
(*p+VOUDDnoxRUvbCToz95lnldKS+5u7nW1MqW1PO5ojKaYhOoV8QLN5pwp2cL*)
(*m9goi1RgTU4WD3XhLixk2FrF5aEhbvYNcVFyYb3BxdPFdS7amrgmnPS28NK7*)
(*klcfOd18Ibzzpb6a74pr+N7YwBu55ZwXfnhT3teblCjO1se3V8/yr7e3uFFZ*)
(*Ja9r5OvaVr6vaeNXLd183eDm581uvmvxCKM5+c7VxXuePtrC47kobj8l3LxR*)
(*7mHNJJvZw4S+hglDFav1jZJDUpPCA2jOSmFCjmNrbhYmRbQ8Vs+IodT3+Xry*)
(*CmlLzebe6BQXxHmfrm1wa2SMiz3St1XJ3JqcpzWvhGn5LAvNXrpK7PQUV/HG*)
(*2gkGS/L44eWTfHl1kvfPSk7OuTnb20CMHF/VzhAyDqZTGFpCX3EvLWm1rFQP*)
(*++7Pt6ekUZ+fiyMnn03h0t89/ZpT3bOMGZuoE6dujk3hWmMbF2w1TOVoWSmt*)
(*pC5KTX+uCYcqTzJQhdY/C3NUBcMlI3hLeumWTHQZ+0iNlvFRNk9RcjddjlW8*)
(*DYvig1f54V/g9M2/MnX132k8+T8oG36f9vH3qLOcZ8X9Gu+t/oZz7scMG09R*)
(*r52gp3JDPOV1rgx8zbm2r7nc+x0xLzrQKAdJihtFJaykVzYz7ljDUTCOx3GV*)
(*5JBBUsMnmGx9ykrfRyx7n3Jt+ue052wyY7qGRZyrTrtAVeYlTClbMi4u0KS7*)
(*gdN8jfLyM9TV3WJ68VvWrv8bJZ5HJNVeJlO2ds9D7AUL6BTNRDwn42uXgVyl*)
(*B0POCMtLbzO5/ITlyz/Du712xJVPOXXrewqMMxhNyz5XDT5goTxvGotuntiD*)
(*RopUDrotEzQYRgjclUvAniL89xi4ee5X9DReQy/HThtZK87agU3twh7fRJ98*)
(*xrIgB1WKVorCanhp5SmPb3zOS5c+5IMP/if3H/+DlMI5lNkzKNSTpCaMUp7U*)
(*KUzl5VbbvIw1M8etlSxbKuhMyGVG62Q+v05YJJ9jlQP0GwcpS21i53OxPP9c*)
(*ODtfDCdBkSF+GEaY5NwLz+7l0L4kdvz0kNSmcpY8PQzZ67mzsE5BcBz5h+Io*)
(*Ckghc3cc7kwH2gPJtGlsUrMdDJsbZRN/dLQKe6g4cigSS4aOImGsRr2ZgOde*)
(*JFz6bFZguNTaII4Jz49UVDJltjJWZsITVMBkqhXrAQUelQZ7YCpe4bbhbBP9*)
(*aVnc6apmo/IoH86387CvFWtgJI1xGl5fOC/j5zTKPTG+9QLSA5PJ3hPJmLqA*)
(*TzvH+NX4NN+1t3MvQsnlPXs5fWAvJ/bu4lFkNJ+ID92QvFoJC8MZGIi3oABz*)
(*RJTsj9R0qeXlwaEU7jvEk7lFTkr+3OgZYFAYozw8mtLwSDbc7dyenpU620Rb*)
(*URF35Per7T2sWiQfyivp1xZyRxjoZG4pH7f08Z5w0VOni/er6n159StjHb+y*)
(*NvFucSUTIbJ/VTX05WuoTIrBpUvHlZbImmTh9wOjvoz73iEZJcz3bXMb30mW*)
(*fmR18LuWTn5e18pNUzXNQTGcM7eyIR49netkVFhz3dzJ3b5FjlnqWK1t4M7Y*)
(*EEOGAm5NDDBlM3FzYkhyq1JyZrumKagMi5b6YWPN4ZT9L8ChUHC9x0tVtIJj*)
(*DgcmyfbCoFAuSC7PNbQw4WwSvkrjweIpLEo1lYpQPj0/x+9eWefraxM8mHdz*)
(*uquW/JAIsgISJJeqhdEKcWW00K1tJW1HJNWKLM5ILhYEBVIWo+TVtVP845Nv*)
(*GRcOtSozcUQdoTEqGY/yKHnPvoBp1342TA7pAwoqDkvtjEjhpGuaBesQzXE2*)
(*bOFl9BS0UJlYTlFCBRq1lYzYetIindQbBjk+tcXo4FnuvfGvLF//B0PX/hvj*)
(*8r/gOvcXumc/pavxpjDQZ9wf/JKezJPM21/GazrFRMMWm93vSl36hove73hp*)
(*7LdkCl8UJY0RFuBhqOMN2vPHON5wkv6q48x2vEZ56mm0savMd3/ku19ofeR9*)
(*7q79SJ/2LPPl13CmDOAS5nHqbomLXcYYvUZe8Bil2jWyM6dxCZscP/F7Xv/8*)
(*n+S2PEDVeAP73EdExLhRHbKjllxR7Mgixd9GXdkq2owBXn3j37n66A+Mn3uf*)
(*zpVXaF+4J1x2n4GZh5irlhgbfMjSxNtE7Ldg1Ez6XC8tqIiRulnJqwF2Pqvk*)
(*sF8hitAanj76Ty6sfoFe7aFQUYcru5emVA+1qgZ6hc3KgyqpVjWL2zh558Z3*)
(*3Fh7zIev/ZoPP/g7Gxe+xNRyk5LG2zhcD2msuUpNVhd9eQ08Gphmy9XM7e4m*)
(*xgqyGNcYcEs/6FPnYzsYR096FZ68JprK+qm3T1Fhkj5Y6WGgc5yVyUVmpKbp*)
(*0kqoKJN9qepluW+Bc0MLvLZ5nQsDSxSHp/nWpsndn0j2XhWloVmUhAo7KbLJ*)
(*D0xgorqV3ooajOoU8qKUqPYFC1cVUaMtpVP+Hv2iHyHPvUDcrr3EvbiLbn2p*)
(*+LuVEy0tvHZsnsYADZa9asr3Sob+ZAe5wnHO6CzONfbQeTSNu4P1XPOUsmnT*)
(*8HjMS4W4YfQzO7jgGefayDraKA3Nhha6Kty0ZpVzpqyZjzon+aCzj1eNkuN+*)
(*/pzbH8BFyaPNwwFcD1VwR6Fi41AQZ1MzuNbcwsk2j9TqRC539zJrquK0MIxd*)
(*PssJydZR2d/u7DycMibnbNX06kuYq3Hy5uYmq+42HFmZvgzuysxnzd6IWzhh*)
(*we5kKC2fs8If9x3yOWtaeau1mw+aPHwlY/FXwlw/SP68L8+fkvF43uyUet7G*)
(*eLWFrZkRTrY0cs/VxjvynJ/Lcfi+wcsvmrv5hXjm18JWv5Rs/HP3ID96Bniz*)
(*SfpRgJIBae91cdo1QwNrZS5WjI1cbRvm3vAs98emeXlskkmzyXe+atxSRt5h*)
(*P2lXf9YamsR1wygPjZBsUkp/TGDRZkWzZ7fkQTjlYaHUJiVRKXkyYbWz2ell*)
(*1CaZWF1PTlAk3lIbp+RYD5uK+c+fPeKvb13lb29f4f3T01KPY4jZsYvYF0PJ*)
(*DdSSvj+H2qM11CSY0O2Lpy2tmLEKCxVKJUalitO9o/z+rU843jZCY4qOTcn5*)
(*NpUwVoQap38Exl37pAaruVjfxRcnZfwqMmlKKccYpqV4v4aKgCKWnZPUZ9dI*)
(*XlT7roFlxzdQmNJGo2GIh1c+YnLkPPef/JHLj/9Jy9qfKJr8AePEN4yufoep*)
(*cElywEb4T3JJ222nULzoyuy7rPTek+0Nbq/9ntsrf+fc4C9R7aolO9xLQeoK*)
(*2vhRUncWULC3kLxAOx7jWRQvtlEUtyFc9QVLvR9zfOgjXtn4PUN5F5kv28Il*)
(*mdSQt4ox9RTWrFsUhsxSk3EGo3YdS8V5qiousXLid9z78J/kNN2jWPhv5Pqf*)
(*aPc+wpQzSb6inuQDBlzl67gd56ndXvvgxCcsbV9HWH+TjuNPWHjpG5a2fo6p*)
(*YU1edwNNjpdG2wbKQDPBuwoYajiNMaEaS2qt+LQbpb9BPNZA0F4Tr9/+K8Ou*)
(*m9TmTWCIacQmXGVX1FIXWyefYQhrmJ2a+GaataO+NcROjoo3n3mXq+c/YXj6*)
(*MeEpfahyj5GqWUGvmaFRMm7RMshDr9QXXREXG6q52dnGiKYEV3Qaxw11Upe2*)
(*nTCNsoh8Hx9f2Hid3KwaWhuHGe0eY3FoCo+1kYLkfIpzHSRH5WHNlGzonsSZ*)
(*rpf6OEPyi+J24Rm0Zkq/itTgzXNKZqVRnZBHSVgSTdl6Rqx1jNc0Up2ZS35M*)
(*krhwKgZ1OpVHc0j1D5d8VlEYHUfWoUB0QeHSjxMpDgyiR6ej4IVo6iNzKPIL*)
(*plGVRmVIEnmSXSXCaTd7e3lpsEEcxV9yI5GL4nRVYUo0u4Lo1JQy5+gi6LlD*)
(*kpEJ5Mo+1qfoue8e54fZE3w+PMUjqzjErgOck3r8aoGee8I9W+oMFvYG0fuC*)
(*H1f1Js7WNtGQmk53vo7FGmm3qFjuDI2JR5Vzwd2BV7Jq+1pay5F0GpKS6dSK*)
(*t7hbcedqGaw0c0Fc0JWTxzsrJ/jm8k3sSSmMSOa9M7vGaVMtb3WP87h9gNc7*)
(*B3itqZ2PxO22zz+9a6vnntHKcHQKC8K0E4YKhkxmppw1rNc3sOVs5e0mL08r*)
(*XXzfOsw3rQN80dTFh7Vu/m1mhW/l99/1z3LX6mFYlc8Fs4snPbPcaR/kZGUD*)
(*G5YmbnYMs1rVLJ7ay7kWL4OSvUOGYoqCD7A13s2ZriY6xMUSnt/BlPhnaVAI*)
(*zakp5PjtEcYMJmnH877nT1aZ5TXBnPF6ma6tp6/SRm1uvrCH8Jhk5prkZ1dx*)
(*Afzrr/nPjx/xl7du8/WNc9ybm2fQ3EB+WDYl0QZyDmt9ayN7cmu42DHFdIXk*)
(*nqkSqzoJrfSLrcllPrn2iu8aTUmwmhN13fSm6rAcCMWwcx+NoUq8iTl0peRz*)
(*vWOCU03D9BU1YAjOkb5ThSupBo+mgeJoHZU59T6+ylTWYcz0ythc861VPN57*)
(*ikdv/okLD/8btfkW6to3MI/8nMHpzziw20BxYg9hzxeg8jOh2KPn3ORDTk2+*)
(*wnTv9loIbzDk+ZDlwV9gk5zy6C8wUPuYmtw1Plz/kmHNAL0Fc3gNZ9GFzRD7*)
(*Qqfv+uAxz/ssd7/PnblfijdcYLnstvRfySr19jWbK1izb2BLPIU+eppm6y30*)
(*ug0aG+9z4uLfWLrxH5gG3qH13G+Y2PoLTe775B8ZoKVskWrJiueeiUcRXo/J*)
(*usHw8vuMCtuMXP+GhpXXGb/5Lav3/4UK9xmsjRtYzHO+e3K06kbK0tqY91xg*)
(*1XOaScciHaYZ0sPtkmN6/J7TcPv0j/Q7L1IjnlmhFN454qEry0tvVg+T+glh*)
(*2Wqpb3WkHzSxdexdXjn9EbM9FxnpvcLE9BM0xnWSNEscTV+gQrdCf/k8dQoD*)
(*01ozS0UljOZmUq+IpF1ywpuUx1ZjLysG4eBYDfkBwtOxpWhSrAx5j1Nv66DJ*)
(*5GRDxnS3+MK8+NOd84/x2KVOVnvY6BjhbM8UVwcXKQ1LEQ9KwxSeiSHgCM64*)
(*fAaLa2nLNkrNTaPPUEVvWRUdxUb0kkuOnALJpySyQxTkhEShj1XjLa+is6Sc*)
(*6qPprLpaudg3QFN6pvC28Mfoaa52zeLNL6avsFSyUc1Gcz8LtmZmrVZOeywc*)
(*b9bRlhVF6ovPkvrCLpQ/fZHMnQeZqnLxwZU3hLNvsdI+zVKtl0eSse90T3C6*)
(*1MyguOBqsJL5faFMBUUxHBDFYmgi04fiGT4cz91a8bSFNU61d/LO8ZOcaetk*)
(*o9FFf14RtshYVoSTHAolzckpNElWXevrEVdLp1qtoqtQR0NmOo7UNC73jzBS*)
(*aKJJnUmvsZLaDA29OcUsCl/1HdHSGp1EQ3QCrbI/JzOLeCqZ80aDm0fNHZwt*)
(*reW83cNxZxtnuwbE0WqYLLPgVaYxHZ/DbNhRftExyZfuIT6S/PrCM8RnLT18*)
(*JozxTecEt8wduMWh28NTGE7JZVOO9YrByEn5P8ulVtYtzdzqnvad78nadRD1*)
(*jh1k+b1I3AvPCB8L+zz3LFn79lIcGoI9TolJmOrozh3CXP5k+u0Upt4lHBaA*)
(*ITKcS8NDnB8Z9q3ZPt/SRn2+Hq9kzlyzhyatlj8/fZ3fPLzNr+7d5D8+/JDA*)
(*Z55FJfUuYZeSza4TtBe10ZZXjzEinY6cEtyZWjbk/1jVyZREqvjx0Xs8WrtC*)
(*i6aCZmEve2QK/cLqx4osvnsZtu8naIhIoj/TwGX3BENFUl8UeWTtSRCf1WMK*)
(*1qEPzEETmIk930VNaZ+PrSpy+rix/JhPX/2RzYVbfPLZ/+Lqw/9CVXKJVMfr*)
(*mCSDBkY+4NDuEkx5Y6QKQ2hT2kmPsbMoY3Cp/yqrs29y5eofmJz9DpvpFkf2*)
(*tlCXIvyw3y2e3IFxn4mB5E5yXtQxYTwv3HcaS8wG6x1fstL5CSuSWVuj34qv*)
(*X+Ws5TXZ97PkhXqxZJylWX9fXHCSBs15jDnr1NhuYDRf4vjlv3H7k39iHHiK*)
(*0n6Brs3vCY1qIzNeOKlsidBdRQQICzU33yQld5KJM99Qf+xtmk79jPZLXzHz*)
(*6h9ZuP97mibvozGMMTh0iyb7nGR5O4O1C3hKB+kqGeC9C5+z2XebcGHE2H0W*)
(*Du0o4uzMx6z2CsupOzDHNtGS0klbsrRVaBXVkmulB42SYR2YlK3cXf2E+xsf*)
(*8PWTP/Pa7e8Jj7CRpp3B1f0GHs8b5CUNSn0foDpUx7zOypLeQF1ECB1Hk2hR*)
(*pfj83rDnEHrpn7o94ViU+fTaRyjPbaQw20aV3kG4cEeXcMCjzbMM21tR+inJ*)
(*Ec4xxmfTXWRmvbmHu5PHqYrJpDQwCUt4Oo3qQgr3x/iu2zQLr1cLq9viUmX8*)
(*pjFlryM/NNLnhaakNCxHsyiX340JKb6scutKqEnLZM5Zx/WRMTzaAt/5a31w*)
(*MpXKdMqiFBQEBcv/Eo5J1VK/fb1odITbc90cayykLV8l/KQU7t5L8vN+nBJG*)
(*uS/1+FT7FLPOPqxJ+Thlf5Z1Ft4QxrgszrKqyWfycBQjfiFMRCeykKxhq9DB*)
(*lVw7nf5JeCLThWsqWWlykb5nL/M2cRVVErMWG+XiSCNFxSyLA06VltGZlSV8*)
(*osOpjsMUGSr7fZhzPZ1MWm20pGmoCVcxoDUwZHaI1zXI8dEwmm/G4h8jjKsU*)
(*n0ymwj+UFv9IJoU/h1RHWMov4Yq9U9yxFFuYjNkABbqD4RTtC0Hz7C70P91J*)
(*9fP7+ahlRDLOyycd4/x6co31JC0/DMzK33qZS6qgJSCN1iAVraHR9CWphauj*)
(*mCnIZzQrnzr5vwuGRm57l5gtb2Cxupay8MN8fGGBSXs+tWkqikIDsavjyZRs*)
(*Wmt0sui0Uhx0CGdSHD3FeYxXleNMSxaGtjHdWC/93IA5NRXjkTRG6towy+ev*)
(*lN9XxfGX6uv4zYNXuDuxINmRQLpfPGn7Uji6b/v77JW0au10SRtNmCx05+Yx*)
(*Um6W2qXFLMfkm7tv8OGlB9KXPOKpfeLYBuERAy1S/wak7SZzDDhDVDSKB04U*)
(*11MRloE5OpfSkGyqwiXfFOXi7CNSH7uxCGfZ9PIzf4jkwEomm49ze/1V1iYv*)
(*+86xnLzyRwpr7lHufp8sw2V62u6Tm+ThwC4tB/y0KKIs5CQ38MaVz7kw9wqj*)
(*fS8xvfIJzb1vkZ0l3LCnDpdqmpy9jSQ9b8B20IwnqpbT1adZKDuD+fAgeX79*)
(*nOn+lrP934izfMzLE99xouwuV6sfM1F6haKoQWryLuPMuy5j4yy1WWdot93B*)
(*bLyIreEO06d/x+kn/8Qx8ymFXa8wfuE3wivjxATVUSH5lBnXTkHONPUtL1Pe*)
(*eJ3eE98w+/DvOE98gePE53iufMeVz/9JZc8N8iumKTeO4nbOU53fLuPTwYB5*)
(*mFxx6HXPRfqqVgnakUv8QRuHJa8uLnzGmfF3sKZ6qYxrFPdrpFZZi+FgMWXi*)
(*jcUHxUXTuzHHt3Jr/h3JrDd5cvkTvnrnrxQV9JGdP4Wm4BiGwjUqc6d8341k*)
(*OZzFWKZ4TnsHi2WFzBh09Imb9GcV0CJc05WYSVWomjzhCXO6lVj/VAL3KEhX*)
(*pKGPS6K9sJh2caQ2GWcmtQ5tSBpLTX08mDvOSFkNn5y9hVWeawxSUx+XQ21s*)
(*lu9cd1tKofCGFldqnrjEi+QeOMzpjh7JHCXZh4PlM2b6NpuwSIkiXuqGVpgj*)
(*m8p4tYyLZMYqt69Xp2KXbOgpr5f+JX1YxoArT8OR3X40ZRbgSM5i1Gbl2lQH*)
(*PWZhjXoDnfpc31yf7XW94n76LBMlJv7527/zC3GInnwjQ9pizhltfDIwzoah*)
(*lNGERG4VlbMQJf09WsZxaALDwonj0bLvh1PoSy6mNS2PHn0Zw8JFJ1xtnGpp*)
(*Z8khzNPqoSZGKW2kYriwEFt0hGRZLMOGQq70dfLV1mXhOTuvzMwS9swzvDe1*)
(*yoO+aQZKpf6kZDNR5vDlVUtCDiM6M5vCUmN6IyNHtUwKB3XEqJgtMDB4VI87*)
(*NpfaqEzK/ZUYDiioDT9Ca2Qas+lSw/yECZP1zKvzeVzfywOHhz5pj4/bR7lt*)
(*dLGWWcugsoTO7XPPpUYeeBq41WTjpLlExnkMdaFJ1IZmUiNjukIyujNTJ26f*)
(*LLWgkcWmYlZcdsoV4eLWVSzW27k9PsidiQEK/P1YrrOy4a7DW5In9UDJZXls*)
(*yG7BUya1R5ONLSeXoVoXC+396CLi6JbPd+RFP6kb6WjF6XWH1OgOp/uu38W/*)
(*GEvS7hh6Spy4NXrWG+p8+b993cWh3n5OJFsTq/zxra/w5Flwp4s7iB80KVIY*)
(*yijAtj8U68EwhiXDWqQvWkJS6S+qwxSdLTwYTcH+DPT+ORyrncRj8FCV14TT*)
(*OER37QnxnGpaivt4afU+V1bv8MPX/y9bd/6NscUfJBceoS/axG3epErTR7HW*)
(*S3ZmOzt2pFKc28+AZZEL4w+ZHLqH032N6m7J07lPWay5jlvhJfOFMsktLy81*)
(*nWUus5OJjG4uOi9TFzJA2cFeTnV+ytmBrznp/ZDX5n/katUDThu2GMzfxJI8*)
(*TWfFHboqHmCKX6bLcAtT5jZf3cJc9xLHrv6ZSx/+U5jpM6wjb+Fd+JTevtex*)
(*lKxh0k7jrDjBXj8L+wObSS/bJL3mMmN3/52mS7+m7vwvGX/075x47//Qduwd*)
(*cgzj2KyzTHsvoE+wCA834S3rpjazheaCQUypHcJrOkL3lHHghUKe3v47D858*)
(*jyO7D1tyq9SUdkYMo3jl+LQcbaU01Cw51oBJtrpsL2Xi457yHj5+7UeGe85h*)
(*sS7jarlKn+c2jcXTTFaM4FHrueJ0cd/jZtGoFY9JZbiogIE8HT0p6Qxk5ovX*)
(*S3aocrHn2MiMyUcprDTpHuTrOw94bXnJN9d51dnCdJUHR2IRD+dPcalrlHsT*)
(*y9wemsd9pIBaRTrmQJUv+5xRKUwZ7HSk6qgTtjKHx5G95wDaff7kHvIn44DU*)
(*5cxsdOGRVCUnUxypoDW/AJf0bZOM/+asHIZN4mql5bRm55J+OJaMgHA2ve2c*)
(*6mmT8eMiXzIvZfcBWoUReiyyVWmwpMVgS1GTtvsgubv9Kd5/iA1rNX/YusPr*)
(*I5N0paSJA1VxpqCQ60Yj7vAAehURXMjR0rM/kI7wWPrE10ZicukKFneW7J6Q*)
(*Wn+9b4oLfSNstHZxqXeI1vRc5q0OOY4GnwtOy/+6NzrEKVc9dQkxTJtKpFbY*)
(*+fzKKa4PdNKRIjy515/L1ibGM/S4hKvMwgNNag2DGhMve2e53TcjGbDIqqOR*)
(*1WLxtfwyGsSVWxVq330z01ob7SotzYosqvxVvr8NSUZtFm9nUQ65z7xA4U9e*)
(*ZD3HhGtfNIPifqc0Zk4KKw9EFNMbKdy3N4yp9HTGUhTMaxM5bRamr6riSk0H*)
(*o+kWnIHZdCWX0SzHoCzInzuTrUw5NNIuaspjwqSGlArnhtOadQRrXJhwax1V*)
(*ylBemhSXGu+lTBFKbXYK12fHGJJs00aF4y4r4+LMMc6MzTJV28J6i1ec8xAJ*)
(*z+6mcG8suXuU4vgtxD8XzqRtgArh/H6Dg17xgeONtRyvd7DZ1EqdOsvH6jN2*)
(*N79/7WfM2trp1hrJ232YBb2wfpmNHmH49tgUesSvvZLx4/o6rvQs05lfTYa8*)
(*T5dG6r/a4puXmrQvGWNWDdWGfhzFE+hUjZJhA3xw/SPunnqVH7/4T25s/Ynj*)
(*J36Ht/1V0qNbmW04TVvxCMmKKuKUNQQHVuEoW2F2+/t8hl9nZfxNxqaf0jLy*)
(*Gp6Om8Kqy8xlDUubNTOtG2dZmOKabYbm4FJmNYOcLL9AZ9Ii6663pW9/xHqn*)
(*8MfiL7gu/DSfuoz76DQ1WdvzGdawZ5/CfnRDeOc+DYYrWIyX0ZkvUD/5PhM3*)
(*/4zB+4CulU+5dPfvWMynqDFtEhfsJDOph+AAF/Vtr3G05CRty7+g8+If6JfM*)
(*6r37D2Zf/98sPvwHHcfeRVM8TnvzCbx1x9AryxmtGqDP6KUiqYZh5xrNZTNE*)
(*7TMQG2gjYLeBB1d/y9bxz3xz2qyprVjUTupTmzEpLBgizRSFVVCf1Yn1aAuT*)
(*Ncfwe2YP4TtC6KkdJD2uBKdjls7289RVineaxoQn6n0uf7W2hvenenlnvoeT*)
(*TSZ6tNnCQ0FoXniBikMBjBZVcLF3hm5zGzEH44ncG+Vb8/Gst5c7wwMMSI40*)
(*xiZRFZHmOze1zVMnGrs509LHD9cf4s0qwZ0oPCD+51Jl056okfxKFpfVSJZJ*)
(*joQrKTkcTv5+f/FOleTVQd81/sKICOEqDUalkjZdofQjrc/5HMkp4nXp9BSV*)
(*0J6bT+qhSBL8DpDk94Icg4NUKKIYN1eRvNOPqqRk3CWZnB5pwZqp5vrUGLn7*)
(*Q9D5BfHF8eM8HRviQUszk6nJTKQn03BoD65dL3C1UEP9oReFT1R85HbRtscP*)
(*h+Rba0Q8/cIxgzE6OqILaBSXyD8YSczzL0h2b+LKzKVKoeK8p5sG4cArXd1c*)
(*7+7m/tgwQ4W5NCUr5bE6qa3l3BrtYLXGxJujw5wqq+C6qYa7DV3ifgrswnOm*)
(*gwoG0wzMin/OlTkxR6jJFT+/YnOxoi1lTlvEQpGRVaNTxqSDRz3zfDR1ki5F*)
(*NpesHjYN9Zwub+ZGbTcb8nhPdCZuyTLPYTVlzwmD7o+iJzSd7iBxOr9EOqSW*)
(*vOJu4dvFYR60WXg64BYntjCfXYZ1bxz1wbmU+cVhlbYvDwngcp/0v8wQ5mvL*)
(*ac45glkp/ltRyNZIF4+XJzjhrpHMctKhS6WjMINJRznXp4W9lqclryqxZR0l*)
(*T5jz+MAwTcKJFskTr85EwZ4Q2pP0lB9MJHNHGK4kkxyzJboKnJKHwp2WWkal*)
(*Xp2Q/B/WF3Cls4cTTR2SNeIK5bV8cv42Dsmu0kAFx0wOYSutuGAGXUrxd0Wi*)
(*1IYgmmMz6UgzCl856ZNM7zPIOArX0ZBsw61tIC+qgDpjF+YCGU+6EUzpXfRu*)
(*f7fHpXd5eOIBv3j/L7z1+H+xsvAFmQqpM851Zqum8BZ5sen6SIiu5ZCfmQrJ*)
(*kzOtj3hl8lMuzn5CR8sNBqeeUGcTtzYMsq7rpjXGyqppgnOVo9xpWMB+II1N*)
(*8a6Xm7fwHpmSXNjimOcJ692v8WTpCx423OZU4XHGyjao1c7TZDhHTe4p6jVn*)
(*hHMu0m17gFuYr3Hgbc5uf9/q7T9RMXifxYu/9K1NmC8ZOdj2Eonh9ezbqWef*)
(*n4PdeyULep6yVzWA9+zvmXn033iv/5HTH/yTax//k75j71HbcIpG6zz1JT3U*)
(*a5sZrujhWOMcnaYh31wPq26A2CAzAftK2LUjk5cufce5xXeE99opS6qVfeti*)
(*XDLIfnT7Hu0mDAk1WCS/rKkNrLStkLg7kpwQNeE7D1GRL3zcOIHV9H/vp97m*)
(*3Qnh6nVx/x9PLfIfD87w47VZ/vz4Ik+kP00JE1xobKDycABXPH2c6hjGXVpP*)
(*+O5wVIdi6a6sZaWhiT5h+prQUJyh0dQJQ+kkyzzC2wX7wllzuHlv+RxjRcL/*)
(*R/Joik2jWZmGS362SY22hSl91+oMh0IpOhCISTzNFBVLws5dNOvysR1NoUKd*)
(*gCYwgPFqu+/cRrXkz0h5BQOGMtqycqlPSiXtYDiHf/IsoT99hvCfPEOUuFX8*)
(*s88R/syznPR0+sbHaH0F7cZC4bZMMv0OYwlWslFhZk7q/WxiDFMy1pYylKxk*)
(*Krkh4+uuKRfzzp+wnKvi5/2d9B/2pz0yEvvhMJaFS7bPT7dJXvVlVbLp6pM+*)
(*VUtHQRlFQZGSlTbJrHjssSpeGhzgZp+XW/1eRou37wFSYosJoCRgt9TzJC62*)
(*Onjs9fDjsUXuWmrYEM/pErdZMjtJ/emLXK7pZjrXjH53EOWBMRTuPsTlygbe*)
(*bO3l47EZlotLGUrP8/nOjWo3j1uG6QlL4byhltX8SnFaB5e376spsTOklvc/*)
(*rGJBMrDtkDhqbA6DsVq6w/IYVuo5oavk1RYXHw618U5fPV/PDnKrxibHQHwl*)
(*8Aj1h9NoEBdes0i/CAumOT2SPP/nGbMUiH+rxfuclIYfEC+W98mSzO6q4/s7*)
(*FyS37IxW6jjuqeXByjTL4psrXc2+ewPvri2yNTfLecmsGWsdNcKVjdFpuGM0*)
(*mPYIDwek+q5Pd2aZ5Zhm05CSJ/xWwGCJ+KRSQbXUJsPBAHqyC2mU43bK5eXX*)
(*L79OS6r4QKTKN1/XsGsPZj8/mkNC6VUfEQdLpi9N75sLOy9OYIhIpT5te+5o*)
(*OfZ4E5UJRpyaWt86udt5VZLeiSZS8r50kE+vf8j9tVv88M4feLD1e9/3NtTr*)
(*BlmqW+RswxyVwqqmlCbC9pQQcaCGkgThpsotTthvc2f+K9psZ+jt3MKY0443*)
(*1c5iTi11YTq6U6pZKm7nvHUAy74ElvQeXmo4R3/6OI7MWU6MfcB67yu8Mvcu*)
(*d5wXeMV1nYmKdSyZo3TZruEqu4QtfZ3GPOER3SXf+vDO/jd5+CNsvvdftC6+*)
(*zcLGz7hx8TvfGmEro484+KKW0P1m/HaaCQ5ux2i/Rmb5KfpO/xLXyud4TnzN*)
(*+bclk2/8Gmv9SY5NP2Sq+7x4n5PqdBmPrlmKwsXzs+rprJnh3MoTQg/pCAsw*)
(*EnigmJevfsdL5z/DXTlJeqhejmkzLfoOzCk1ZIcZ0MZaKDviRBdlYKllhpEq*)
(*l+++rZrcQmz5pUwPHMOgsfm+O2imro+R/O1zHwm8O+ri95cn+dnJTn52dohZ*)
(*a4nUqniqw8OEixKFfxTSD1UM2j1o4zTi8slUHMn2zX064ZAcjI3Bm3gUe7CK*)
(*yiDhgkCp34FxzJnqeWVsmZE8k88BO7fXWQ6OoSYsHkeY1OvoJMoOhUkfVVO4*)
(*P0CYXvpmXBKtOh2jDju1koWu/Dy0IcGYJbcaJGvMwlqNaRlYlfG+uT5erY6k*)
(*nQdwawp4Y3GKJzMDnLRVsWaycqnV67tm2FaolXpuwmM00F9hpfCAeOZhBacl*)
(*kzdzU1lLimJdFcpScjDHU8O5kqXgDXs+GwVKPpt082a9hRulhQymJAqPKmgL*)
(*TmJa+ndNgGSvqoikFw+In2cJW0j/r3HRmKrx3ZdScMCfV6YmOdUk7Sks0Zam*)
(*whJxkM5stdTyvbRnKZkqTmdRm8oDu5Ut4cUtk4W64DDmiiuwHYyixXfNTo9S*)
(*slf74n7fNZBNTRlvNnTwcd+ocFk5fUdTcUVECzeFMxAUS+3zfqwfLWAxvZCV*)
(*AhPX6tu56GhhVuqIdVeQZLKJceHg2dRSeiKzaPEXXvWLYSW7iMfuVn4uDPTl*)
(*hJefDXVyyVTGkmRBs+Rcn6qAnqQCZvUVOGMUjBiyJK9eENZVcGusm25dGh7J*)
(*4Hzh0mZx780mC2+tT1J/JNL3nJOSX0/PiMcUZeKtKMKYqKC3wsDW5AjDhlJa*)
(*ktNokSzxqnJwST+y71PQFJyCN0lHc3wOy8KV2znULGxdIzlUGRombprIYrmF*)
(*mWIT5f5y3KTdf/vyQxarqlmWtvYkqFkszBO/zeRkmZ6TxjLGMnJxhsTgiEim*)
(*KirVty6NI6UEh9qII8FMqaJIHMvOUXHktBgz6ZJVmvBqph3zfHLpKbfnL/Pe*)
(*1ieUZA3w3DNKsv31tGU4udo8KzW7mIbs7bWRTL776NR7algovcikdoNXZ7/i*)
(*pPdVFvvu0Sqe2ZVUzvGSJsn/XhrjDCxsr507uMmYxkpfcgXT4kpzxQvYMic5*)
(*v/wVx0df48bYA97rv8PHIw/Y9Fyjt/YsVcJYrrILOHI26Cy/hdtwi3rbXazd*)
(*j7jzS7j1A9gGr/Paoz/zs1f/Qrnkb2X2/10r2Jg7QkK4W/zxtO+8Vm37Lbrm*)
(*3mZ442Omzn7KS2//hY3zH+O35yiapCo6LUO4JVerj5rF8c8yXTtEaYqZzrop*)
(*1mdfIjqkkESllYjgEj566y/89V+gRt/JdOsyfbYReW0HhbEmDMk1xOzPpTjZ*)
(*QUFUoeTRIGvuHmbr6hkSNqkrLubMsU1qjTVMuKQeNHWzZCpnUurgh5MN/O32*)
(*NH99fYn/+eFlLvU2Y44Mwxx4mKa4OEb0pRQGKJhqHJB2UNJjd/vWg3y6vsyF*)
(*ZofUq0jh7VThLBXOyHSKDygwHI4Tdkri8dQ6K5YmaqNTaJDNdDCM8gMhmISp*)
(*tjPLcCAYh+RWwd4AHEp5XGpiljCdMVGNNjxcOKvA54YztXWMW61UqRJ814+u*)
(*9vVxXD5bT24e2XsOc6NnkLnSPM5VG/l+fY2bdc086p/m5cFJ2vO0uKTPdhnF*)
(*NUIke/1j0D6/m01dHrPKEM4mR3Mizp+zmRGcz45iNdqPHwec/PncGL87M8bP*)
(*vA3Mi8d1JSpxxyfSK+PJeUCNeZ+aoXyHZPkRTPGpnOoa5Wz3MM2ZeVztHZTM*)
(*T+bBxLjvu9G8OemYxVWP2fQ0H4ngRl8Dry/28+cH5zlfkcdnfW629PncMJZK*)
(*XgVjDwxlPKtIPCwEi/iRyS+E4j3+8tOfTfn73XI7l4uNnDXoGU1PZCgplh7h*)
(*0H5xVs8Lu5mTYzsUFceA6ggbpiou17qYyRTH2nGAqQQd80cMTIhzeUJTmVQX*)
(*0bAvkmNpWm7b7bzf7eGz4W4+7u0QRy0X/oqhVhx6Od/EepmdTYuT7swMFu3l*)
(*GEL2stFs41JPo9QPf5ZrSrnUWctGg4mTzWZOu2XsFaYwYsyRemyRbPLKeFYz*)
(*Lj7sLsoWD6jn8ZLwQ10NtaHhbJRVMpGsYUqd61vjZkiVzbtjx5jOL2PV5sQU*)
(*FO5bj6cnJ993baQ14ajvWFkDAqnefr0856P1TYa1WtYqylkrL2ZZ3mc+J4Wz*)
(*xgJxrlJWhc3c4oajWiNjBjveEhtlikzKwrWUCGsWK/J962NlxBSTrqz0zWVI*)
(*2m/Ao+vk7eP3WW0WT0m1ErqrgJi9RhTPJVIRki81skv6fz7GiDKyAsvlNWby*)
(*gppYqjjL1caXeLn3DY7ZL9CsHefS4Ba3u9e437PETfk5WdbBorWfzbph7vat*)
(*8qW8z/sTL3O945Zv7YS54acsDT/kfN8Wv1x9ykXzLF7jDG7bcZQHbFQXrNOk*)
(*P0+H8SbDjtfpc79DzfDbHHv93/Be/ZSTD3/JvStfsrI9X6r7MrOtZwnflUPw*)
(*zlzUgTZSY11sLn/AtRvfMbvymMraGbILW7lz/0tmxs4y5V3mxOhpabcBpp0D*)
(*WBOFl6TeWY8a0Kv1uKq8FKZZiQ8vQBleIk6Yya++/C/++19hsE78RjZLShX9*)
(*knc5oUUEPR/PAdm0ChNL7kXuzMq+Cz+NVJiYqrUJX8jW3EaeKhW3tM9kZQ1L*)
(*wgxdyoOsFEaLF0ZzvSefp5se8Tyzj6+s4aFUHD5MufSR7fkBltRiKrOMpEku*)
(*pR4KYsxYIm1RLHkVwVBqOt7k7XNURZIHwhHhqb45mTe6pxjINfrOW9nEweoi*)
(*ZZxv33scKXwkNW6b/80hSsqEdyqE4UrD4zhy4BC2nByMydscl0JuWCjlKhX1*)
(*GRmYFLE0phz1zbs0C983xKvQ7QlkUByhdNcOhhMieFDnlL4ej3mXOFx8ptT6*)
(*DK6OjVMYrmTUVCtZqcK06xD3qm2sxIVxPjlStlAu5Cg4mxXOumIff1zw8Ldr*)
(*M5LlTbznrWPqiJLaqFBGCvQY94TTpiigIbJAar5wamUTlkThlFyD7F8Sx2pb*)
(*feewGoSxhvVFeNKPctwpTpyu4mpXPbUq8Zc8FUN6cVtdPCfLU3nsMvG4xsQX*)
(*w16Gs8RZklRccDbgjk4k/SfP+c4Tmw8GU7RjJ1vCzFs6A9eLDcwkKZlIj+We*)
(*ZMPnnS6+EpZ7RZvP8UgFPdJ2TQH+4pO5rJQKh8Wl0nwwkql4LQvJevqis5lL*)
(*L6PpQASNUkPWxUVP5um5LKzzrsfD5/19nBPWHQiPotU/mN7YRMkrE19vnuK4*)
(*zebzsZQXn0fjt8OXVRfanbSmxtCcFE5jYjB18jmv90ht8dZyqbuWRWcpV4bc*)
(*zEhWjdvL8BTnsFBfxZO5UX5z9QzD0t6L2bkMRaiYjj1Cd0CEcOARuiJjmMvP*)
(*55WBfr46fYZ3Ftf4/OQlPl67yIeLJ/hwVrhnfo6/373H/3z1Vb49d4bxvGw8*)
(*6mgGhOsuWYs5W57L1aoiLlv0LOXnSE0IpT8jj4G8MqolHy3J+cLuhegCs6nJ*)
(*qKK+qJn+lnnyUusoTe8iK7iKOcccX115l2uD60Q+H0rA85nE7TWRvCsPY3Ax*)
(*J2vGpL4XUS5jNvdwAUf2F1IR38DDyVd4PPqQ2x23eanjLt3ZEwwVTjJXMcRG*)
(*3TixzwZydLdKWDWLozulfyeVsGDsYMM8xa2BBzSZzzLY9wZL469zb+Vtvj32*)
(*Ol0RFsnDIuJD7ex7XktlzgJNhgsyZhYZtb/B3NDXDJz8HveFz2k//w5vfvOf*)
(*/PL9v7HedJwWrYc+8zhObScDdWvUaHvJVdpZGLzMvWsf8s4b33DhzG2Wptf5*)
(*/OknbI4v8OTiTXqNdjKkbvWWOpiv66ReIxleWkNbWQMT7inKM61kq0o4ElWM*)
(*MjCXP//i/+O3H/+Nzb7TNOc1+74npK2glYKwEvIjy3n94peyv3W+Nfnvzl2g*)
(*v9jMqORVV3EebSWFuI1muiprGbY1S52v44y1goWceC5UpTCbH8A5dwavHmsU*)
(*31JSHSeuYpD6pVb75mVfHZhmsqGPWc8kl+ZPcHpgjPNdblYtJTSGBwhjZwh7*)
(*Z7JkbkazO0z6aj51Sg3tqXp0fsHilknCUyrcCekYZWxUhyqF3xTYJb+2z8ts*)
(*z0U3BqnQh8aRHhgmxz8Hc6ZkgKEMR3YOpap4KhIkzyKifHPaBwt1uITBtvcv*)
(*f8d+sn/6PN6oEGaTFAwGBnG50MiAsH5PYi6VYeIVWbkMVggLZhko3RuNdfdh*)
(*liQTzsn4upgcxS2NijW1PzMKP04lB/FVn4NbLqnHNbm82VUr9TmVcy31WBVK*)
(*GqLSaYkpkKzuwZNdTWlkGg2SVfoINbcmFimPUtOlldwOEp9OTaU/N4e21ATM*)
(*oftxxPgzZ8ljwpjOp+emuDtUI/xQy1Z1FrcqNFy3FKF54Sc0qCJlvCUynKFl*)
(*NKNAjnE8xr0HMO/Zy/vuTs6kZPBeUyNL4pgnjEf5fKKJf18e5r9mhvmjx829*)
(*rCw2jyYxEBshLljFUkkxXZLhveHCYuKYA6EpdIhzbdnbGY47Kjkm9UeZzHxS*)
(*JitHsrheYubNJhcrUhu6hdsW01O5YrUwq9UwkSvjIzCYepVwo0Yj3OhPQ2I4*)
(*C7LvnZlxUuf2suk0UB93mIWKXGrjD2OPOUjTkSi2RjzcmhTud5roKxdnrTXx*)
(*dHbIN4diPi2FNelHywlHmJe8X1ElMSX1qT9K6mXgAbQ7nqUy4DDVYdG+vtSo*)
(*yPKttdGXeITG4MN0qZS0q2KlH8YwlCX7lhTJ0NFozhgzuWbJZcum4yWnUThR*)
(*apjU4uFsLX3CaBXxKeQExhP7fBBJO5U059dRmWHD4xxj7wsJ5KtdmJJapY4v*)
(*c613g42mYZQ7wsiNcKDYZSBxp56igDJpy/P05lYzXNKKXdxSE6TBGC8M3LXG*)
(*Zv00N5pPiZtfpE3pxf+ZcEKeCSVuh4KI58LIOayRmlwpNVXaf38iYc/sJvmn*)
(*CoZKjlFXeYmh4Q+YH3+Tpxd/zg3HMq4QI8rdeRzy07NvRx7lWXM0iXfqYicZ*)
(*q36TtekfmbvxZyrmX6Hr4lM++tV/8+X977jYtsFC9SQTstVq2jg1ep2u8kHq*)
(*85soT62gLK2YvkbJs/om5rracWjS6TFtr2NSRYN4wkRFhfBlC0OVVt/c7kFb*)
(*AwstgxzzCJc4+smOEt+J1aPYl8I3T37Fr5/+lqWWY1QoSygJlvpg8OI8UkfG*)
(*AR13V97FpRsgaVcSL0+dl/qeQ2tmtjjvEG+fOcnFiVkm6ty++19aU7Kl72WL*)
(*i+Ty3XIHj/uNvLHg5NWFZiYq9cJXCWw4q/GmpzNctH2/XiMDNo84ZxRrQ/OM*)
(*1TaxNdzLeZedGV02p6os6PccwpWQi25fLEUHVXRlmyk5GIPxUCwlUsNLZauS*)
(*bDL7R0hWRfs8sOxQFM7YNHT7I4Q7pO/HpOEpr8JjtZMj2ZB0KABNuGRZQqJv*)
(*HrguMFA4TOqueNAxk5EpfSE1B5S0BscyFhvFcLA/6+KMm0nZ5DzzUyZS9CyK*)
(*v4xXOjCEq3Gl68UFD9Hir2BZFcdS2AFWww9wRh3CWnIwy0mHuZit4F23kb6j*)
(*/rSo9vLhhLizXos3T0NnvnBwZCbt4gvtqXaWpKb2ltVjT8tn0tHCuLTf9toR*)
(*6w2tdGnyqRSnXZe2vtrZxLxZJ/6RLn6dwmpNIXfHmznbVMgNVx5Peoy8XCM+*)
(*W5HJ2WYTD6Z6aD+i5oOFBW57umhRxPuufXQp4/igrUPyKl3yqp4b5gLuuor4*)
(*bNzB951Wftdq5+8eF+8U5/OgvJDpFCVbzTU+LxqT1/SGxtMToKI3IIluyayL*)
(*pnp+NjLOUnYWAxFKZtXpzCnTfOvbv+Zo4kRGDrelrp3R57Kqy8IZuJ/6CGGT*)
(*bI3vuLqS01ioKpWapmBJ2OVknYkNRwkj+cm0p4Qza8ySfmSgL0/Nmjz26sIQ*)
(*y/VmH2OdlGPyaGGU313eYEA4d8ts4E3xwtctVp7I9o7DId5r4LatjBPCYjWB*)
(*e9G9uAN7SATl0l9qgtPxSE1si1D45p40hm1nVjQNEQHMFWWJT8czlangTFkq*)
(*9+qKuGXP525dKZOS8Q0hwrhHjtKanO5bL0IjtTL0p/vJOZhKV6mbqqxqmqv6*)
(*2fV8LPqUdoySWZd6L/J0+Q6XOuYIeMaP8B3pKHaWot5tRhfk4FLXGVwy5kdK*)
(*Gxkpb6Y8IY+a7FLWO4d4snKZrzeeMHa0m4pdVRTtNFMcbkfll0NTfqeM+2nc*)
(*hmHftbKiEOG1kAIsAeIykoc20yW6+t5lYeZ93rr8CybS2uhQODCldBIXWUfE*)
(*QQtmzbwvr+w5J33fSb8y+QOTV36LfuwmPVff5tN/+d+8fuIR5+pmWa+bYqZ6*)
(*nLRDOVjTHDRoHEzXDnBjfpPXz13iweY6a14XH15d52dXl/hCtkdzXVwUfv7j*)
(*K7f4t/ff4l8/eMpxbzeeMjNrniE+vPaI69PnsWVaxEtbyI/R8/v3/sD/+fa/*)
(*GCnr5lrPSbw5jXgyt88bVEomF1IS5SDFr4DCID33Z6761s7cPic9WFbKtLR9*)
(*Y34JxeIVzZnCTclZzGlyuGDK48f1Xh71mLg/VuW7b8WTexRLdJSwT7jwSxIG*)
(*/xAaMwrpq3Iz1jrkm3u1vXbHhqvO10d7UlR0CvtUBUk9K7AIW+nI26uUvlyM*)
(*RcaESy35fziGgt0BFO0NpD42mbqYJN88nsrgOGGJLErkcZe4ZHWyFm2Mmg57*)
(*DU69gaLEZExH02gs0DFsqaIlJ5sTzS56NNlSZ0PpTFLjVaWxJn40KbV4UaFg*)
(*K0PGkvhm7jPPUb43BIc6jVzxGfXzu4QLlDgOSP2NVotTZbAac4CNuCCmQvay*)
(*nhrF4tFwRiL38bDJyEhuLPYoP17pa2dN6kqZ5GaRMGHmzlAGNPUM5LfJeHuZ*)
(*WzNXONmzyJi1nWp1ju/a+lvzy8zoJSOErbbvy3w44OGlHhe1sTKmspWcaCzj*)
(*1dkO8UQtT8ZsXHamc9mcxkqBuFDRUcYLM6kLEwdTJ0stjcAlTmYXtnALQx7X*)
(*pHFam8pmXhKLhfHc8BTz/lQtP++z8ZsOK//w1vNWfir3ZcwOBR/gWLqalaxU*)
(*zooXDgeEMB2mlKzOZDw+mwm1hvXsfGakHiwmpnIxz8AZaesL4oaftHexLIx3*)
(*Ua/htqOcy7YScctkrjQ7mZNa0aBOwRalFEbJwZOWyNNj4jl5qfRmJnKlxcG4*)
(*7MNAlprZ0hz6c9S8uzrJV5fW6SlMZbXRIswuHDjh5fsLKwynRPBBZyN39Hk8*)
(*yM3mK5uVe+n/P0tnAVNX9r3tJk2aNCEhDSGkpAQJVijFixQtUNxdS4Hi7l6k*)
(*WHEo2kKFuru7u7v7TGc67r9p5/kW9/tPsofba2ffffZ61/Oes8Wd68KGF7PT*)
(*2J+WSLDyNEJUVckSNp9IKabAyI1sXVtqxIMvm+wHNubsy09n85I49uSm0BXg*)
(*TI29Phvj3DheGMG2BC82JgSQNVeXUHVVkgwNidLTJ1lyc7yNvWiDPs4qeizU*)
(*mIu75NkIxxCUpsxAZYoWWlOMWBpZxqbqAfa1jVMgMR5ln4qDViSWM4IJN8ui*)
(*J72HAs9kKvxSWV2ynAhTNxbZ+XJudBO3x3fzbOVJVoW2kKmbTL5VEcFzYom0*)
(*XUyYeTh+swNx1w8i0i4ZDw0Pyd0pjKeOUC98VZm/k6bm0xza85pnp79lOK6R*)
(*Vs9COnLHifKsJMKhkOwQ4avwlRTFb6Uu6yQtTXdpWPucRR37qdtwmvO3P3Bi*)
(*/CCHGteIrvZzfvwIxWFFOGg4EWLhT1t6LQ8PnuHq5q1saaph1/IK4f8OXmzv*)
(*5+9z28R717OnJocfT+3j0/mjPDlxkIasVHznWeEncfHz7UesXtop9RfmcJa4*)
(*NQ/k+cEHnB85ptDHiaJ+WiIqSLdbRJFnPp4afsxX88FR3Qd/w0AmqkYIMZxP*)
(*nkcgSfaupLv7KtbnTHINFL8XKmzgT7uvPx3eTpysXiKc6s+57jz2NWXJ9yeT*)
(*Os+GLGsbfFTUFPfv3NT0CDJ1YV3joMKzTq4zvqogj7HsVDLNTLGfMkX6ZSJH*)
(*W4ep8Ekk3z2WQrdo0mx8iBS+SrdyI160ItHEWlGWWNgTrjuXEF1TPGfq4aqm*)
(*i6+OOb6G/3/tq0A7B/k7GzeD2YSI5voaGhEvejTJVv6zZonuiO5ZWFAg7bWn*)
(*uoje0CBKxNOcSkhn38JADoREKdakMpmuRH9VLW56BjhMm06ZMESSyixaLczZ*)
(*HGjFJn8TtgQ7siVC+nKkD/0+jnRJbO3IS8Zp+hSWWJuwr6GBAy1dxJk54aii*)
(*j7uaOf3JjVR659GX2o2lsoO0R7Z4zQyi9R0otxdNjYqnyMiAQT9POr2cuNvX*)
(*LJyUSYHdHJKF5zaWpnG8q5b+JH9WpXqyoyCIHenBnCxN5dOaYXYnLxYv5EjR*)
(*LNE33TmUi86Umhkr/M1Eqj8bc/2kD3jzdP9ynpxdy56eIi63pnOnLIZXBTGc*)
(*9bFns8TvdmdHbqUt4WpiHBcj/FljasBqyzmslPxSZ2rL9sRsmubaMeq0ULyx*)
(*aK3TAibcvVjt6sLOsECWmehxpSKLTXH+DIR60BMqmpoYrvCAa8sKyJH3Fbl5*)
(*kDfflY35xZQ6uVLp4kKCjjYxGupkms4mWkOVek8njjdV8mTDCENpMQxlxFDl*)
(*78xQThzvTmwWVvPhaF4stzNjeRDuxzPRrLfiYR9FRHM4IIyRBb7EqWqRKPmu*)
(*aI4DkdNn0iSMWKBqKH7VgRztuZQazyZPZxZFupq0iS8cCvNmKFJykp+VsKuf*)
(*sKif8Ols7EX3jKdOIVxLk6Q5uixP8GVpqBMNwW7U+4pX9llAg/je7oRE6sPj*)
(*GS2oZWVpM4cH1nNxwwFOrd7NyqoehqtHmDvDBqsZziyyz6AnawVVIeVkOiYR*)
(*PyeYWF1fCqzjuNS0lSNFw3xafYlDWYMka/mQbxNLgmUAAXqOwtx5ZDlFYati*)
(*hessD4I0g/BR9Ra/EsximyVsHjjCcPcWHl1+xrtLT9hZJbEfmENbQj3+uj6k*)
(*WsQwnjvGiuLtBC9oICR0mKqO27RsfEXb1oeM7r7Bdz/BrSPX2NO5mqPCeuvq*)
(*JEck15LgmojZzPlkCxOdGN/HtpYedtQv5dZoDw9G2jhTn8+pmjzOt1QylBRJ*)
(*a0IEaxur6a0tp7GqmPhwXzSVp/Dx9jn2DPQRZGGLs+i9vYqJwnvc23CZgZQW*)
(*1hYN0BpXQ97CTDI9suU9nrTnrcJa3Y3Z0424vuOCeJRo8ZieBM1dQJJLmOJv*)
(*nOhHynxvoo2saAkOpT3Ih0udNZxuyuFce77Ucxlj6amMpeVS5xnEirg0fGZo*)
(*4admiPfMOTRFZoieVVPuHSmxlk1jUKRiXESFux/xRpZk2nrgNcucDMcwFll6*)
(*kSrHS7f1JtncCT91XcUcuDB9E2JNrfDW0mOBupYwoS62apoEmtmLVlvjZTyX*)
(*irhY0VcbHNVmEmMi32frSGdkPEkGJqxJSqMrMIRi8Ystnp6ifVpkmujQYGrD*)
(*JpdATviEcSwmDpfp06lMSGBNdyeJC5wpszBjSPJwu8kc9oZ7cbMwgMEF6gwL*)
(*R/UKq7R7zydOU5lMCz1yHc1xVVXCZoYSi+0daVyURoSlM5GWHvjoOBJlGiBe*)
(*O52zq07z4NBrCkOq6EyuZ+WSCnqEUWrkWA2m+oz7O7HUTJuRYFf6hZv6o8Wn*)
(*BDkzLvF6sDGfg/VZ5JjPlN8j8RXuxIGsWG7Vl3E4OZHVHqJ1FtYMODjQaGJE*)
(*hZEmvcJmaxLdGE6w50hdJPx5k//eXOSf2wd50JnD3ULJa+neXPK15I3E/oVA*)
(*L15kLOZdbhLPEwPYaKjKTms9xqRuo87ObPSPYJ2DeDYTe9aIPq6zcWDCzp5h*)
(*8XwHgrw5FOPPLtHyncIlm+OCaHC1os59Plk2czmyvJ4idxdq/QJpDYtiS3EJ*)
(*uZLn+qOjaQvwI91Ij1QDLYWPS9BR5WRzGfuqs9hSmsxAagj1wU7sbMrlwb4R*)
(*lkXOl+935VKsBw+85vPU1Y43Xh48DAjimH8o/cLiMSpaJGiZkiU5rcrYjhWT*)
(*a85bLmDQM4IGG1fqRZ9r5uqxzNSEES9P0XYnqp0tFB57fdQCDkp7FJobcmFi*)
(*JUnCnDV+LpQ5mZA+T008xBQ25QXy9fIOBiNd+Xp2Lx82jjOWsohR8ahD+QXU*)
(*JaZQEpMkfSqb8cZ+tnSuFT9oLoyyAN854SzP7MfHMISGuFaaopoJVPemYn4O*)
(*Fxr2cKVhN3/tfsmD/mOsiKmUGK5lQ3Uvo4VNtEZlEaxti7eOCwu1F0pej6ct*)
(*uJVwjUCynVPYM7KdQ1t2c+3wUc5v3C71qaXBL42OuGpS5sWQaRPPYPYQI40H*)
(*mT07GVWDDFRMi9B1rSWxZCtrt9zkxw9w79hNTqzcrtCrjrRqcgMyaMtux0HP*)
(*g2TfJRwd3caVtZu5u3YlLyaGeDrayv3+Oh4ONLO/IodddWW8O3OMx+dPc+H4*)
(*AS5fPU9lZS4e83R5efkQE81LibZ3wkvLjLa4UnoS66RuseTYJ3Bx4DD9qctp*)
(*jq+nLLQah1memKu6Yahkg42mAwfG91OWWEKIXSAO0hah8/yEjzyoj89jY20n*)
(*SybvE0o8TN5nX5OdyJqMKLYXJ9AT6cmqlCUUz/cg0cCcLNGZauGx9dnVLDa0*)
(*J1TDlBTxeAXzJVd5hIm2O1PtHaYYU7o8MpEM6VelISlk+SbiqW8jWjQXD+lj*)
(*UWaT88AsiBIvEi58FWRojre2MdYzZmGloil5SgMn4SsLYXIbDX1KYxIVc5/t*)
(*VVTwnTWTBANtKp3mkSl9f/3iSMZjg+gST9Qk/S7HRoswlak0zjFlcO481hiZ*)
(*cX5xMnbCfL6iTRqSS+dLTj2aEsnj3AROBi3kSqIf1zLcCZP3OEgxlWI1bQom*)
(*k+NNlaagIf+2VldirpoSavJ4hhQ9ZVW0ps1Ae5oqbrp2pHkt4u2FV3z5CDWp*)
(*NXRlVXJvYpPiWleftz3Vc1RptFQT76lGm5MOHV7CNbEutPlZ0BMxX3KFNdmm*)
(*amTPVqXJwYRmpzlsFgbodhdfbatDltZ0srWViJP6FGgqES/1C5V6FKhNo0cY*)
(*bdzBjJcNRfy+povP/VV8VxPPzcC53PMz5mW0Pc+TfXicGszDjBA+VSdyP96B*)
(*fRKbZ9wNOSu6dzLAiwkrW056Co+LBuwWj3zA3pn9oo87baw55e/JPfGBx4RT*)
(*JtxsGHSwpFh3FmVzZpM7x5CDFSUU2dlQ7uZIsZsdA0niFyOEHWyNyTDV5kR9*)
(*Af3Sn7IttRhLDuBgbTq3V9bzYKKV0/3FXBiu4EB7Fr9f385Enj+HUj3keF68*)
(*DHXkpacNL32deBjqy52sdPGsXiw2MCRUW1cx52JyvFmFsRH1pqa0uzlT72BF*)
(*k9NcltnJc6K1y4XzPIStraS9NqREszExmMP5KRTZzKE1LZLcIAc65Fy4S9se*)
(*bYrjh8Od3OnP5fnKam61F/DtRCdtcg7bg9xpjwtVzI3sKcinKSuHoeplrGnp*)
(*Y7fwloO2Daaq0s9nB5Mf08gi70LmqjrjbRJNkEmseJwI9Kfok2qeyL1VV3i3*)
(*94niGsJYxQA7+rYwUNFNrncCTjNN5TPe0l8DSTBbxKq0YfmdQSRaBnFx2xEe*)
(*nrvAH89f8cfd53RGF5FsHExPfCfV4S3UpvezJL6dwvLdKGslo2xUyjTtPKaq*)
(*p6BnWshAx1menv1e4c8m/WyGUyRlQeKjSgc5Pn6c2kXFtGcWc371as4Md3Gq*)
(*p5qrA1U8X9/Kb8dW8/nQao60V7CrvZYn545x9she9h3cxWnRq4LSPOxna/Ho*)
(*6D42LmvGVV2PZJsARoStJnL7mD/VmGhdL9HgAOkj6dSHVSnm41zd8ABTJTd8*)
(*TRfhONuDgsVFxPstwlm0xdnYiegFYbgb2ZETFEdvQYVibbNsD3fK/RcSJXk7*)
(*39WcvXV59EgObQsLFY+So1jrcnJM5+Q4hGzxc7F6k2sy2uCurMl8idl5U5Vx*)
(*n6EufJ+rGP/UEhmnWK/bV3yno5krs9WN0FfVwVTdgAAbdyLnewrvuQlLGUhd*)
(*NXHTtma+nCdz5dnynCU+cr78rYIx1XIkK64Ib9FCB3V1nESLsqxnsTHdg0vL*)
(*YrncEMWBAl+avQxxE8/WHGxNmpEqLeam7BXu2mhtx5mkZBYZm1IUEUl2gA9l*)
(*kmdvSNyeXziXVRL71yOceF4UhK/0Z/8ZU4SlpoonnSb8qYeZ8K2R9GMbDWX0*)
(*Z0wlzHEeJjNV0JwmPmKGKgt05hInjDq590tvUROd5V2SnxazxCOI0axsCiyN*)
(*aHM1pUxfmQFXXfqd9RjxNmEsVLglwIYSk5m0uBpTPU8Lb9HHXN3pVM1Vo3Ge*)
(*JqeKYhjwMqPb2ZAygxl0OepTK0y0L8qTs4tDOCZc+DBnsUJH3hZl8GXPWl6W*)
(*JXBHYv3n0gCex5jwPMqI1ynzOB8+l5eVIVzNcuNZVSDn5PmHyVa8y3Dl38ES*)
(*PhUkcE68zx4LSzZo63NyviNnnJy55OHKXdGJS35unA9046ivM2uEpza5OzC+*)
(*UJgsTHKFmyt7s7PJMjYQ3zKDbDtD8SnpVInWVi0wo8nXht5wN8nLydR7mdIv*)
(*7HSxp5hdNYnir5M5P1TGmqJQDnVk8M/1bewrC+fQIifuLHLhqb8Vj11NuLPA*)
(*lCuiWVcyFtHiZE+ErjZ+4uESLU1JMhHvZyptJLxUPW8u5ZYG8li01FSLWtGw*)
(*ifhk8uyFuQLDaPB0Zd3iCPbnpVEwz4ihkhQCTFXJsFYhxXAqZxoiuLY8jiv1*)
(*MXwzJjmnKZ31wlgH8+LoDnBlQ0EKa0py2NhYx7mNG9nW3U9/SS37hyZYUdaO*)
(*vZYbGRKHlRk9NJeNEe6Zh6tZDIH2S2jJGcFJw1fhFzfUbaM5qZ20hVmE2UeT*)
(*HVXMYp8UYZwGmtPrWJreQGtOByuyetkq37M5X74vLI1L67fA77/Cp+/57+Fb*)
(*znXuEK5ooSWiV7HOcknZJsLTR8lrvYihRzvTDcuZplmMun456ioJBFgWcnb4*)
(*KrdHTjMYUyWxHEKadSi2yqZ4aNiyQHx2iYcHt1cP83Cih+vDVVzul890ZnGq*)
(*PYerq5axd3klDUvi8Le3IcjLGy8/PzyDQzA2NcNKX5dX58/RU1iB/lTx/jGF*)
(*dC6uZaJkgGAdN/G6sawtWYGjqjVhpiF0Zg4q5kdnC0P6WEzuCxaLi5UXNkYO*)
(*8l3WRHtHkB2XKu0nfsbZTXRjPkPlpdTFhSvu0RzpaVbct+kV/uhLjqFm8pp2*)
(*aiZR2gb4qqgrxh/4qmmTaGSLq5K64jrUZPEXf6cv8b6+uEKxPt364nLMlZQx*)
(*0zLEwcIRK0MLjDQMsNE3w8vCCVdDa+w1TZivYYKFij5mMwzRmToLMxVTGpcs*)
(*IzekAFM1K9GIufjN8yVI8n20uTGRekpUOaixN9OeK9VunCuy51y5K5sl9kpt*)
(*lFkWbk+DjxW5WjNZJfG2V9qyYJYGC2fpUp+aTVlkMJ3+DrzN9uPbKGs2a0zl*)
(*XYonz/IDcfs/vpov7OIqDDap3TZKUykRBkuX+Jwrj0fLi9CR97jMVMdw8v3T*)
(*VWiNSFTsIx+mb0tVQjVxCxYr1lFdPNeWlVHRtDta0WqmS4uROiudzRl2NmNT*)
(*oAejno4kyHcuUVGiSHsmGerTSFOfQqXpVJqslNi/yJE+S01WmOpSOF2YUU2N*)
(*Dg0tjnj7ciMhjtPBvryvzOR6sj8vy+P4sn4pX3bW8WVDHh+rXPm2zJ4PpTbc*)
(*SDPiWqENtxq8+H5dOu8Go3nT5svPXSH83hLMl/0N/FARIczlwVZjTbaJb7vk*)
(*bs9VLwcue9jzJEaOF+rK1VA3rkT7cMDPiV2+rjQZ6YrfMmbZPGt2CIfXOtjS*)
(*EuAs/SWU1mBn0kzV2Zgbw27xfP2RHlQ4GLFGGK8l0I6Pu4Y52prDow3L2VW/*)
(*hLVFkTzf3sXHPX2iJUHsDrHkapgN9z1Neehmwk3RvUv+LjwXfzwY6oe7qjI+*)
(*+loEi8+MNNZVXNcfjg1hqb0VyybHMMw3pnG+KdUWVrT7hOEhfdZdXZNcO2ua*)
(*fdxYEeKrGOdwqL+JZmm/6gXCAhpTeNy+iL82lPG+awlftjZzOSuQRkMVxX2X*)
(*Zvu5dAjH9yWE0xIfxZ1t2xT7gQyLnzgxuoknh66xe8VealM72L3qLC3lq2it*)
(*XYez+DRNFQeCXDPxtIjHzSiMnJAarGYuwErdFX/baOK8M4jxTCZTWKcyuZJs*)
(*ifOM0GyJ9xIq3BexNUf8tvigWxvWwHdv4bdf+XrrBRuy+xiIG5R43Y6HdQXr*)
(*j/7Ijof/0X3kd3zzD6Lt2IWRXTdu9r046xaTLN4wy2ARzbYp9LokK9YOqhXG*)
(*mpybkWAwnyRNQ/r8fHi3eoBXY8t5MFDBI9GseyNV3BxZyrGOSna21NK0JA3l*)
(*SZ+hpouGMIeykgbq4oe0Z87ixqlTjHUO4C4+ykZL4l5ZhznKunjNcWJVfS9H*)
(*J/Yp5sYEOUVgoevOXG0/PBxycLZJxsEqAFtzVyyN7ZmjY4yNcIaZrg6+cl7T*)
(*w/zoq8xjU3sduf4L2NJcxfamKs6v7KUvbRFdibHUBwWwqaSEFDMr8h2chVPM*)
(*cJyuTJCGHgGz9LAXTxSkpU+YriGuKqpsX1rHRFkJfakpmAqDRIqHzQmLIc7V*)
(*Ex9Ta/Llca2wWlF4HBUxyWT4hGMwXZWZU5RI9IhgsVc8zdlNJEmuyQpOUfBf*)
(*dViw5MaF1E5yylxlOuercCnDjquZVlzLtOBFvTdPm0N40RlLqZM+HX7z6XGw*)
(*pmuuKVvdPXGSdnVW05G2M8TXWI8ya00exJjyc/xcRpWnildy5n5xKJHCUYGq*)
(*03AUDQnQnImPpprkAWUK/cXTO9tiKppRGxOO9qROzVCW36+Jn+pMMk2t6JPf*)
(*s0D021HNQrH+pb2S+FI55nJnZzqtTNnsLXnBTIcu0axBK0P2iK9a5+HIYtHG*)
(*VKXp5MlxUoXl9iSYca/WnTOpNmxy06JbPOAaYy2apk+jRTxNi7T9mI4BG4Ub*)
(*tkud3tfn8LRmMe860vl+JIP/Hozw9XgFP3R686TUjG+bXPnfWDQv2n15uSKc*)
(*r+ca+G5NEl925/NDRyDfLV3I/1rDeZ/ryePFzjxetJC7sW68SPHndVoA53wt*)
(*uBhoy/3FXvxUn8nPLYXcFda4lpvI7vhgdktO6/Ryo9VjAWmGOgwnBFPrYcWR*)
(*2jy6wzzE63qyVnLfcj9nLouH2JK7mPHkCE61lAsbVPF+9xpurmrjzd5x/r28*)
(*l9frl3OlJonTwmD3Yp2Fr8QLSrnrZcvVkIXcryhgR0aKYmxIQ3w8Ga6uijXE*)
(*Mi3nUu1kx2hQBH1yzivm6FFspEPpHFOWe4eSYuNMgo2d4t5AuZMVPQGe5FvN*)
(*xXOWKsH6anT62QmTq3G3yI8nxd48yBE/mraQk8HzOBXhzHZfW25VZPCoo57n*)
(*44N82reb38+d58n23WwWT3i6d5yxgmbOjB5mSLzVTtGt6swWMuIrCfHLJCIo*)
(*H0ercDzt44jzymFT9wGac3ppye1hRc04VWlNolN1FEUWURRdSElyOdEu4XQk*)
(*ldIRlsLBkirp114cX17Bf/fO8r/rF7kyOMFgfBP5jlXE27cQ5i854Ol/PAZK*)
(*1j7FJmYcI9cu3LxHcZpdha9WNilaiRRqhlA+04UGHRe6bfxpsvGiysaTJmc/*)
(*qk2sGfFYyIfBHn6cGOTtWAt3+yu41F3K9dEWrq8dVqwLW5+UKx5jJvoqs5ml*)
(*ZIjadH101EyEiUzIiYmnOi1POMOFFJ9I+U3JOOvNJdDansGaesqSluBgZIap*)
(*5hxcrfwYWL6N6+d+wMMphbz0pQR5R6Ir+WW2hjZxAX7E+riSHLSAWA9zeooX*)
(*M1abRU2sN5/OHuC/Nw/57/Ft1hTksq4on97FCYqyRHzCEksr4Y4ZuM5QwUVJ*)
(*hVwnNxab2VDo7q3YD2U0L4+TfT1srC6jKtiPoNm6lIRLPk1PIT9IcqK2Jh46*)
(*WsJd0xUxP2fqVMynTcdFbaboiTpRpjbCpTPJWhBAvHjFJEt7UufokDhrOl3u*)
(*pqzyNWel6+SYA1XORJlxO20+t1JteVq6kAdS3rZGUD5bvGKAB5+bmnmUmcvj*)
(*rDxG5TysKlxGeWIOGd4SWz5zuB1vwPdJ4s1mTeVBgfic0iDRqSksmKXEHPGV*)
(*9uozhP1UhAFVCbAyws/CCMuZyrRmJymuYdmLvliI1ixUm8FgyiKerl/Nvxcv*)
(*c218O/fWH8B1mhKpGpN1ceey8MahgHnUiDbWiddcI97v/GJfdvjZU6GhRK+V*)
(*sJfxLHJEry6nOfNvXyqvCnzoVZ/KmMY0Ttrpc8RUh4vOVjwI9eSC+KLLwjlf*)
(*1nUIG42Kd0nmRG0C326tEa2q5vOaKH5eGcbdUkt+7Arg67V2PvdE8WVTIb+t*)
(*TOdNSyhf1ubwqcaXj7mufM5149/aGH4rCeXXlgS+WxbHh6WR/NiayMVEO05E*)
(*WfJaXv+yfTlfT63m+fIcDmWFMRKxgIklEVS4Wkne1mWxiQ4l881p8HAQBram*)
(*Vdr6XFMdG9Mk74SEcKevl2vd3WzKzGJLTi4ji+LZVJDHt/t3827XVr5ePMGt*)
(*jmru1WVxKdGHu9ELuO9lxTNppxvuNgq/+rphKduTUxTrq07u4+wrzBSnN5si*)
(*S2t6vANpMHGj3tCBPOnr5bMNqbOyozMgmI7FixXrbg1niAaEOiuuew5I37w/*)
(*MUGDXwBdTi50zdbk7eQ9iiQb3qQ4ctZVm7shNjxN8OKErx3X5Le+bqrgdW8b*)
(*X48d4vOOXfx97Ax7xA++GN8hDLRU2LJWzv8J+nObKY3OoyarlppCeSx8VJHf*)
(*QnNFL0PLxjm75SL7hg6wvXsrewf2sKtvO9e2XaQgIJN8/zTyxPuFWLrRFZ/B*)
(*YEQch3IyGA1ZwM0V5VwbrObFljGON3WzIn4ZjRGDlMbuIDJyHT0737JbNKty*)
(*zV1iSndj5dpEgGc3geallLhIXcxSaZodwlrbSMatPBkwdWCtxO7TllYOLEll*)
(*hbPkF78w3q7o58PYEHd6GrnQWc2zbav476Vow4sXXNiwUzGeKcg6gGDbCHwt*)
(*w/EyC8FdWM15lj7FvkE0x4nfMBC+DYqi2NMXH/E43rNmKvZ7GyrIwk5NhWjx*)
(*eM1p5fz3Dl5f+J6CmBqKk0pYml9FbmwSmZFhtJdkUZ8eTnNWCANlcXRmBBBr*)
(*pU6hcPebfWuFMc/x9c4NTjQ30xEZQaW36G5kCEVuopVWVopr0QuF+Sbv0e1Z*)
(*1sLqwlJurFvP0e5eVpeVKsa9Vob4k+XmRIqzNbHOcyVfeLCyJpOJ+jx2tpWy*)
(*c1kRFwdbuDPayf3RLp6N9XCteSkvVnRxv7WR94MreNjcxJXiTG4XxnCvIJQ3*)
(*tck8LIri8mJvdi005ZCvFb+3FXI60lH8jre8FsDHpnjFNeg4KZXK02lSmcFe*)
(*yb/DoqseanoEWzlgNHmNaPY0niXp8k+uAau1p3IpxZTdOe7MF71w01HBzVCD*)
(*ebNm4KCrLnlJkwQfF0Kc5mGoMo1lGYuxUFXCUV53VlMiWmK0LtCNjYWpnO1o*)
(*5ffjF+H7P9m1JIujyYn81FnLIW8r6e9zOeMnuV5tKpvttbie6sdu/3kUq02h*)
(*Xm8GNTpKVM6cyrVYe/7tSuen4mB6Zkxlu6ESJ2zUOSznaDJ2znqbci7clmPR*)
(*TnzZt4Kvt3dLfjnE/86s5q+T/dzuDObNcDg3lzpxt8qZD+3homsFfGxP4If+*)
(*TD71pfPjiiz+Gi7g954M0UVffigN49/ObH4qD+NhyUKe1Ptxt8KDT70JXM13*)
(*5ZKUH0eyJUa7+XKwl09rlnK2PoXlAdb0xk+uk+pMoZcNpV72FM4zoUx4ssnN*)
(*mVILCyqsbVgRGsGu3EL2FpWzI6eEDWm5irUFV0QmCGtlUOG0gN0VVQzHRXOk*)
(*KIWbFYu5kODBrSgn7viY8zrCiYeBcp7DvDgZE8FyOzthJn8WCmvGzNIhWEmZ*)
(*JeKVs9U0KJtpSonaHJKFRdNUhI21tVju4cqJniZODDTyaGMLR4VHNy0OEr31*)
(*J8d2HjniGQcdFzCgP4tP6R78kWnPx6i5fI6bx00nTe55mXA7yIZ7ib68qkzj*)
(*+956fl07KHngAj9t3MCFylper1jF6+EJrrQPsTKjiB3Lujmzfju/vvrAb9/+*)
(*zJunb/nrl3/5+f3PfHz4jsdn7/PoxE1u7bvA+Y0HOblmN3d2naPcN42ORVUU*)
(*BSaR7ip5NjmLleGhXCpJZ6vo952uHL6en+C/b+5zrqOHoaRl9GVtoTBpD16B*)
(*o8SUbCakaJz8zhPUr7iKtUM5wV7LiHOqIG2etLVlHE2mAfSbe9BrbM1WLx/2*)
(*R4Tw22gfl4sn12v0Z4NoxbOhYc401DCYFK6YB3pz8xj89aP07e95c/kOaX7x*)
(*xLlEUhCaQ15ILglO0QRLnjCR2DtQWUmu+LFEXV2qnEQPHO2JkbyfIjl5OCmI*)
(*/sQg4aEUjnUvp8AzkAJv8UXCoEnOsSR5RJLiG4K/lTVBVib0FiaxSvrD0mh7*)
(*GmNsaImcR56jBiVOOuLhTekJ9aI3NIA65wX0hEXQGBTI2pJ8aoXLJvcOMBcm*)
(*MpY6hegZsMTegWWRcZwcGOLJ7r3sbV+OjzCUufim0DkGDBakEmysLr9DhZ60*)
(*YA60ir50l3OxV3LUhm4ut+RztSmXp/Lc9Zol3KlO4VlDFg+rUnhcmcJp6bPX*)
(*EhfyNDuYW0m+PMgI5UN1OjdSQtngYsov3dX80F7KTz2l/D5UJgyRhb/ULVs0*)
(*IE9YqUz0p1AYKE24JtnMDD89XTxVprDUaCqfU7T5M06VDaIfP5Y6c6PAiwD5*)
(*zELhHfvJdcZNDXAz0sVilgo5EYEk+S7EQl2FuuQ4TMQvOgprOYp+BWmp0Bru*)
(*yTI/J8YSojla0sCr7jWMOHuzxs6ek+Kz78V6cV409kaQNWd9RG9CbDke5kiX*)
(*sSoN+jMYdp5Dn4MBrXrK3Ayz5i/Rqp/z/NhvrcJeG1VuxlhwPX4er8r8+aY5*)
(*jhcNotsl/vxvexO/bGoUHRnm86YW7ovOPe+J506DD8cyxS9X+HOhyJ/3vfmc*)
(*KwjjbLF8rjaJEyXS/5qyuFGfyg9DtewNtWefjwXfNibyw3AK95p9+HltGn9s*)
(*zOZBcxBXKsSHNYXxsj+Vb1aX88OWZvaXhNMnmtkVv4Dlwh/vj29QzA2cHEM6*)
(*4O/J9xOrudPeytOBAd6vWcv71ev5evI8X89elb8X+G7rHg6U13KqoZkHo2Mc*)
(*rq7jQFk+9zvL+LCikFvZ4n189bkXZsLTMHPuBJrxMH4he73t6TCdzaCHOzWm*)
(*ZtSazKFKV4tOYwPGbawon6FGlbD6CktDyQHKdFjp0+tpzbr8SJbYzWRtlhsd*)
(*/nr0eRqzKz2Ug+Jbh2ICmfBxZqWhKt8tNuP3Rfr8FKHDT1EG/BBpxMfwObwI*)
(*N+VFkjNvCoP5tbuQv8Ya+XJgnD/X9XIhP4Xv+zp41dPBo5EV7FhaztnxIT7e*)
(*usinV/f54fvXfP/5LT/98omv//uT796+5odXr/n89CnPhMnvnDjOs0sX2d7e*)
(*z4q4UsaSatlZ26dYg38sPlkxvvdJg/jgyPmcqQgRxh3lv7dXxU+3szqvg9yQ*)
(*Juprz+MePIRb2HJq+0+TUrKJgto9pOdMUF6wnjifMkJMo8iyj6LWJYxO9yAF*)
(*U/aJlmwL9+NDzzLeD3RypLSCU02tXB8eoMLfna7sGHKFRw9N9PLwwmGuHxcm*)
(*XDmCobRz4Dxn4p29qEtIJdnBnb31jVTbW1E6WzjbUFvY1ohltpP3bK04WBDL*)
(*6VrRqMp4tuaGMCrccWxZiTBROD0JKQynlFHpl8DSqBTFNcHtLS083buV4z01*)
(*XBmpYSjZlePNicLrSXy9JHxUGsO3azvYnhLJs94udiRJ/vT0oSFwco0hN+mT*)
(*wmJJiQqu7lqSJqw3h2ADIwKExcNMTKkMDSPKwoxE+3kESpzH2ZiT5+6gmE+Y*)
(*qadJ4Rw96h3MKDHTVcz76fG1Zn9uOEckjh50ZMkxc7jZEMPRPDd2JVvRv3Am*)
(*lfpTadZWplNrJh3aMykR3hixNWBniBPNc9UYdpvN7nhndic4cSY/kOtV0Vyv*)
(*9uP+UuGxhnj+7s/nfUUUZ1J8WJ8ao7if7Sder0l3Kt9Gq/FXxAwOa03jtxwr*)
(*6YcLJR9PwXfmdJLdHBXzwifXcfAzNaE2aZF48DDRMXXGqsvRmxzvoDQNPw1V*)
(*Eow0WZ0Www7hgsNlOayLjuFUdi5vGmt4UZ7KtShnPmb7cs5Di/22otviP/v0*)
(*prLSRoXh+TMZWqDFKp/ZjAXMYVPAbD6UBfJPfQR/N0XxXVUgn+Xx66ogLi6x*)
(*53KGMxcyXTmaYs/+RBs2hBoxETSb1X769DjOpM1KmRuF3typCGLMezadTro8*)
(*6ankcEkyVzsqOd1ayoHmQnZNluUVbK7NYU9tFvuLEjmVH8Ou2PkczbLlXpsv*)
(*D9sC+GZ0EWeLHNmbZMaJLGcOp4kPrZb6DBXzcmU1Q9HCPENVNIWIX1vdwgU5*)
(*Vre3DTuTQvll/SgfRnt4N7qCb9eMKXTrp207eD66ioeDw1xr72RPQQG3e3s4*)
(*39LInqJcjlZk8nhFAc87E7iYZs1ay2lst5jGsflK7LWczmlvXYaNlOkxUaPR*)
(*QLRHeG61swXbRY822xmwbb4BJ8PE24c5sTdkLjuDjdnkL/mhJJL7Y9UcaV7M*)
(*+dYodmU6cLrQl5MlYeypiKU9yJyt4dasnjONT0l6/J6kyf9S9PhnsT5/Jhnx*)
(*KUaf75dY8XOJO5+q/fnUHCO5MZ0vu8WPb2rj6CJPPkgu/rJpkPsddXzYtpov*)
(*N87w+52z8Pc3wiUf+Ofn1/BF+OTLr/C/X/nv00c+37zKd1cvcm/PNh4d2MVE*)
(*WRVt3kl0+WdysGGIS31rOFYlflqY8lhSGO87CrlaF8cfe7v5enknt0YGuLnu*)
(*KMcn7rBq7UtCUtajb5aBnmkySup+qGgEUdW4D9+ASgJ9C5kYPEh+VD7NyYU0*)
(*Ry6iLTiERuHg8ehgbrfU8HZlH49WjnJ1YAW3145wcaybk+PttOZGUyQcXZcb*)
(*R1LgAjKCvcTHJUuMWxIxW4/N0u8H4kNZmxzGqhAXSvVVqJmjTo7GdIZ9bGhz*)
(*NOBqg8RCaxq3ujI5VZ8gmuzG2fZiTi6vpTsmijI3P55tPcjW2mbGistoiAhj*)
(*LDeZkdRQnqxt5lpHNv87OsDTwQLWRtrQZKfBKj87vuzdxNej+/lj3QaOFpXS*)
(*Hh6u2DsgzHA27clJXFkzwbEVg6SJnvrrGRMkHtVR8pmbhhb5Af6KdV6GS4uo*)
(*jgkXbVtE40Jv9uYUMBAUwurYKLalJ9Eb4M6xigzGYt3ZmipassiZDonnOntl*)
(*urzUWBOtx+5Uc4a9NFjnZs62hc7s8nVhrTDVsIMeYx76jHpoM+qpTZuNMvWm*)
(*01lqqkSjxOvjOnceVbnx5VADX8ZzeZbtwNk4S/oln6ZoTSVGGGrYVDQqVfpk*)
(*8kyuWk/nm0Q9fileIHwzlTDVadiLl3RTV1PsF79AYxbpC9wVezAvEA/enZ6J*)
(*+bRpzJs2lQUzphM8cwbVLraMxARxo72Gh72VnCqN5ElzgmhmCM/ybfilzplv*)
(*ik15W2TM61JTXlZZ87Daljc9wj4rY3gt5cVIDM+HIvlOHv88FsengWg+dERw*)
(*vdCdCWmbDuPp1IjWJYlWpgsztulPo2vOdHYH6omO2XE01pDjUXO4m+bOX71l*)
(*HE4M4F5rDb8e2sXXu9cV1yX56zv472f++O0DP/z8DviDXz485r9vJ69LXOR6*)
(*Zw5XauVzjd686Yrk8bIg7lT58mVLFa+a4vgyUcuXHRKje/rYl+zJ2fI4Ltal*)
(*cV363Z7COK4vL+JWYzr7k7wY9bZgzF/0JFR8lrcjg/6u3GpdyqnKImmnBh72*)
(*t3G/v1n64Faer1zOm7WdfNjQzJuxTJ50BvK4xoGHhcb8uNSKX2uteZSkxbPM*)
(*ubwscRXv78X6BZpcTV/IlWRnxbW+Z0scuLvInIvxxtzMMeNW4VweVzlwLd+Z*)
(*p62JfNzSyIsNNaKJ3pIjnblc4cOuDNH9On/aQjXYkajL6biZ/FxsyM/pGvxb*)
(*ZMifufr8W2rOhyQdyTkmvMq34E21K2+a/HjfHc0/m0qlPRrYH2/Dk5p4vqxt*)
(*44+RTtGVFv7ZsZnHQz1yzFU8276O704d5ok8982h/bzatplX6zfweGSU16vX*)
(*crG5iedjY+zNr+BR72ZO1IzybMsJHm7Yy7rUPIaDJac3VPJl8yAvV5TL91bw*)
(*z/FNPNs0oZjrc2DNRbpHrjPLNB01rRgc3KpQmRXCVGU3ps/0xC24grzqcXIr*)
(*VlBa1UNpfh1Bwv9mKjMV98QKXJzYVpjHy4kx7q7o5v3G1TxePcBvZ3Zzd2Mv*)
(*/947xtUNnTzaN8a+rhrFfNbHG4fYW5bO0fJktid7kyS5fpXfXLYnOLPcSZt8*)
(*/emkzBIvY6vJqih7no9X88v+Hr7f187Hve2839/NxZFK6sNcyXWzI9bUVJgo*)
(*hWxnD1LtnYiePZvkuYb4qUwVb6lOvqkKB3ODuFyTQLeLLp0OuqTIMSeCPNgk*)
(*XDHg4sJSazuWR0axqqRUsW/uxqX1dKXm0LI4jVQHL/SnTM5lUMJ4mhKmSip4*)
(*i6ZpSTzNljawVVOlKiqaNRUNzJXXJ9fa9NHSo9TXX3E/J19ivNrTQXEvqdxe*)
(*l1TdaaRqT97LV6LeUontMaYKXtgYZEWHhTp18vt7LGcwYK3MFtGxI9HC+aI7*)
(*B6N0WOupQpPxVEo0p/Jnl/iWEifuZtjwZWORaFYGm2yUqJX4HvKdQ535dPaE*)
(*a/Bd6RzeS7885a/M7VRDvqxO5VZZADG6yvgbauGlOwsL0SMrVRXFHqYxTk6K*)
(*6+wBZubYz1LHcoaSYh7HAjVlPFSn46umxER+POe6cnm8UvxMWyRPlwfwqt6Z*)
(*i0mzeFE6mx+abXhZY8pf44F8O+jP64FAHvUH8HQkXJgjjMvLPbnc5ctdeXxp*)
(*mRdnq4UVMmw5kWTH7Txv8ZBW/NiYxOviEJ7meAs7BnEzxY5X5Z7cL3BQ3Hv4*)
(*sTqBt6VLeNNax73OTl5v3c1/r0Wb/vxTcr0U/uVPvvD+rz9EreD3P36R/4mO*)
(*/f6Wp5NrfI1k87Q5jLcdcTytD+HHnlS+7GrlYooLr6WvXF7iw/2iSC7nhEn8*)
(*9PC/Td18HmviVX81L7qL+WXVUq4UhNBjr8EaX0sOpQXS72HB2jB3nvU3cq2p*)
(*lKviA07XZPFoRR3/HBrnn8PjfL2yg7fj5VLXDaKH2Tyql7ZaasqPy8z4tko0*)
(*pMGCf1f48KnBTfxYJO8bQ/itJ4lfWsL5XO3Jd4UOvC+04rtmJ9612vK6xZJ7*)
(*FSZ8XB4kbZ3O1xOD/LyvU/TSl7+2V/PX5gpOVnpxbjCO9RXWohUGPGmS9m2y*)
(*4U2ujvQPY74vM+Xf0RD+bPHgr54gPncG8cNIPH9tLeD79Xk8XZHMd2tLOZnv*)
(*y/fDZcJbQ6Jf63nVuVy84h7+PrKXb3Zt5s6aYR6Itpzr7+blls3cGhzk8649*)
(*Csa82dXDb/v28d/LF7zftIPN6XX0R5XQmVJFeVgq5wfWc6ljgCf9A3wcG+DF*)
(*aCvvJrolv9zifxcukmjtQ5hTErZu+UzXDGGWXgypWWuJTuxnjt0SbD3zmKbu*)
(*SPCSRgKTKknMb8TSwQ/rea6YaBvjPseCGLv5ijUvT7cv5/N2qW9XKx83r+SH*)
(*fRP8cmwzb3aPcHlkGXfXdHKms4YjtQVsyYjhXHUGG8IcuCKc+rI+lk/dqfwx*)
(*sZS/t7UJW1fzqHMyDvJ5PdbAP0fG+evYah6urmXf0kW82zegWL+4zM+BGPFg*)
(*KQ7zSbZ3JsbcDhe1WXjOmkWEvjbZlkbUiZ9cEerEI+H3XzZKG/ZViY/KZEuU*)
(*sFBKDE/bmyR/JrFxcTIZNg60LEoh3dmTRTau5HmFUB4cp1jnf3JPwfGKFrqy*)
(*yqWUUhYeh7+xOTpTp6EnxWyGKpYq2sxTM8BSVUf+PQt7dV3CLe15eegIuR5u*)
(*wqXBNAV7UC0cVeVsSLPHbNrc9IVNJdd0pnFH/NCRVHuOJFlyLt2G04km3MwU*)
(*PskTpgjREM8Xw9ul3uwP12HQdjrPIkx5GG7G0wRHboaY8THZnh9LAlntosOm*)
(*OCfa/QzYKFp2sdGFU7U27KqyZ2ulA4/XLeHw8nCqElyIkPiK9LQlMcwTnwW2*)
(*WJsa4CS+3M15PjZWpni4zGehow0L7cxICvMixtseD3NtSuMlz7jNIdVJS3zi*)
(*NHpCdLndFMDzVl/eNC/kYoYxRySPf9may9ez7Xw92c4vu2r5eq6Pr9fH+O/x*)
(*Fr7eWM0flwZ5tamERwPJPG6N4FOH5PLeBO4nm3MpUJNL/pq8ybQXvSjlu5og*)
(*HuW78bktjhtprvzbV6oYt38xP4s1MUmc6RjlzxvP4LevwlG/8M/n35j8749/*)
(*5am/4OtvX+C7H+DzW37bNcz9xkX8vDKX122LhLWljlfW8ddAEW+q4nkgGvWk*)
(*QLivNp1Xlak8KIrjdUM2O0Id+GbymmRrDicXu3O3OJzji9w4Lnn3Q08FVyQH*)
(*f1rVJpqxjX92rebTum5uNBfwpK+aA3lh3GjJlDaY4I8dy+R4k9f0C3nX7sKf*)
(*Q978u9KDfwec5bOiOcezeFxizo1cc67lzON6tg23syz4oXEhP1TN5+92d/Fk*)
(*kaJ3wjpbRWfWBotXWCqs3cFve7q51JbOxkTRsqFs/thcK1yXw51tJTw+IGV9*)
(*LG/Gw/g0LPUpseZ0ymz2RWrypM6La6UuPO+SeJwo5OFwhrBHsTBSAx/3dElM*)
(*D3CsOoUPqzv4eukw91f1c0c45ebmtVyRcuPgDg6tX8me8SE+3LzGi7OnOLdh*)
(*gi9Pn/Dr7VuKv388uMPLs8d5fOQoNyYOs7FuJbeP3ufI5pOc336WQ70buNy/*)
(*jgtt3dxc0cOT1SPcGRrgbEc/NcHpJHpmoKzmzEzjSIVuzbVORE3TCz2TYAws*)
(*grHxWIR7aBbOgUuwdo8iMDKD5e1jGOmY4zzHhkz/CJxnahKipcMf+/ZK++/l*)
(*lx0bhPsqOV6Xzz+n9vDNznUcrJr8/b3ChMNy/mqkz57gbXe55MYMvqyp4H+r*)
(*ivlxoJifRmv4snOId31L+XfHWh4sX8rnjaM8HGhRzEO80FnLxb5lPN20irUF*)
(*k+s0eNGRkMbGqjbqF2exxNOfmthEkuwd5DV3Amaq4CaeIkRlGsXmuiy1n0uT*)
(*oyUFszWptDKhzNKETNG2OE0tQnSNcJulJ97IBA8tYyyV1PHRs8Jdw4x5M3Tw*)
(*0bfBYJoqDuqzibH3oDu3XLHf5Vj1MtrSC3HTNGP2VFXsVA3wM7THXFkLQ3l/*)
(*oKktC3QMsVZRZb4wjIv6DHy1VYTBlBXrrue5GLDYYCprIrUYdp/GRn8Vxp2n*)
(*s9ZJiU3OynSIt+vWmcrNZBsuxJuzyXUmvXOmcjnEiiuR9hwLtOVpfjgPUtw4*)
(*4m/C5aIYztSnS19q4dHeLr67OMCPd1bxx7t9fLi7jt/urub9uX7e3dnD8wfH*)
(*eXj7GGdP7eD4iZ1cuHySp6+fcPbaeU5fOcOpCye59+gOb9494d37R/z04wt+*)
(*/eEZH15e59ntU4w2FbJ/oJKXcpzna4p5N5bFK9Gbb4eXcK7IjR/kud+3t/Bx*)
(*bT13u/J5v66VZyNLFTnozxMr+flQH7/um8zRUrZV82VdvuT5VH6q9eT3Wi8e*)
(*LTLmU5GjxPISfmkK4XTUbP4eSONSuhMvWxfzrLdUsYbK5D7SQ3m1bGgc4MGe*)
(*szw6fIlLu09ySh73dqyjY9koW0e2sKdT9HFijcT1ev63Tfzetkbxo/n8OFjI*)
(*5+48rqb58bgwkm+WprHD1YQ3oj97vKw4l+DN04okbuZFCMskcLckhoOhdpxf*)
(*7M0OHxs2CDs/rMrmdIb426HJsRebeLNiueTIEdHCCfGpJ7hWl6FYL+FpdxF3*)
(*mhbx+7oC/l6byutl0k4dbvzeIxo8slDYZREfGu3Y7K3ElRxLfl+ZohgXe1X0*)
(*6m2tM49yjPmp3YPfx8P5eixffLU/n4WNflyRJMftFt85xtdTcszjw5yvFr8u*)
(*HPzfw/389XAn391Zw8NthZxuC+LYUn8ut0pu6Mvi2VAhfx/s4+ryDPZXxHGm*)
(*u5CJsjgeiq5/OLODA911ir2NtlYWc6q1lfbwSJY4OVIWHUVrbi6rljdzeNtW*)
(*Tu3fy/5Nm3h46So3Dp3g3JadfHPtNt/fusd/33zH4/PnGGlt5uzu/fz27GeO*)
(*b7nAh3dfGVp5gBsXP0zadgbz27m2che3V2/hv2ev+Pv0ZTblLSVYywlbdWeU*)
(*lG2YZRyKndsSpk7TIz27lYKiNnleFzV1Y+wd/dl38JK8poaurjVjI1upK2lk*)
(*sL6T/JAY8QrTxSfMpDs0jLH4WHYV5XC1ZzlHm6q5PzHK5aE+1hfmM5yayp3R*)
(*US4ub+VUfQWnKtJ52FXI875cbjfEc1f4/3J5PFckn50vzxL/2svRkhKF5z21*)
(*bBm7K8u5NNTPxrJixfpZaU5uuAnDOKjoYjRdnTj3ECLdAmjOLiVxgTfd2ZP7*)
(*HEsbl5dyoqWR7YU5HKouZV1KPJszk7nR187d4T4OLa2g2tuLMv9I1lW20Zle*)
(*TqS5KyFznMjyjCbK0kuxBqqXvj0WypNzlA2JnLeQUCtXgswcKA5PpD2rjAgz*)
(*F3K9o3DRMMZcSUP0SRcb4a3JMaJWatoYiY/UnTYdE6XphJmbUBkRQH1MIMf7*)
(*mzi5PEdycDy3qx15UOPOhWxbntQG8r5N+CHVlTf1iTwTj/KyTmK0bhGPqmL5*)
(*dku75Lwh/jq/k5ebxK8cGOLHze2SH0Y5uaKJOwe3cG7PBGf3reTk3pVcv7Cf*)
(*a8e28nz/KH/f3MOvT07x5Npebp7byZ2rh3l0/yJnzx5WzOfcJYy/59A+tu3Z*)
(*wenzJ7l5+yqnzhzk2vVTPH9yjRPHdrBH8mlOXhJtwqsPj63h44lR/r04xo87*)
(*miTX90sO3iBstYHfdwzzfLCFe92NwlgbudxYy6fxfl605/OiOYWfh4slZ1Xx*)
(*z3ARv/Vl8mtnMv/rT+VpgRsXYox4kj+fP7oi+HcwVnhzLh8bPNgWq8mOJk/W*)
(*9ifQ3pBCZXE6G1atpq6gmqvbj/Hm9G0akooojS0gO66MTcN7uX34BmdGJzhe*)
(*W8HnDX18nljGiaJADqQvpN9VmwEHbR6UJ4guJfJHfxV7RIcm2eqh6P/N7DDe*)
(*N2fxsGLSOyZzrzROcY/hSX4KJyMDuJQcz4/d7dwuLeJJQ4No4AD/bNnCP9u2*)
(*8Lq3nU8re3naWc3HkSb+2NgjXqKNP8eqeV0fxb0iZ84k6IkWq/Op0YkvE/H8*)
(*PRzFT+LfXraF86wthu8H07hf5c1PvdG8qVvA6WRDDiZb8m4ojcdtwXwcSOSF*)
(*aOD3Q9W8WyN8d3Yz321qo9lRixZnI24OLuPekQ2c3jHILmn33csyWFO8mO1L*)
(*CxjNSpCSyKmeVrZK22xuqOXtmVO8PHeWNa0d9FY1smPFWlrSKygLSaMmJIf0*)
(*ybWkF4RRGZ7MWE0723vHODqxh1VN/aT7J+Bv6sqKvCbWVPbQm15NhmsYCfO9*)
(*aVpSQFNWCVVpRRSn1VBTM0xqaS/xRb3kVa0mL7OX6pTlZHik0p9Zz8HWlWzM*)
(*X0aayUIspmhjMNUEjVluTFU2Q1nVmOnCFFOmTGfalGnMVFKlKrtYHk/B29aN*)
(*ltIGxjul3x86z9rWAVZWLiPHww8/TW18xYN1pS5huKiA61vWc0BY7vrurRwZ*)
(*X8mnu3eZaO/m3NZ9LJvca61iKRcm1in2DVkibZkhfSXOVIlEw+lkzlUhUn0a*)
(*kRoqBKqrKfb2nLxONPP/yuT8W+1pSjjoGWOjMxedGZpoKmmhOm0mBpqmaM00*)
(*wMfBG2t5LdLRE2dNfWyUVbFXUmbBjBmEaWvjOG0arsrT8Z81kxRrc5LnWRBt*)
(*MpdEOzdi53kQLm2d4xmjWIs/bUG0lFhSFsSQ6ZVIjG0QEfN8KY3IIM7BXzHO*)
(*LcElkEUuvlTEJLKyqoZ4FzfmiDYZK6uIVs3AXE0DN31TyQ06ondqzJP6BBuY*)
(*EGtihp+6OuE6WsRozCBfeyo56lPIlhKnPIVIKeEzhA3lb56pBhmzZ5IsXJYi*)
(*702Vsq2nhidndnJ+52rG6nP5f2z9d0xV2Ru3jZuYkJiYGGIIgUhAIgKiogJS*)
(*pQhIr1KULhx6771LR2lSpfcqijQFO/auYxl1ZnScccbpTlfH7/UuzvP8kt+b*)
(*vH/c2afB2XuvdX/uz7XP2mt9uDvPy5OCtb59zIeXz3h5/y7P7t3hpfBHD29d*)
(*5vrSBU70dzJ4MJPPJjr54/Or8PMz/vrmITdOjzM32sXMWC9PH97h2tWLXBHx*)
(*4LO7PHh8nxfi/716/ZwnT8R7VxaYGOlmbGiQR7dvMD/cyYP5fh5N1PFiqJQ7*)
(*tfFcEzwyGufCiOCq4Thf+iJ8OF+YLTTsIs872oQvOMG1JB9O7zdmzteYESct*)
(*xly2cMrPgJN7t3Eu0IRRu40MO4lwV2dGosdU+A4GfDbQt0+ZI/6qtFQ6I4kx*)
(*xlF4zOTsOFTVNqAt+oWazBo8NumR5uyHxNQV5827yfNLoD4+i970TMrsbaRz*)
(*BU9GOlMrmDxSeSWhCiukv/Gcj9nHpLc1WSqrpeMvMpVlKFZfQ6aKDNFyK8jV*)
(*XE3e1jUcWC3aRHYlpRuUSJaTJU1BnpLN2hRt0SFXawe5W3VJ19Jm0D+AFldH*)
(*igVjt++1ZzY2hBv5KbxqKOPzgxlcTxI8N1zG93WhzO3X5Lhg/QFXFU6FGzMv*)
(*mPd6jtCq/iJeNCYyFWZKm52K9HfhWYmRYJAEfuvN5+FBb87EWnBKYi69X7PS*)
(*djtt/g50Bzty2M2YArPNROmpcTA2iIr0KMrDPQWHJXIoMpiGpETC7e0Id3Kh*)
(*KbuQ2swiqvIreHjzqfAlQ0iE5keGZjLef4rR3lN8du0ll47fJGFfElOtU8x3*)
(*z9BcUEukezC9tX0czqulPP0wF8ev8PLSc45VD9JT0MLZo9OkeYrvDsvmQtcE*)
(*ncIHP3/yG/nVw8w8/JXwsn6aJ27T23+dOO8MHk/cpCU4g0bvKNJ32JCp70SR*)
(*c5TwJZtYuUKVtQr6WOzei7ycCrraO1kl9MrXwQVTDS2i3by5Nn6C7+884Y/H*)
(*L4XXvsTppj7pXMEZjh7EWSzn+DZsNm2W3qfnZ2PDvbMLnOju5PLcLIvHp2g9*)
(*dITTE7O0VjYKbU3k1OAwY401hLtakOhtQUOiJ1cED74aquKLgSNCU6NYrDjM*)
(*SPZB4RU6GSqokK5V7rJNH5P1m9CUVWGL4hZMN1vhYuFLekQhVlvMcNC1oiA6*)
(*m/zYHLIi09hv7Uqkyz4mDtXxcHScfGdHbNeuwVBwmERbCyvx2FJeFjsVFYxl*)
(*FaTzqGuvXIOZnGBcDT38lseeiz5vq7FLOi+Bk7Ytluq7pHO6p3hKKAiMpsAv*)
(*VLo2c6bwfJvWyrJxzRpUhM7uEDq1QeiVptCo7XKqbF+7XngrRbRXyQtPqISx*)
(*qAfLY+dDNm8T7eLOCYkbHfbbqN61gR5vU45FiHwPd6UzYPke550c9XeWzmuS*)
(*vEVNul6gg60NWYnxVGcnCm1cSYipNjN1wqsN9jA9MEBqbBJRknAaqys51tfB*)
(*hdnjwqt3ce/CArP9Hcx0tHB+oIeJ2kMcb6jlvNCynAO+XDg2xNRAB6N9rdQI*)
(*TxSXGIa78BDObrbs9/GgtamObetVBTurM5iaT4fYh8NB7hTZ6dIVaEmtizZ5*)
(*lspEmMoTYKKAl64cNiqriDXZSm98CNXBHlyqK2A0xJkTIbZcytrPpZx9vGxJ*)
(*5Iu6aN4PHBS+IoaFcBfaPIwpcdbhSIwrx2oTqExwIivAGBdjeYL9TfD1sSQl*)
(*Ngq51bJs1dgk+oQiqY7OXKxZXmM1mn2C8bONdrMg6siZ6iLaRc7mi/NWbmtF*)
(*iqYijqL+uYq+4CSzAmPx+HhkEGMSH0aDvdgvNKnbYxe1lpqMBFkIrj1EmZWa*)
(*dI7HYMHoSZvkGfZz57PKMsZCQ1jKL6YnKIzXfaP8LHjnTsMRFgrz8FCQI2OX*)
(*PiW21uSYmyFRU6fKYXntmn10+h+gyNaIDBM1UrfJUeO8nVejdRxLk1Boqoe3*)
(*3CputpRwu+0g16pTOZsfyWetxTxtFudP6PRSjB1vmgSL1Ifw22AiXzZHcizS*)
(*nSpnC4J11aX3s9uK45jIDhZ83Mz5E4IRB6o4VpHCzcEO6lMTiAv2wcpiFzMn*)
(*Z6kQvDx/4yFHZ85R2jNOydERMsubyalqoapviIkrV6jt6aOo6ggmVl647Q1n*)
(*p64pdlZOrJFVQlPUehuPML75CfgE3z77kc+uPufBpWdcnrrJnakrfD1zgTsT*)
(*C7x+/T9iSwY4++oTpaPCy83dYWzkLGUHkoVHPMbF0AQuB4dzIyaBXg9fXo2f*)
(*5n+v/6G7fZbQsGLCfJLRXKeN3FoVZFauRk0wTFFsOleHT/Ljzc94tXSLR/Pn*)
(*eXvlnvD+NxjOriDSzJE9mtvRlldhs7wqKiIXN4k89bN34IC7K35OdkiWx5rn*)
(*5LAwPkm44MdgW3fG61sZqTpMe242zemxUm/6uqeI/2ZahE9vpcvHjxbPYFp8*)
(*wrlZ08y95mYu1xwiz9aeGANr4s28cFG3oTmtTbDIK672LTEhfGOa0Cvj5TUx*)
(*9wYTGRBDalI2kZIITg3305ObylxxGs2etrzuqOW38X7pmLelmsOE6eqiL7MS*)
(*3ZXL45JkcV0nh6How+ayq7FZr4a27DrpnMg71QxQV9DCVvgqc1Ut7FTVyHGy*)
(*wVpxLeFuHmgKD6UsNEhX+Lpt4nxsWqPEVqFTmqvXoyOv/X9Dix1rVdkitExP*)
(*+D4vNTWyzPWZS/Bnws+Sbhc9Bvfq02mvxX2RG/9059FhuYHjXgYMOmrTZLKB*)
(*8i3yJMdlcbSmicWeDkoPeDNTWcj3Qov+evo5Pzx+zoUTwgd1DDAtOGmi9jCn*)
(*2poYPVTOyfY2qtLSGGtu4sLoMBcG+zjf08WZ9haKBddcHukRHnqCh5fmuH1p*)
(*nhePb/Lg5hK1ZUVE+PhyZmySpa4xlgqbuVPQyLAkkseNos4IDfr0YFZ4pw74*)
(*5Sa/X+nmr0fH+PZSL3OH07nRcJC/z03x+dhRPt1a4NOFCf6abOLdVD1vJ8uF*)
(*9+ri41yd6ANNfF4Ww5jQ6cFwb+HbPSlLFMxSn0NDXSZN9RlECy2PCHHFxcaM*)
(*7cqb2LFuKyqy8qIfKhC/PNdCdY34vg7p+lU5m/W5lpXPQlEGiWYG2ItaFKml*)
(*yxErU8a97CjepkGimjL7RFufSk3mSUON2I9JTidJ+HeyldeteXzbIY7tzjFm*)
(*073581QLZ4pCyTXZxI3KPD7dvsJPExPca2xhICqJT3cf8+nGXQ5oaeGqrIC3*)
(*mhJlHva0SoKwkV0j/P0qrEXbm6xYg5PoV07r1uKuvBof5VVkCi/07fwonfFh*)
(*0nHMV0tKGBWeqD/1ADWeVsxmRmEt9KfGxYwrCe58VeTLfyfL+W8yh/89a+XT*)
(*tVredhWzkJsoXWs60EBT+tvOp6ujok3u8u+3l3l8spHLbcV8NT3CVVG/Pr93*)
(*jfSsZBJTMzjSPYykoJKmxcs0nFrikNCV0XO36JxZpOPiWVrOzdIyN0ZFTydV*)
(*vSeJyaklTuTYWjnBCYERWHocoHZkkXvfvudfIVkvX/3Cw3uv+fLxL9y/9AVP*)
(*z3wmzs0TXi9c59NHODR4lWf/Qcf5z5m7+zVLF+/RlZTHf1On+SG3iL8Li/mv*)
(*v49jAf48HTwGf8Ol88/x9EpBV92aNSvXISunwSrBWatl5NkopybYRomdwh8E*)
(*CA3db2JFU3IB94fnGM46hKuGEcpCoxSEb1AQTKa8Sgm5lbKorVXEUHMT4fu8*)
(*yIgMpzBe6Pj+QPz2OBPvEUThgXjBVEHk7j9Ah/DoJwrSeFKTxH/HavlzsJ3x*)
(*A6F0e4fRHxjDNz0D/Ds/zVedzXT4+UjXlDueWkOaZTgThaN8ffZ7LtTO8HHw*)
(*EvdSqykw3yu9Tq6tqo2p2N+I8BguzczwfH6OHGsrghTW8qx6+f6wM3w6c4Z3*)
(*07NcripjKNSbPj87er2tqLLUJmqDHAHKa/FQVcVI+E61NeqsW7OFVSvVUFM0*)
(*QENuM/oKGsKDGUnn83Q0smWdrCqKq9exXWkz2+TU2bxmPdvWbkJ9tSq6ijuF*)
(*/9oiHquzZe1GdIWOGYgcMxOc6iSYwnmV8HyChXO1FWm1FSzhuoOvK8P4rzOD*)
(*Jl1ZzvobMO2xnX7BMM2GStQmFkt/tzxVWsFgZBjzmclcKCnkdkcvZ450caFj*)
(*nPHienoTMuiRRDOXliWt53V7/QnRMyLez5uk6CAyooKE5/UnzdcNH1MdCoW/*)
(*OJIRS0WcBIn9bg4lxvH10kV+unKTK+1DnDvUwYmkMo5aBJC3To86I2vqTIy4*)
(*GX2AX6oyeF0Qxdu6VM7lBXCrMY0LFQm0+NoxEuDBw9J8FtPj+LKjhseHC4Qn*)
(*ieRsQTBniwMFJ6bzuD6W59WxHBO+afne7SBVWawFp60Vj9eI+rFB+BozIyVk*)
(*Rc6uFq/Jr5RBbsVqTJX1MVi/na2rFQjbbEK1fQCRwgu7rNlMrPIujtgEMJKQ*)
(*y8W6Ts5UCJ8QV86ZMHFuJ7qY9tkrGMyRPg93ruVlc6+0mDdtDZxLDOGvwXp+*)
(*aCvk564iPi12cL0wmD+Evj5uzqbKXp8zOYn8M39CaO8Ffjw2xfmDlXy4dJXu*)
(*qBisZVexTeyj+vIcF2J/l8fwaoqwXCXDbrHftsvXfVeulOqPsaiTu8R7ewX/*)
(*H8s8gL3YxqkoUqavzeksCcWizUuMVTnqYkyz226GfWxY9DPmhsSYnw4f4Hmp*)
(*K59OpfFzdyi3s/2kn5HobCTZcjulFhrcq03k6WyD4KRKpspEXsV5MpWXRFOM*)
(*BFVZGTYLTdVQ3YDOThNMhKfwTstH28UHZcM96Ji7IKusyWpNDfS9RY0I9Udp*)
(*mza2PhFo7tyDlpYOaalZ3H38Fc9++Jf5O19z5+VfPP/6HdeuPmF68jJLpx+J*)
(*2rkovXfwu6kLXO88zqO770gpH+P0sw/kd5+id/Y2s1OXOBQUx+99x3iVUcBv*)
(*wrP+I+pAqZEZs9XNXJ29RUJyA/buaWho2CAjo8oK4QVWrFrHipUKQodU2aa4*)
(*lSDh/eK8JCyNzfPxxY/M1vZjo7iDdaKvLOvUqhWyrFkhj6w0ZIVuKYjtavHa*)
(*SvHect9aiZKMnHguI15fhbwI1RVrpeN8VMV7tiJfj0U58v3RbH7pa2EiLFK6*)
(*5uVh531cqyjn9UAnr3pbaPX1kN6TNS7yJWLHXrqTW3gp/NXF6pOck1RzI6yK*)
(*CUk+9UFJVCfnCRYvpyynnOPtY7xe/IyoHc7EaljztGpAtO9tqdb/Ibz740Ml*)
(*PE4N4KsUT55GOXFecECv8SbhYzSIVt2Mi8J2dNbuQkvRFWVFbxQVvFm9yoLV*)
(*Kw1RWmMsjmsjGkpmyMqoobBKDU05bTau3oCGOH+bZTVYL6Miav82VFdrCA+6*)
(*7LuW9UoN3TWK6K0SfCojI+URW5n/Ezbi8TKPLPPSd42ZHLXZxOQ+UwbdDGjb*)
(*s4NDxpoEbbZkn7I2PmsV8F+zmjhlRUqNDblSJs6DyMuprEra/GKpt/FkzCOQ*)
(*WzFpDJg6cUjdkGSVLXhu2IjtRhXhU9fjuXE9buvkcRNa7quqROzO7UTv3CGd*)
(*e2l5Ds37R3u5e6SHxbxaevxTOOaXwZRLLENmPgw7eDHiaM+ChwMfj5bze1kS*)
(*3xRHMSmxZTrZi4loD8FVtswG7ud+ZgqnooJ5KfzYg7IsbpelcE9o292mZL7o*)
(*zuHJkUReH0lnKXEfLfYGNHnZ0JUq4dmlca4sdBPsZ4qVqRKmgp3cjLdK5/ly*)
(*19zFJtHvln+b3Sw8S5DydlGTdhC0YQ+2q3TZt9qQ6PV2JBl5cdA7hTLvUrIN*)
(*gxh1dudddSGNuluo2LpJnFsXet1cabPZQ4u1OQ1G25j2s+eE0M6LgkefloQz*)
(*G27LQtJeev0s6AlwZGx5nZuiHC4WFTCXmc1MRg6fli5LWeBkXhrjGVFU7rXg*)
(*kJc1ks3riNXVIE5HixDVdYQqyuMju5IAocF+SisoM5HnZnGA6JOjLAjNChAa*)
(*FiP6wBXh6cb9jWk0UKB80xqKBYdmKMmw6LaVix6aos/rczZIk2+qrLmfbcrE*)
(*Xh3SN8oh2aTIYa/dTIXbMx5qydX2TEbKQhhIcqLQSoO2/Q7SOZAlNrvIjDhA*)
(*engk3u77yKms4yvhY4bO3yK1rImYpEIy86s42NLKwx/fMLEwi76lJS0DU9S2*)
(*DhMTFUt8dAy5ReXUtA2TVNxMVkUX9Y3DFAr/FeybREpECX620QSZBjCRWkF9*)
(*cAYdddM4+xZSKdjII7ZCcGcPdRXdRJm4cj1H9OGQeC7vC+aR0M58Iyuma3t5*)
(*euctvuHVrFhrLPRJnRUrhE7JKLNC5Nhq0eZK63ZireNEVXIlL299wb3TN7hz*)
(*/Lx0nb9Em2D0ZLeitJyDctswVLPHQtOVYPsoOsq76DnUSU1eNWXJRXRXtnOs*)
(*aZw0wZz2m2zYu8OJFGdxfkQN9N1mJZ0z+lppHH+MHOLrtiMc9fYTfcqGPMGb*)
(*F8vK+enEGI9aaugLDWJMMOp8dh1lzgmcLBrm+fHHXCg/wYvMY3yZ2Mvk/hyO*)
(*J5UzkFPFcPVRcsOyaSvo5mrnAwocyqiyreBM8gSvm88L33mTb0UuPhR18mmY*)
(*Le8SHfgl1p6vQ5bnHHHloo83/U5BVDkmEGKaidvuKnZbN7Np5yHkN2azRikO*)
(*mbVBrFnrjfxaW+REfiit0RVeTAdlmQ2ortqA1hpNqV6pie2yXi3HssfSEnVB*)
(*W9QFM+Fd3Tdsxk6wzD7V9QRt3ECAqiLhGuvoD3bnYk4kOboqtDiZUGurT5mZ*)
(*LnkG2sQLvUoRXqJK1MR+O1v67KwY8XDlfnkVp9KLaPcKo8LYkRxFTRrWazO5*)
(*1Yw68X0lop4Ui/xOFfkdvXINmasUyRC1JE7UktSVq4kXdb9IcG22shr+Qksz*)
(*BDv17A+j0zOCsQMZ1FoHCV6N40xAJv2W3tQamdMtvvuYoznf5EfxKiuYz1J9*)
(*mI52YD7Dl9FId3p97FkUHu6+4I7ldV9uFqTytPYgXx6t4ruxOsGDdcKfVPNt*)
(*bzF/9lfyZVWK8GKp0rF6NWHuvLg0xv2lAaJDLPB00ETitoMO4c0ejfVzaJ8E*)
(*R8HXhqvWStet9xY8ELxWG7911pit0MF2hS4B8vZ4b3QUfc2PUMMUwtQ9yVfe*)
(*wIyNMRUq8pRuUKbP1oZ89Y2krFMkTm4NiWtXka8iS57gtCM7FaX3u3TaadJm*)
(*q0Hlrg0UGqpT52TBovC153NzmE/PYio5jbsNDcKvl3CqIIWZ/BiG4vfTF72X*)
(*rjBniu11KbM34ug+WzpFe9aZq1NgKCsdP3x41xq+rgsR7JnCjWwfOnWUaFRb*)
(*w7cH/fhvNJtr+3X4Ks6RWxI7xszU+C7Rnl/T7fgqwYyvcyz42ObBf93Ca2V6*)
(*M+lhSYHpVumY7LdC/+/k+vL9yVru9uVzvyGB46Imv2qq4GRilGClTo43VHP1*)
(*2CTjnX3UHung4Tc/Mnf9MzqGZ7l1/Rl/vPsf1x4/5Yuf3/LgyUOOdnXz4Nk3*)
(*PH3xhns3bnB+fpa79z7j8q0nnL/1ivM3vubp4x+5fu4JQ20znBSa1H5wjKPp*)
(*rbwZucCd5hNMdS6RktnL0Yn7ROd1Utl4gvb6CQrcIrlT1MIF/wS+Si/npG8U*)
(*UVtMmWufYWL8NquU7JHbEUhwZgc+yfXYxZSj55WImqE3a+R0UJUT7W0fSpRP*)
(*DI2F9fSXt5HkGoa5/E4M5fXRXm8uOEiXcPd8kr3LyD5QQVN+Jz3Cw0y2TTJc*)
(*N8TA4UFGaifoKOgh3jmZCOtIMtxSSHeJJ94yiIagWC6XpPNa9N8rhSWU23gT*)
(*J7QszdiVE5nFPG7v4nmX8Awp6TR6SIR+RJBjHs5oUhdXj1zkZsUi1/27ueVx*)
(*hEn7NKZDixiLL2Io8zB5+/NoTZ2gLWGJYreTHLSZ4HTyXT4e+03o1XN+7Rjh*)
(*ncidt0nOfMx15X2SPW/D7fghIYAX8UmciyhiPG55vaCThAecEjXhAru8L2Mh*)
(*uYdZ+F00nafYYtOFqno8m9YHsFXFS/grG9RW67JJdgc7FHayRfgtDaHtGmKr*)
(*paCDtjivWkK3tgvGdFhvgMTIgSgLJySCX4N0TfDT0iZwsxaVQn+W15lZXrcg*)
(*z9KYbHMjUoWHSti5kwI9B4p1LKXr1Q0JvWg302fE3YEbhQVMx6XQLPx8p60X*)
(*zRp69KmIWqxhwiWlnSwpGrEkL0LBhMXV2lwQ+npObM+v3so1RX1m5LYws16P*)
(*hrUbKJBVYsx+H7fSSxn3i6fdPZICfTfaxfnv3O1D1TYzkWdmlAmP0mOly5yX*)
(*GZeCrBlz06XBaSt94TYcctYjXVuJejMdTvp70GJnSqeXLb37nRmWeHMs2Z/5*)
(*Aglni0I4nx/EzRwJU0GONOzZSc8Bd4q9d9NbFkNNQSDhvvrEBxkhcdrIoXAL*)
(*lmqT6Rd8EiV0JnzzRvYIb+ots5pEZR3cRZ/0VrAjSNFN+Bd3/Lf5UOAnPEDE*)
(*IIk6IXQam3Nd7Me8oxVLAfv5Ii+HKW9vqW51WZiyIPh4KdiNaxJnnqX7SceS*)
(*LI8jeZjjJ5grgIXEQBZTo7hXVcrNshLRByu4Uy04t6WRb0d7+OfMBP+eHxI8*)
(*HMusYLSTmfs5WxjKdIovT+sz+aE5k+/ro7lR4Ei3txKTPuv5pTWEzyt9+LLM*)
(*n5Om67kqtPHHTDueSHT4zGMTD91FO9pt5bLjNr4I0OdtjCn39mvwIkaHn4pN*)
(*+bvWnUcxwk85GJGns4GRYCeuRDpxMcpOnN8g5kuCmEly40y8h/CMgVzKSmAi*)
(*N4FJ4TPPdXTQVFTCQP+o0JsHDE4tkJ5bRV/7OPNTZ1m4eJkbj+5x/8Ed2o+2*)
(*cvPOI2amT1NbUsjMcK/gvpOMjs9T1TBEc8csJ8YvCa2apjrnKK0HRzic1EF1*)
(*SBXn8tuZSKoRbTpJZnK3+PwCUelHKSgdoraom/J9aZxNruFmRDFLgelM+CZy*)
(*JCBNaE8X2UVjmPkdpu38O+af/Y+ltzD/LbRc+IqkqnHBianYmAQgcY8l2E1C*)
(*TngaR1JLORyZR/H+dLL3ZxHrX8ABr1xS/Gspixbfn9hBY04vzWK/Rhom6D80*)
(*RFdpr1SrBkpHKQs5TLpbLpHmEUSbhRGg7UGa+T5GoyK4UiC8UazgOIdwMkwO*)
(*kGYaSK1PPF0RKbQHR1K3N4gCEy+KzEKptBH1PayD7jChjV6NnHNoZE43h0Hd*)
(*CIrW7yF/u5PQPHcCt4Tiv70Q140NSPROItl6nHqXy3xR9x0vSk/zOPMQj2Ml*)
(*fHHAkneRVvwQaM5XHmZ8uX8vN71CGLaJ4bB1MbGWLdjq97DdcBJN80W2ulxH*)
(*y/0aSlazqJoOYmjWgoV+Cebb0zDWkKCv4oqJqh2mG/dgqm6F7noTdJSN0VUx*)
(*wUDVDIN1xhjI62GtbMLerTZYqxlhqqSN9fodOKrr4rxRW+SYPiF6hrirbhDH*)
(*IZ6L2C+0bHk+JGfhidxl1hCrIEfexnXEKciQpqlAkYW+OO4tRKhpkLFBi6zV*)
(*stQL73FyzXqWZDW5JavNjZUa/LLanLfCe3y3QptXKzT4eeU2flmlz/NV2lwW*)
(*Wjom/F+e4PbOzbu4FpPFmYQCTsQW0ifJ5GT8QU4EJjK9PAeImzODPq40W2wV*)
(*9b2cr4T2vDwUy2lR56/VCXZP9BLn25hRH0fuity4nBnFo5oCvu9p4ceRbt4e*)
(*7+SvswP8vdjNP3NtvJ9o4ovDWSxlRLKQFU1r7D4ezbcz3VdAXKABpcn2HKsN*)
(*5IeFfP47V86TQ1G0OGyn09eESBUZ5gLcmQ0SfdXEg6jtnsRt8aPcNZuG+Dr6*)
(*K44xWXOJ5qAyLghP/0tWFHN2ZlwP9uXL3GxuxcdyNUZoUHI8z7PjeV0Yx9uy*)
(*eP5tzOLPRsGsBaKGFQfxWWEIx0PduJKfwvPmOp4LjbqQly+9dvHTsRE+XT4t*)
(*NOsIf57u5FJluPBbYYIJvPmyJ1c6f9etkhC+q4vi5+ZwPq9x53KeEbezjPil*)
(*2Y9fOiL4fnmeYgcNbu9W5mO+PR8r3LlrJscr9808dtXltME6Xvnr80u8Bc8O*)
(*bONVgj6/l+/mt1I77odY0W+qTcG2jQwJX3s1wpmbiXsFr/owKdiyXzD18vXB*)
(*q3FBnIoOZDw1jOOVOUwLhm0uKCA9NYO23iGSc0oICI6hLL+amvJaOvr6pOPy*)
(*RgZ7iI0Mpba2nramZuqLssiJDKEwI5PU5AIKStrIym6iNKuB3OhSojyySPMr*)
(*JTegmhLvYvqDCujyz6c4sJIo3woiIo+w/0AZkZGHSTxwkINuqfR4pjHhFM2S*)
(*pIgO12giDbyJF5/ZH9mEumMJ+8vP0nf7dyae/UP9ldcE101iHXQQO7d04kJK*)
(*qclpZvjIACfbR7gyeILbfXOcOTRKU1wtCb4FhHoWUBojNCrzBIOVpzjbf4vT*)
(*vRc4O3iJM/3nuDZ5i4WuM/QWD1ESXE2qU6bw5RKhVT7StbkK7SM46hPGZFQa*)
(*DW6JZBqFEb0jlCSjKEpck6j1TabWM4oiSz/StD3J1A4mQzuWFtcmevz6GHRr*)
(*ZWRrLv1KoYxrR9K4wZNGvWCK9WOI1ynAdX0p+3fMEG72gHDD26QYneV42FXR*)
(*ZhM8T6nny4gY7jgKjdortMrFkud2Njyz9eaKWRC9m0PJX59IknYD+7UH2aM7*)
(*y+7dV9Azu4im/ixbd02ja3oMM7MhLAybMNctxVInExuxH1ZaPlhoOAlOtsNI*)
(*3RJdVVMRuzFS2yOd/3qn8DmGcvqYrjPBVOjYDnltdipsx2SdNkYKmpgpqmOh*)
(*uIFdcsrSsbFW6zZIxxFYCsYLVtLET06BtI0qlO9UI3/HOlrdTZhIkDCRHEWt*)
(*k6NgNVNq1qlwXFmDm0ILn8ht5bnsdl7KaPN+pZEIE97LWPB+xTYR2vyxQp3f*)
(*xHsvhabdW6dH68q1jGgZc8EvSvTxKLr2RdDhG89AYDKzISnUGu4WbGREicFm*)
(*+h2N+NBezGXBKxciHIRGbeVooCkFFhqkbV1Ho+l2TgV5cDk1lN8GWvh9tJ/3*)
(*c8f59+wxPt2e4b8lkefnBvhvpovvmksEEyQzGOZNoqXgmqMFdFeGYq+/Bi9T*)
(*WXJ9VDlbZsrX7e6M79vAuXBjzsSacibagp9rkumyNiVS+EoXBQMcZY2JMwml*)
(*OOwgRwq6ac4Zk6752qqvx9u0YJrV1zFqZcyAjSVV2tpkqihRpKFK5WYV6oQv*)
(*PGqwnpm9elw4YM60ty6XoqxZjLBjIcGPxzWlfNPdxl9Tkzw8fJhnLc18WjrD*)
(*77ODfLo1zTcjldxuiGEgwow2P11KrJVo9trBVJQlb+sl/NQcyFctHuJ/7OPX*)
(*Tl/+6AoW56CUN2We3LFX4zOLdfx0YAuvvVV467aBxyaKzGvIcnyjLPfsNHgV*)
(*oMuTgO18Hr6dd6XWvErbxdX9pjRsViVMfo20XSYcDWjQV+KQ0w6K7LSpNNek*)
(*XFeFZpMttNgY0ejnSOWBvdQKH1+aGE9GeqrgwGFySqsJDIslOTqNwa5BZk+f*)
(*4sHT+0xNDlJXeZDJsVGGOo7SVpIlfEkV/Y1N5KUfJCOjhsK8NkrS6knxy8F7*)
(*VxhuOw6wTzdc1FsfYlRtiNNwwE/bF7vtBzDSDWTHDl90tb3RX2+Lh4otQWuN*)
(*yVDYhURmE35r9dijaMpWDTfWbNyP/O5CDKIHKJ17Ruf9H6i4+AL3gz1oWEWi*)
(*rO7Etg026CkbYL3VGOcd+tK5MX21DNinaoyNgiH6SuYYb3TDSMkDEyUvdOVt*)
(*MFK2wUBpF9abrTFXN8dShO0mO0wUTdiz3h5TOTN2yRqhu3ILu2VFvsqoYS1y*)
(*I1hZeAc5I1xkLXFc64DrOlf8NFwI3movNMYDiZoF4Sp2xKv6sE/GkSTVWJGn*)
(*eaQrhtMoF0zNSnvqVotckd9L8mpbkpUiOKBSiNfGLly2nEFfYQbnTUskml1j*)
(*MuwOl8KP8TC4jHseQSJchOd24KGjHXd223HTzJMLJmH0b4unZEMGCVpH8FLv*)
(*xUxjDCuTixibnGeL7hQGZrNs1x9BV7cP3a2NGGwux3J7Afa6KVhtDsBEHK+R*)
(*qjX6qhboqJgKj7UbPRUrwYmm0nXcdGQNMVY0E+fOXMqOBusMMFqni5GittCt*)
(*LeI9DXYpbsRUQYTQL3Px2vL6Oz4KqgQritzS1aJpjw5HbLQZDXPkjMjz6exE*)
(*egJ96bDew9AWHZY09Xi90YRflYz4UXDSjzLb+HPlDv4R8X7FdqFbW0Vs5l+Z*)
(*zbxbtZnXsps5v2od3StlGVfdxhk7L5HTXnTu2c+Idyzj3vGccJVw3MWXXnsH*)
(*2nYb0We2XTpn171gZ66FOXFy+TpLqD1jgu2GPW04J1jwXoyE28kSnlfk8FNf*)
(*B98Nd/PTdB8/nerjh5Nt/Dbdxq8DdbyoyeNxZS6zKWG0Rnmy2JbHWH0MCfu2*)
(*UBVnxnytB2/GvIS2BfAsz5h7iTv5pcmbv9pD+f5gIKf8nCm3cSNsuzPRuv7U*)
(*hFQLvRviePc5ptqv0xxewpRg7Z9zwji714rRPYKVIyU8yMnglCRIaLEPdzOj*)
(*eV2ZKh3z/u5ICu+aEnmU48mb2nAeCra6mBHG3bJCPp2e5dPZBX4YHORl5/K9*)
(*MHNCs2b4dH2S32aOcEt8fjLJRmivEV0BO+g7YMRisi2/d8bwz0AEv06E8u9c*)
(*LP9NJ4rjSefTwkH+64rjkfsmHpjI83OAJr8HafLCVI5HO+VZ1JTn6NqVPHLa*)
(*xleCCW+4afBIsoPv88zE+bfhuq81hevk8Fy1kiI9bfqt9Cjfoij0yoiDjvrS*)
(*626tNjtpNNnKQV0Nil12cShyHw1JUeREh5KWkUznhOCgxhaySypobW7n7OkF*)
(*rt6+wsNn97h7+yLHBtpZOHmcxeOjzHU0MF5XxtCRRpqrWzhY0Exx7lFGW2Y4*)
(*lNxIqlcBye6FxNpmU+ldxun4I4wLD1QfVEW4bSYxYutkm4ybXTISh1QchTYk*)
(*q7uTtc6agyL3E7RcRb3exXZtf3SdipHRScY4eYLh5x9Z+gBjb/6Ha1EXa4WP*)
(*WStySkvBGKet1vibWRMvanahuxt5Ns4kG9oRvMUW6w3WIs8ssVTdj61GIM7b*)
(*/PDY6YOPqTchtgEkekWSHZRMpKOEIDMf3DYJvyFvgskaXUxF2MgZ4qagh5/I*)
(*yxhNfYLXW2G72gSL1WbYKdgSsNWZVGtfkgydCFIxZN8aPbxljPFeuZugVXuR*)
(*yPoSKeNC4QorSlcYkbtCn+QV5kStcCdAJhzHVYUYrWlCS3aEjbITaMuN4qDS*)
(*T+rWJpp2FjC6I4iJrVYct7Rg1EyPUUNdRnWNGNXZQ9dWD6o1JaRsTBMcWcde*)
(*3UEsjWYxMjuL3u5FdK1Po2tzEn2rE2wX7+lt68Jgaw0mWvmYasRgttEPMzVX*)
(*wYRCszbaYCjOla44Ph0l4bUUhW6JMFK0FDq+Gx2h0zryO0Xooie/A33htQzk*)
(*taQ+y0hBXfiwDSI2SkNfTl1olToSoVe5WqqUaCuTKepusaGqdH3fQqEfhTt1*)
(*yVdZzyHBgyMyslwV/Ph0pQIvV6gIBtzAryu1+U3E7ys1ha9S43fx+s8rlPhm*)
(*hSKfi8/dXa3EtMxazqrocNvCg4Vd7hw39uSUQwSnXKKY3OPLsKUbraamtJrs*)
(*ZNRSn58LE3gUuperwU4Me5vS7W1Gt4cFPQ6mLHq78jAuTPB3DG+OlPFuuJef*)
(*Jgb49dQQv54d4uf5Tv6Y6+D35blEaou4kZvMsPBXVT7WDBRJqE91EX1KlhQ3*)
(*VXqThTcacefPPluWDihxLUiVD20+/DeawLuyYI67WZK83UwwtDORehLy95eS*)
(*HVFJjmDCotijJFkJrXV35NvkAE7aG9Gxaxsz/t5cTo4VOhvATFgAZ6P9hX6F*)
(*cy3eg+8Ox/JjQyyf5XnybX04jw4GS/XqWnEO78aH+WNykq+7u3l2tEU6V8GH*)
(*xQmpXv0x38zD5jgW8z04neXMfLoDlwq8+eJIOB+HkvnvWJzwYtHCYybzYS6Z*)
(*jzMZ/DdXwLuWCL4JNuBL+/V8iNLlQ6IBf3iIdvLW45u9Flw3E20X5cyHXG/e*)
(*JNjxrtidjx1BfGyN4E1WOJ1GQpsMDTkZGcbzvGSWxLFcq8phsSSN6dgDXE2L*)
(*5m5WDItJwUyXJDLfXMrc0Xraa8upaaph+spFuqZOcKSnl4mJSW5du8rdR3d4*)
(*9OIOd26eYaKvmXuXz/FIeMn7M8PcmOjj6skpTo8vj4M/zWjPOa5MPeR4wyxt*)
(*WYO0pA1QG9nBSMoAj6sEnxUOcLFyhra0frpqFijOHqCqYJSOg8epcM/nuKSO*)
(*85IaFgWLjUfWEWoeic++ckLy55C3Lscsc4qRV//j8ieY+AG8KwbZaBYifNp+*)
(*vHb5k7c/jvHSSi61NvBsqJNn3Z3cEFo6nlxFkW8uYTaJpHqUURLSRFt2H6OH*)
(*x5luneRU1zHBgye4MDjNbMso3XnN5HqnEKTrJRjNCg/VPRzQdiXewJUG933S*)
(*9YFL9wQStsmF/WrCV+nsJ9sljJbINPpi0qhy9CN3hzvp6m7kbAygdqd43b6K*)
(*CatyJtRimFAMpWNtCLWyMeSvzSFGrgYP+V7hS05grnUDg01Xsdx8joCds5Tt*)
(*HmLYpoFFs1TOmOzjmIkJQ0ZbGdi+hYEt2+nZtIvGjXYUKgtmXReFm3IRZhua*)
(*0dbsZ/2mYRS1BpHbJHRdswkF9Ua0tHvZptXODo0qdDdkCW8bjv46LxF2Um0y*)
(*UbMTeiW8qsqe/0+90hd1QV/4VSNFfRF6wlfpCF+1nV3CT5kpbma34Ln//6i1*)
(*3CvqpCtz/vu5EunLlZh9PCtNkd6b901LI1+UlnMnKJy7xvZ8q23Nh612fFi/*)
(*h/drTXm/aifv15jw9xoj/l2lwz8yWvy9UlXoluCPFfK8XiHH61XK3JZR4Imy*)
(*yBHhbZ/oe/DA0JcXdnE8dU/hfkgm875h9Do50W1vwZyXHX8dyuFFSjA3o704*)
(*Ee7EQKgjvYEO9HjsYSF4H48y43hWkS48VAOfTk3yfvEEH6/N8EGw079XRI5f*)
(*GuOj8Ftvjx7ifHIk3QFulHqY0ZnhS228A6HWihT7bWaqwJIv2x35pc2GG8Fq*)
(*PAzVFrnqz39CAz4eTmQpyI+S3T5E64cRa5JOlaSbI0WTNFfNciRvhhyHBGb3*)
(*efB10n7Gdm+nQWcjvQ5WjPl50+5iT7+3C4OetpwKc2Pa34rPcvx5URrIzRRH*)
(*npf7czvfj0vZ0SwVZvNNTyff9PbytKWNx83N/D49yZ9zo3wUGvzdeDVLpQcY*)
(*i7OkP9SI7kBdhkNNuJDhwI9tIfzcH8J3k2K7EM/vQq/+nskSXquIn1rCeRlo*)
(*wDMrJd4FafB30Ca+tlTktbUGn+3RZ0FXk+f7zPguxp5HQSZ8lWTNu0p3fq7Y*)
(*z8NoH6o3axO9Xo06WztmxHF2WBvTfsCTej936hytGPJxY8jTgUYXM2olbjRm*)
(*RNBSkEpRVjIZRTm0nRiloLmBrIpyjhw5wsnJcU6dn+b8lTkW5wbobChldrSX*)
(*hZFeFttrONVczXxPD+MdQnMaJuioP8lowzRH83qojGyiQtJIgVcV9b6VLCY0*)
(*MBdZxWhiG6VBh6hO7yclqoG8pHbqM3optE9n2K+CRfHesl6dzxsgwT4Nf99q*)
(*4qsuoexci0vFRQa++sDZ9zD0zXs8S3vYYhmNlWUUSR5pdKaUc7mtjRcTPbw7*)
(*NcrvJ8d53TXMlYou2lPqKQypoil5gNGyWZb6rvLk9GO+uvSIr5bu8eLidV6c*)
(*u8rPd57zcOoSYwe7KA/IItMxkgLXOBqCCxiKL+RhfRVftNRxrbyOgdhCmsMK*)
(*6EwqZ7qynnv9vdxoquNUTi7HIzOZCsrjpF8ZFyStXI/p4WbgUS4ZFHJhSxFT*)
(*GuX0Cv2o2zxGwbYLROg9wFP/BTaGX2Jt9JS9ZrdJcbxCj7+oAaEneBHYxre+*)
(*OXzjF8Cr/Y586WrPUwcXHtjs56JFOMPG6RzWryRmWzM++pM4ml7Eyvo2ZnZ3*)
(*MHO6xW6na1g5L2HvcF74WsGbVgO4mjXgbpiHm148LjohOAk+N1EVHkvwua6y*)
(*NdvX7WaHogW6CmbSe85NBJ+bKBoLfVoOQ6Gvepgp6WGxbrtgP20sRexZv+3/*)
(*FXlbLCjfLjyM8IVjdqYijKUcdCkhknPRUZz3D2XezIlL6ka82Wgu9MqBD6p2*)
(*vJcVeiWjK3TLQoSZ0C0joV/a4rWNgglV+HelIn8If/X9Sjm+ENsf5HV4r+vO*)
(*PyYBfBBa9SGonA+iz/1R3MKj3BIWoiOZlfhxKz6Y/zqrpXM3v6xI4UJ+ODOZ*)
(*wUwkBDAQ7M6ZmAM8LEziWW0Ov4w38+HUGH8tTAqdOsk/N6b489Io7y8M8/5E*)
(*D9+2VvOosoDppFCaQ9zoSfOlKsySENO1ZDgq0x+jy4NqC97W7uFB2Fa+iDLk*)
(*Q403H5si+ViRxJ3wSApFnQ3YEoyfVgKFAd301i0x0f2ArvIL5DsKZt7ryucR*)
(*rsJTa9O8U4su2+V7C5ypt7bkqLMdfW42nAxwYsrXkvvp+/m80J9byY48K/GR*)
(*jg+4mh/PjYoi3vT38bK7V2hVKw8FE70TnPThjDgewbivBso5XxTAcNRuekMM*)
(*hf7qMRJqzqUsF75rCRB6dYA3J0P57WI6/5zL4/3Zg3w4W8Uv7cKDhpnylY0y*)
(*fwVv4t9ATV7uUuC5iSrXjLSZ0FDivos+L0MtuedvwOfxFvx40JHvij25G76P*)
(*Kq0tpG/WodHRhTkfb7ptzTga5E1dgAfNwldOBvsIbRb1ztueOsGCR7KiaCnJ*)
(*oawgi4zSfJonhynvOkpZUwN9fT1cOnuauw8u8/nz6zy+s8iFqT4eLC3wZGmR*)
(*p0KbH02P8GjxDNfnr3Bq/BrzY7dZ6F1iunGBoZLj9OVP0pbUx1BCh/BWfdzM*)
(*bed03hAtCe20HZygNKufmuIJesqEp/Ov5FRsG0+yh3mcM8S9qpOU+FcQElhL*)
(*WO4c613qcau4ROP9H5n48V+aH/2AbVYzG4xCMNEPFowZJTQ4k5NlJVxtLud5*)
(*by3Pj9Zwp6qGuezDNERXkONfSq5PJdWRrfQKr3ey4RinOidY7B3hXN8wF/tH*)
(*Ods5wmhpC4ckOSTZBBNp4EW8qS8FjuL/e4dxpTCDm8WpjEbGUGLnTYa1N+W+*)
(*kQwX5HOrR9Qu4UGX75mdCE1gyCOGEac0Fn2quBV1lM9Cunnu1sNjoRUXTEYZ*)
(*N5yj2fgWhWZfEm7+I567f8XL+QPebr8T5f2Gw2EvOZvxjG8PPuBj4Rk+5vTy*)
(*ISmND7EhvA8N5PeAYL73Ef7fI51553La7Y+SZzdJlPNl/Dye4Oz1JfZeX7HH*)
(*+wW2Xo+w87iF294lPFzn8HQcwdu6EW/TYjyNkvHQCxccGYTDtv3YaXthtXkv*)
(*FpucpdfhLTXssNGwxU7TFnvBi8vhoL4HBw0rnDQscNY0x0XTRIQxzhpG4rkB*)
(*rhr/JyIVtUlV1aZK1NIG7U00aqvRY67HsIsjAw7O9BnZMKFtzpWNRnyhrM+P*)
(*slv4WXioXwT7/bFCk79ldghPtXztSov34rX3ggXfr1DgH+Gt/lqxVoSc8Fpy*)
(*/LJKjV/ldvK9ggnfKdny+yY/vjML57JbBOOeQXSIHO9wEbnt58LTnGjup0q4*)
(*mOjHUJQbbeEuNAU6UethxUiIBxdFXtysSuX1cC1/zg7x+/wofy1N8tf1Y/x+*)
(*cZB/zg/xz1S3VK9ORgTQ6mlHibMJ1QE25HrpEWosR67TBoZi9HlQZc2TQmPO*)
(*uCpz30+bv8u9+Fgbxh/Zkcw4ehChasve9X54qseR7NZEecYxqvKOUxzdT5KJ*)
(*hFErK+772nDCQpdJe3NmfX04ERBAj9tekcs+zIicvhjtx+VID74qCuO7ygie*)
(*Cf56XRHE05JQrhen8NmRWn47fpw3Q8M8aengXoPQq5lpPl07x6erM/w608qd*)
(*hkROZ3sxI3h2OsmRs5n7eVoTxsfxJP6bF37wWhb/e1TJp3uHBUPW8elyLb93*)
(*J/M6xIiv7QQPRmiLfqnLOxd1fnHZyXMnK84abedV4B7+SvfgTaIjvxbtFVod*)
(*wMcjodJ1GvvMLUjbpE2dtS0Lwn+PuS3Pk+0v/JUHjU62DAvPNS685NF9LtRF*)
(*+ApfEyP0Ko+q4gKyyotpnBgmr6meotpDtDU1cnJ0gAXBuBfOjXFmcvnaVDlT*)
(*Pc3M9bQyd0R4itpSTjS20l3TxaHCTipzu+kuG6M9p0+6TmiFpIFCwXPVXgUc*)
(*Cynk2IEc+sMPc9CnhKKoOuIPVJAWUUuxiAyLOFqdshgRnqpzdywFhqLm7PDH*)
(*xTYDx+BW1F3rcSheoObWG4bfCr169g7n4n60rJMxN40hxDqaEt944XUSmBH8*)
(*e70+lxtV+Sxm59MblUPOvkwpD8baicfe5RyOracrr42x6g6mm7s42z3I0uA4*)
(*E9VNdGRUUuKXQpxlABJRs8NEJJr4krfbQ9o/l++BGJOEU+0sdMxOsKHQsbb4*)
(*RGbLC7l4qJiJuEi6PILpsAmh3zKB+b1l3Ahp46F/H0t6bZzb1MOw+jANmnPk*)
(*brtNxM4vcTf6EQujXzE3+43dZm/wsHxMuuttBgKXuB4+z5chPXzvf5B3kmh+*)
(*FjXojbcHX7h7ccc5gNN20Ry1zCLP7DDh1kN4OJzF2vUupm5P0Hd7zE63B+i7*)
(*3GSX8wUs9hzD2rIHW5N6bHcWC21KwlZTgo3aPvaoumEict1AaY+UA7cr7GKb*)
(*gr70+vpOBR0MFXTRX6uLoayItTtEaGO0HHJbMZbTwlheUzzfKA2T/xt+cppE*)
(*KWmRoaJKpqIcGQqryVFeS67aBnJU1clXUKdyjTI9qxRZkFHkrvBKT6Wspyx0*)
(*axNvhU79tFKT31dsEBqlIkJR6JW8iLUiZEXI/R/NEn7r5cp1PBCseGPFeu7I*)
(*bOGCrAFVq9XFd24kQXEdKSoKVG1aT6fhVpqEbuary1NoupkM881kmmqTIzj7*)
(*qIu1qJsBXCqI4UVXJa/6GvhysJFXJ4/yer6Dr6dbpNfcfxw8wufVRVzPS+FE*)
(*TAgdYd40R7lTvM+QSFN50gQXtfhq8rjeiYd5Bpx2Wsdngdv5WCX8VX2E0KsI*)
(*jtu4EL/FDYnwt+FGReT6dgu9GqMkc5CDUd3k28ZyQrDSUz97LrpYcu2ADzei*)
(*YzgdHMagmzeTvn7MB/txIcKP65HefJkr4ZviUJ5levMy34fHeUFcK0yV3n/6*)
(*58wM342O83l7r9CmJn6emuLTzYu8PzcpWK+Ja9WxTKft5USiC5PxjixkCC4+*)
(*FMbfg1H8Nx3Dh6sZ/O9pFZ8eCq26fYRPVxqEXiXyeK8Wjw3X8qefGh+CRVvZ*)
(*qfDWfjuPBHuf3rmVp55G/BJvx9eRFvyU7cD7wx78We3LK8Hj3SYmZIk6dsjM*)
(*nBkPwbbib1r2u1HpaiMY0UK6VvWQh+BAN0cqg/ZRGR9OQ16O0KtCsksPUjvQ*)
(*y8HWJqqajtDT2szsSB9n50c4P9/PwlADxxqFrx7u4txID+fba1kQPDh3tIuB*)
(*ul6pXlXldFObfpSq6HrS9uaT4JBF/J40MgWzNTuG0+IgoWZvKkl2iUTvzcLH*)
(*MYlAt0wihQc5oOlN/o4g2ndFUqcbQOxGJ7y1PNhtFMFO23zU7Kuwz58l/+wT*)
(*mr/4leqHvwj9GmSL0DMz03h8TMPJdA6VrsHQkxzCybwIptKjGBI+qD4gkWT3*)
(*ZIKskwg2TSHRMZ+DQRU0JNfSkVdHX2kto1X1HKttojNbaFlENqmOEgK3u+C1*)
(*0QrfjXsI1XYhdac9lYYGdNpb0WDjRqaeHVHb7AnXsSfOzI4CN3ca/HwptXbg*)
(*oJ4jFdqeHNYMom1bHD070unckE6TTDa1K8rIWVFDhEwPnvKnsVx/h+0bX6Cm*)
(*+YoNWi/R1PgM081XkRgu0mA/xazHEDfd6njomMI9Ww9uWe5hyciCUzstmNBx*)
(*oEV8T8Ymoe/qydhuqUFfd4CtRrNomJ1D0+ICWrvPor37NHoWJ7C2H8XOpgMH*)
(*81qcjYpx0U3FRTsC102Bwhf5YKPugdVGV8w2OAo23IPJenNMVU0w32CAlaox*)
(*5uuM2S24cLfiLsF/JiKM2K1siJXyThG62KnpY7/h/xc7CRbP03TNpH2ybY8p*)
(*I+7WLIT5cCk5kZvpOZw9EMOi/T6u6lrzXMucX1XN+V3ekJ9X7+Ct4L9vxfbN*)
(*6uUxV1r8tXKZBZVFKPxfzVrWqjX8KZjwF5l14vOqvFmjzU/yu/hnvSvv9IN4*)
(*7hzHRdEvpuw8mHV05a6fHy9Cg3kS4MuCiy2tlkaivhuJ9jSl0dKEKU83bsZH*)
(*cC8vkW/aKvlreoDf5gf56+qEdD6uf29O8OmWyPXzE/w+1M69g7nCi4gamRPH*)
(*ZEE03SneHA42pVViIny9DY/q7PmsyJAl3w18HWfMxzqhV42hfCyN5oKPD2k6*)
(*e4kwSiDYMJNU73oOpnVTlN5OQUQdBdYS5h3seLbPjsuOu7kb5MeVkDDGXb1o*)
(*2mVF1x4Hhp0cOLHXgUVvW+7FePA0yYt70eI7hebcTPTgUk4C94S/ejsx8X/m*)
(*KBd6dau+mdejo/x9do5XI23cbyliNtOfoQjhaSLtGI92ZDHDj6e1kbw54s1v*)
(*/T78elow7O0CcezCY12t4sP5Kn5qi+Jzz0081pflV491/OWtzCsjweemG7hp*)
(*vpOT2uqiv27le4mpdA3Bb5Ms+OP/Keq8g6I69//vjDPMMMMMwzAMAwNDGell*)
(*6UuHhcWl16UXEZDeQaQJCtIFUaqioCJijL3FWGM0icbEFPWm3Gja/SYmN9WU*)
(*m8Tk9/p92Nzv7/fHe56ze/ac3T37PK/n/T77nOf0afiuJ4lHVVnM+/oyqAxg*)
(*Z4SKC5L/DsvvMJ0WzYh4sxlpYyclI57IztbdP2t0fR5D1WXs6uhgoKub5q7N*)
(*9M3OULuli9atWxjr7WVxYjsnlqY4c3gnpya3sjzYypFdwxybHOX4YCdHejs4*)
(*PDDKRPc4HXXbaa0YZWzjbvpKt1MhXqYotJIy8T5NwRsYi8pnhyqHLZGlbAiW*)
(*thVZSaKqhHRNDXmqCrKt42lx1NJiEk6jcQjF5uFEmYbhap2IU2AdpsFtRLWd*)
(*pPHsPYYfPGHL7f8hrH0Rm7CN+PhWE++1joqwHMbLy1hqFa/dU6urQ0frNzJT*)
(*1klH/laqUreK5x6iN3+SyYa97O+aZ3lgL88Nz3BsdJqT4yu+cZEjPdPsKu+l*)
(*O6VB8l6FZKwahtNa2ZPdwhutW6Xf2sbV6j5mUpoZjm9hl+z7ubZxbk8u8fbM*)
(*Ia62jXG6sI9TaeJHY3dyI+2gtJPTvJV6kde8rnLF5TYHXF5nUHGfuqDPyVY9*)
(*RR35DKXqT5Thf4rHekqW6gt5/0ecKnmH+w2v8KTxBN/XSD0raOVjyYDvp5Zz*)
(*L6mSl+PrORaziZ3qXlrCJyiNPi5Z7zoxiXdQJ76JKu5VIqJvEKW+QHTkMdTq*)
(*eXmvCaJDh4gP6CLJq55k91JShFfJTrmobZIIt47TjfVYGQOyMm7B39KbYGsF*)
(*YVZehJj5i4IINQ8WBRFmvjJ+1J8wCz/duSy1jT9rbfz+Kx/SLJwoc/ahzcub*)
(*Xh8PxsOF98nRLAnXV64XX07O5kRkEq/5x/CpMoGnilieyvt+Y6LkKyMlT4wD*)
(*REq+NfTiqb4zv+jZCK/M+U0Y9dtqY35cbSjPmfGjgY28xonvzQL5TXj7h2Sp*)
(*P1Jb+aN2nA+KOoVNhVzV5gozmvi1u4ffpX5/urGZO001vNRcy7X6Gi6XlXKv*)
(*vpFHWzfz4UA3X83v5MmRWb44Pse3lw7x9MZRfr6+zLOXj/HsxSN8tX9a2vQw*)
(*twe2cnOoh0sDHSy3rWe6RM1cUYBkq3DuD2t4q82bl7SWfCb58Nl4Ds9myng2*)
(*VM8NYWelUxTrfYrJ9JCMoOmiKq+H0qxWymJrqVRoOBIcyqtRoVwI8uFWShKX*)
(*U7UcCI1k2F3JZFA4C+q1uusGziequVucwgNh1r3SBN6uSOFOTQ7XWuolZ2zn*)
(*0YFl/rHnoGiRN6RffnTgAN+cWBaO7ePhvm2c7ShkoUTD/DoV+/JCObpBw6vt*)
(*qXw7nct/lgv49VK1+KpuyYK9/H5jC79c6ORfO3KFpS68qzTka/GP38Rb8J6H*)
(*Ee8F2nJP5cdFLwceJHrzbUUUn5XLb7opht8GtfzUn8snTQUshQTQ56lgR2gI*)
(*L2SkCIdjdPeG2Z6gYTJazZI2jaX0bGa0mYyXFLGrqZEDQ9tZmJxlfHYPh86e*)
(*YXrpEAeeO8z555/j1YuneXjnEh/cPs8/XjjEvePzfHD9BR7dvMwjWffh+ZN8*)
(*cPkGt8+8zNkDVzi17zpvnLzPjX2vMN92SHee6mDzQU5snOeVjjlebpvmXOcC*)
(*+5r3Mt2xn9HWfUxtWRJPs8jcukEulI7zuOsId6onuNawm5HMrdTkD1HXcRz/*)
(*3Cm0g1fY8fAph5/Cns8ga/wCgenbiBUfVyjc65A2vLdBcll/O2+ujOWbGuHa*)
(*tiH21/awKbOFvPBqYWgjNZqVfNjLYGk/4/X9zLb2c2DLsLBrBztrN7OtoJFG*)
(*TSGF3slk2UeRYyd1yjmOGjcNfR4q5lTJ7ArJo91dS717Fs3++fTEljJb0MI+*)
(*8XI7Y4tlfSm7gxrZ77uF5wN3cCpwimWnGRYtjzBleo4uk4tUWNwS//aQSPfP*)
(*8VJ8jaPiG8Ii/mRt6K/khH1FV9xjjuS+w+0N1/igZJFHBdt5J7WZN+KreSWq*)
(*jCuR5ZxWVTMf0sw2/26qfEbQ+syxNuA4IaEvEhB2iRDVRVRh4qtCjqIJO0hw*)
(*4Lion3DfDtSKemJcS4hzyCHWTiveKAWVZawuEyrNV/4bDBEp8TVXoLRwIdDC*)
(*nWBz4dV/WRVqHqDj1f+ySmXhrTv3HqGTQqcwfQNiDY1IMxDJslZfH62hIUmi*)
(*eD19Ulb9fY+ZdtFOWT4surBKn2vim25J5ntHcuF9yXgPJAe+J48/lOc/kvUf*)
(*r9LjEylX9KHowSoD7kg+vC6+6+IqS05LflzSc2ZaWDdqFciQczBjXkHMKoM5*)
(*KF7veEwcJ9K1ur57Vvrxhbx8ni/awOXKWl5rbePuYA9v7erjzvbNvCO54v09*)
(*ozxemOIr8VRPTx7k+yN7+Wx+kntjw5xva+NwVQMHxMvvzE6kK8qFqSxXbnRG*)
(*8V5vDI/aI/lyo4qf26J51p3Gb125fK77f7KOsbhSGiJrqEuUjFMyQ3fFJFvK*)
(*htiyrp3+uALOJKVzKSKCV2OjeZCbye1MLcvhYYx5+jHiE8SoMoiZ0FCWIgJ5*)
(*Xu3H8Qgfjkau3HczhMMJMZwtr+ZWzygPp5d5Z2JJ2CWecMduPtkzq5vD++uj*)
(*k9yf2cy57g3sq0yWfBDOXJ54w5oY7m/V8myhjD+PVfLX5Wb+utkq3qpDynae*)
(*nqjg+wnJoMUePI5fw780a/hC7cB7vpa85mLGFYUVZ1wseJgayLtpPrybGcij*)
(*ili+6y7gm54y7pSkclCYNqb0YDTQl4NJ8SwkJjCbmsrezFym46VMz2Uus4Dh*)
(*pEw2J2awpbCEgaZWyYP9jO2aYmJ+nuHZKUZndrJ33wznThzk7vVTPLh1mnde*)
(*WOTO0Vk+vCYMu3iCt04e4dbhRS7tW+L0zGGOTRzj2PgJruy5yvnR8xzrOspS*)
(*436W6/ZybuN+Xu08zN3+E1zuO85S5yFOjpwTf7PIQts+Tmw+yOHiEa6Uj3NT*)
(*yjfFR1ytmmZnZi+t68ZoFl5pyubQjrzI4P3vmf8GDnz+f9h46GUistoIDcqm*)
(*WlvBfNPK+aMxPpif5buTy3x78ij/mJvnwtYdLNQPsLNiiJ1VM8w0LXC45zAv*)
(*zp7mjecv8/D8Nd47f5kHJ1/g4fEr3Nz9PIfbx9me30RnfBEd0evYmlTEWEox*)
(*L1Z3cquhl1tNI1IXxIPmtnFQ6tb5lhHubt/H491HeX3LNBeKejiZ3MX5+CGu*)
(*J85yM36Rq7Enpa5dZjLgFbZ63KNB8QEbfJ6QE/ATycF/Ehv6J/HisVLD/0OJ*)
(*6gd6Yv7FovYBL+W/xP11S3xYOME9YfiryS1cjaribFgFzwXVMOu/iR7fHuHV*)
(*GFn+h4gOOklg0AU8g86i8D+Kp/8iSv/dBARMEBgwSqDPFpQutShtc8Q7xQmf*)
(*Igi3iiDCRk2wVZT4qpXzV1EozMJESjzMvOWxO37CHw9jNzyN3PE0XJlP2REf*)
(*Ayf8jZwIMnEmTKQydSbC5G+pTJzIsbWlxMmFelcPGpw9aFH40REYSntoGJuU*)
(*/rQ7uzNk7cheozWc0LPiirDptVVm3JXybdEHq2z55yprYZKlLJtIaSSPDYRZ*)
(*ejp9LKx6X8p7OsbpC6cMOChMmxENCd82yr6KRVmyXYaeAfnCyBIDA8qFlyXG*)
(*xmSZmZFpZUmBjT2V9i60OHvS6eVHW4iS9gglIykqJjOi2ZudyoFsLUcKcjhW*)
(*nMOh/FQmUzTsyctkUHLmFnUyPWuT6Ajxp8nTjK0qIw5l2XAp34mX0u3kd7Pn*)
(*4yIvfqxT89PGdD5tKOZ2dT19kglKlesoDG+gSttHc87KfdM3066to1uTxf61*)
(*qZxSR+u81fulhTyoWM/lrAz2xycxI216Ki6FQ5mZXC7O4/WaQt6uK+LN+g3c*)
(*bqzh1sZWLtW38cbANB/uOclH8+eEuaf55shZ/jx/lr+uneI/p+f450IfF/tr*)
(*mK+XnFmoYaEwXHePmY/6Mvltbzl/HqnhzwtN/HV909+8ur2ZP19o4PeD6/ms*)
(*LpSPMz34LEGk8eJNbztedDDnuIMZi2uMuRTsyMVQkUr4nRrMO+Va3qnN5bwc*)
(*051KVzY72dDp5sR2lYohVRRDkTGMRSfTr4pjNC6DHal5dMdq2STamJ5HS3El*)
(*TbWNtLV30TU4xMaVPNjTSd9wL3v3jnP+2F6undjHpQPiESZ6OT8lPmh6O+em*)
(*dnJ6YpIjYzMs9E0y2znBZMskB7csslf801TZBON5w0xnD3KgYIyT5cK/5gWe*)
(*bz2s812LXctM1c8wWbWTxfpp9uSID1m3jZfKxrhVOcmZkl2MpPbQmDlMRd1B*)
(*wgsnSeo/x45/PmP+O1h4/AdN+6+gzmqW/JQhv7X4mfoOrg6M8GB2lifPHeHJ*)
(*seO8u+cA57eMsVDXy86yXnZUTYqvnGN+ywFO7zrKSwfPCIfPc3v5JK8cOMZb*)
(*R1/k6tQRDraOMiS8aksoojW2gC0pRQxrSzhc1MKJDa08X9zGvux6xpNKmNCW*)
(*c6islQsdg8KsOcmDkpeLujiS1saxuF5Ox4xxPmq39H3L8hsdo9vjIrX2N1hv*)
(*e49M+8ckOX9JlOu/CXH7mjCPb4jx/oo85ZdsCv+Y2eg3OZN4QerrHu6m9XMv*)
(*ZyuvpDZxWXLq8cBi9nuWMOpSTvOaRnJtuoh3nSXY4zAKr+PYex3Dzusw9j7z*)
(*uPhMo/AZFx/Xj1LRSah7AxEu61E7pRBlpybCOlTynsh25RqcGJRW0XhaROJl*)
(*Hias+jsTBlp66cZcBZr5EGjqKYwS/2TiTqSpAo14sDjhWaqNL6m23milTLHx*)
(*otjFlQYfJV2BYWwLVUtdTGQmI4dZ8TOzWVmMBUv+8AjitLz+huzvLQMXPtBz*)
(*5JGeE5+JP/peT9q4noLv9Fz4Rs9Wd17936tXzq8biQz5Wc9UMqEpT1Zb8Hi1*)
(*DQ9l2zf0vXjVMJAXTVUs2sayfY2KdlsfNtkr2OqiYMDdk21OrrQ5OlJqb0+x*)
(*k2RWJ3caXL3oVvgzEBTKUGyUsEpDb0wwIwkqdiZqmIjTMB0XLX2/muFIJW2+*)
(*jtR7OFO0xoEcczvyLNZQZGVKma0erZ6r2RGuxxGNMUcCDVh20+M5Jz2OOehx*)
(*wHo1gyZ6VBgYkm7ogPcqRxz0pF8widGNgwuxjCTKMoAYI3vWGVvTYGpO3xob*)
(*dilc2SWZequHG9Uu7tIPKMi3c6JGsvZgZDD7kqJYzkrg+cIMjpYW8XxlDdda*)
(*e3S8uj9xlPuTx3l/+hhf7D/Oz0vL/PrcAn+c28+nB0e4vr2Fo50lLNVlcbJB*)
(*mNJbyA+76/h+upQfD5Txw9Eavj1Ty/eXmvn5agtPT8ny3vU86U7hszI1X+RF*)
(*8nmGmjfEM73o48YxPxcWPew5o/LkSnwgdwvi+ai5mCf9G/m4p5mL8hnHQ6VP*)
(*cHOkXeFBb2g4W6QudASE0aaMoMkjmBalms7weOpDo6kMi6U8OpXipCzyxXOV*)
(*bKigamMLte3tNG1uY0tfN5OTwxyZn+D4vjGWR7vY293Avu6N7OncyOSmZkbr*)
(*m+ir2kRXaQsdRe10FGymLbuLpqRWqlS1lPoVU+5RIPV1PR1BZWyOrKMxqon1*)
(*odVUxLSQL/4gP2gD5WEbKHJJo1GRSb1dAg32iZTZpaK1S2etTznRKUMoRJru*)
(*s9Re/pTON7+l66XPWLfjDKGZ4q9U61iXsEE8dIPkz24u9gxyZ9c0r0/O8UL/*)
(*LhYatjGyvpOuvM20SP/VsX6U/poJZrvnODK+xNndRzg7e1j4e5BT44vC3BnG*)
(*xDu1p9VSF1VIbVQ+TTH5dCQUMlXQxHRBve765gFtJd0ppWxNr2C0qJGZ6nb2*)
(*SZ7cU9rGVE4z4wlN7FJ3MhHcw5TfMLu8pui23UO9+RKFRidJNbqKxvQeoRYf*)
(*4mH9EU5WH2Jjfh9ny7cJtX6DNJurVFofpNuqn12WZey2TmS3bQhT1p6Mm7kx*)
(*YurFgKl4FdNY8Qp5JBrXEGwxiJvNbqzsljC1X8bU4RDmTvuxcp3DwWUCG4tW*)
(*nC1q8LQsEi5lEmkdj8Y2ihjbCGLEX8XYx6O2SyTcNlF3jc6K3wq1CUNlE0Ck*)
(*rT+xa8KItQkn1jqYOOsgkqz9SbMNIHtNEHl2QRQ6hbLOKZD1jsG6ssrbh9bg*)
(*UAYio3Ws2p2WzaHiMg5XVrFcVsa+uGSOS1182U3NA+sw/mUazPfGgfwk+t0o*)
(*mN/1V8ZdKflduPWb8OtXPRt+WW0mMuHX1cb/b0zDj6ut+EHfVbYN4QerZJ66*)
(*reNLqWd3oxs4HlXCnsgM5qSPPpFVwAvr1nM2O5fFtFTGU1KES6LElf+hMngu*)
(*t4grDU2SmwZ4MLeTf+wd4+MDk3x+YA9fzM/x5b49PNk7pZtn5pWtGzlVW87+*)
(*wkJ2JGSwPSqePcK4Uxs0vNYWKVkwgg/bgnlYruDtdCveiDHldZUJl31N2edo*)
(*Ro+1LXnGLihXu+Cw2g9nAzWuhmF4yXcPMvaULG1FsoEZeYbGlKz4QUMD1hsZ*)
(*kGNsRIKxBRHG5qhN5TVW1qwXntW42tKksKMtQDxipIq+2ET25ZZKdmnkaGWP*)
(*bv6/F1tGeb13J++JN3nY38W7g61c6azgUIP0HxXp7C5O5HBZHK9uyuDz0RK+*)
(*210pvKrl26P1fH2qkW9fbOOn6938fL6NH5bq5fulcL9YzXs5MaIEXhHOX5D3*)
(*PqmJ4jlNGKdjVdzISeZBUxn/M7SZb6eG+Xj7Ni5UFDEeFUmb1I+OgGC2hK2l*)
(*U9QSqKZJGUm9j4oG4VVLaDwNYfHSBlOpScyhTFvAuuxCKirraO7spmZTGy3d*)
(*XQzvGOHQob1cPXuU2xeP8eqpRW4cnuPinHifqV0c2b6duR7JWO0DjGwcYLBx*)
(*hMH6UTbldVOf0kpZZC0FfkXkuGaR55wuPMpgvSKHdEUBMc65JHgVoXbOROWU*)
(*RoyLVvqTSFKt15JuFk6KSShrjUIJMY9FYZ+DZ2gLNuotBDY8R5B4rJiZG6RO*)
(*XkPVuA83qY+OigwCXOKJljq/co+LlhgtW1Z8ZGoBjdG5FIVkkO6rlffM0V0r*)
(*F6UoJFFZTLZ6A2XJlVRnVlKVKsuJ6ylQZZMZqCXJLQG1tOGVczShpr6ESyZS*)
(*m3uSaO1DvPiMlXkAVx5HWPpIjlKKR/FD46iUtu9DnI0fSVbBpJqp0BpFo9VP*)
(*InN1lmSSYopWtUvZR8zqSYJXL+GpdxEHg1cxN7qDkdFrmFs+wN7mPsH275Du*)
(*fIsWt5NM+uzmTEg/N6MauaeVHJGSyq3oJK6q0zinymcptILhgHYaldvJVO4n*)
(*KugcAWE38Yq4i9faN/CNvUtIwutEJVyjpOAl6gpOSc5epiNvhg7J3C0JDdTJ*)
(*sSgPKSDdLZ1k10zinTLROKQS7RBPjIOGeOcIkp1UZLpEk+msIcsximzHSPId*)
(*woVRKspcI6l0k3rmrRGpafD6u8yyttblwSbFyjn3AHqCIxiRdrQ9OYWxuHjG*)
(*g1QsKII4J8fxlqGbzh89Wr2Gz1fZ8dWqlf8DvUQKfl/lwn8kG/6yypyfhFE/*)
(*Sd77SbLfjzoZ8f0qU75bbaebu+FHkzh+sc3lq4BK3oxu1PFqd0Q6e4UpZwqK*)
(*uVpewYtFRRzJyWIqU8tOyVNTmTkcyC/iUnUT7/YNiOeY499nDvPL5eP8deMc*)
(*f928xl8vi25el/KS5KNl/n1oljeGerna2srRkkoOCQPPlWbxTlc+X+zK4OlM*)
(*Mv+ZSOWnvih+aFHytNabX2uD+bFqLY82pPJKYRHbQzMpcc2QY5tPgkcpCe6F*)
(*JLtnkemaQJZdsPg/pXhxBc12jjTY2lBtY0OxrR0Za9yJt3FFY+lMoo0D2fJ8*)
(*jpWwzcKEHEtzcuzEmzkqKHfwptYlmGrXKKpcNWzyjGMgNEm8TSSjQT6MqXzY*)
(*HOhCjZ8dpd62lCosxDOaMRJszWKiMzdqIrm5KYqXu6K53hfHjR2pvDaVw2vD*)
(*GbzckcD+aAd2e1uyx8WaORdHyfY2bLa0ocPWgU1r7Bnz9WWPKlQ3N+qZ4gJe*)
(*bmnSzSW0Mk/E6aZm2kMj2Lo2kb74dAaTc+lPzac/uYDRzDJ25FWyI7+GEdFw*)
(*URODFW10VQuf6trp7Oynf3SKnpFxBnbsZHxygr1zMyztneHQ5Cj7BrqZ6Wzh*)
(*QF8vC/0D7OsbYmbrEDvahuht6KO9Ygsbi7dQn9NFtbadYk0ducEbyPTOI1N8*)
(*U457JlnCK613EXGe64nzLSHSex3hnnmoVzjinES8SyIZbimkOiURZRNPmFMW*)
(*bpJZnAM3YqXaiqJ0kZCBK0RPvULyzpuom5fxSenFzX8Dns6pKK3DiXNVk+oa*)
(*htZduOcWRoyjCpVdJKF24hXstfjYZuNtm4m3TQpKuziCnTQEOEjmsfLB3dQN*)
(*T1NvPEx98DDywc3QAzcDBS76LiIHXKRvV+hZ4i6ZxFX6c1d9WxSGziiMRMZO*)
(*uBnZEWDmSphwLMrMnzjTSFKMEtEaZJKtX0ShnvhL/T4qV++iYPUh6TtfkNfd*)
(*I8DmI1wdPsHG6TG2is9xUTwm3PsjioL/wWjMHV7MucbHVWf5z6Z5fmnt4Mfm*)
(*Mp6UF/KocD1vye96IaGemcgO+e3HaEx6gcL0t0nJ/pTYPMmW638kofQn0iqf*)
(*UlDxL5qr32Wg+XX2dN9hadt1DnQeYVfZCJuTGqgOE1575ZLtmS/HL1e4lUWy*)
(*SyqpLgmku8eQ7a4h3y2Wdc4x0hbWss4hkmLHCMqdI6kSVtW6R9KgEGbJsW9w*)
(*U+nKImdpC14+tPsG0a0MpS80itH45L95FRPHmDy34OzPBXMf7hoqJAe68bX4*)
(*je9Xu4mHctfNx/D7KjeRk8iG34RXvwmvfhNe/UdY9fc4LPFaqyyEX/Y8FV79*)
(*ahzHH9Z5fKOs5K3YZo7HlLM7KlPHq5M5hVwsLuFcXgGL2jTxV4mMZ2SwJ7+Q*)
(*Y6XV3Gzq4H7/IB9Kv/x4aTffn1/i9ysn+ev6Jf566Yqw66ruWuE/zhziqwMT*)
(*vDm4lRsdbZyvrOXshiJuVufxz63ZfDOezC8T0fy5XMCzmRSebQvnWWcQzzoi*)
(*edaexA/Nhbxf38BhbQ3dkdWSd5opi+qmJLKVDaoaKkKLqPBOlGwUyza/KHaE*)
(*qJlVSyZVx9Ijx7DeX8MGpYbasGRaNWkMJqQwnpzIriT5PslyfLW57MhYz0Je*)
(*BQfX1TOX18JURiN70mtZzq3heF4hRzPT5JhIto0KoDXMgxrhVqW3jfDKnKFA*)
(*axZiHZmOMGMm1pzJJEu2p5gzrLVkMMWSrkhj6YP02eZhzCZLfZqNDagzMiRv*)
(*tR6Jq1YTt0qfaFHcKj20egaSe43EF5oKa+1p8guiLTyaTaLWqES2JuVITsmj*)
(*L6OY3owStqQVMpxXreNUZ2KhZJscamNzqUwqYH1SPukJwpH0QnLXVZCSVUhG*)
(*fjHrN5RTU1VNW30d3Q21bK2uZGtFOXUZOVSvKL2ACtlmg/T3hamlFCSWk5dQ*)
(*SZQykwjPdMKck4UR8ZIpYiRPaIiwjkZlGycZJEG4kojPmmQUkjlc1sTjtiYa*)
(*hVUk3lZhkuFXxicG4SSe2MUqVvxGqu4+9GYBLVil7MC8YBqbygUcSvZildiH*)
(*iU8FpmsyJefE4GgSLMxQCGuc8DB0wF3kbOCKo5G37C9E1kdhZxyPrVEctsZq*)
(*HM3CcLcMkff2x8XMU17niqeZn+4zuAuvXAxkO30FzpIzVpjlLsyKFJ5FmCgI*)
(*X/Hr4rtUloFo7FU6Tia5r5W+UXjpuOIV1WRYJlBokau7rq/eYhOtZr206fXT*)
(*tGoXJasOkW7wIhqzt/CzfYyd42NMnT7C3ONzrNw/wlvxD3IC32V7/F2urbvF*)
(*59Xn+aV5hu+ry/imPI0vilL4JD+Dh5mFXEuuYSG6g57IHRSplkhcK94z7gH+*)
(*iZ/im/Yl/plfEZL7FTG5/6Qg+xaNBS9Ijn+BXc0nma5fYEfJID3aFlpiq8iT*)
(*viVLWJXqmk2y+N9Ep2RSnONJdxFP5RJFnsNa8uwjJfuFk7cmhCK7UErsgyl3*)
(*DKXaOVQ4FU6TaziNLmE6rXdwpMrdg01e/nT6BP3trzTxjMQnSjvRMKRQsmeN*)
(*F+fkmN6RY/yxsGplnOjPwqu/fdXKHDLuOn/1/8e3/+940b/1my4TmvNU/NcP*)
(*4sd+NIziF/N0nriXcs2/hIWAHEak3W8PjmavJonFhCTxBbHsilAzFKNhRNg5*)
(*m53HcyXlXKtr5m7nZt4c6ePeZD/v7Rvl06Upvj5ygO+WF/lB9J14r8cT/bze*)
(*08xrXS1cqq/mpPQdp3IzuS556kFjDF9ti+C3ncKm3Yk8Gwrj5xZ3fq4S5lZ6*)
(*8mtlKE/KkiVHlbCcVkVPRA0NkW00xA9QH99DXWwbjWtraArO1o0Bmg1J4bAm*)
(*lQsZ+ZzOKGRPTDp9kiO61Tm0h2npj85mNjWH5Zw8ThQUcaakgrO17Vxo6hGW*)
(*jvBKzxS3+he40TvP7d4FPhg9wJcTkmsnx3m4rYPrrdUsVRUyXZTOeFYsu7PX*)
(*cq48gbc6svhgIIfHY8LgyXU8FL0zWcjr43lc6ojnaGk4+xJ9GFU6ss3VgU57*)
(*R0pNrIRN5tJPW5NgaK0rM83syDS3J1HWaWRdpKEFgQYm0vcb4qVvQqC8xsfA*)
(*HB9DSxT6ZtiLX/bWt5TsIZnX3BU/Q1vxDZa4Gtnq7tVgbmyDyYrM7bCwchY5*)
(*YmXlgLWVLXbm1jiYWeBiao6byNXUUtq9JXZGlljL/q2MbLA2dmaNqYfu/gY2*)
(*pkqspb1bG4ukzdv+d95dOykdDZXYG/rJcoBsG4CFUQBmxgGYCk/MjDwwN3TH*)
(*XN+eNcYeWIq3sTQNQ1/yvIGVFn37IlYratAL3ohBbA8m8f2YhLVj4lGOtUsR*)
(*bpIxlQ4pBNqoCbMNRb0mDI1TFBrx1VGKdCLdcglzX0eYaykqRSka3w2kq6so*)
(*1TbRUCBttXATLVK2FXbSoN1IUWQ5mb75pMi2Wq80cvyz2BCUTXfMypyhhTRL*)
(*G6jxy6QuOI+OxCpGizYzVzvEcO5GtsZW0uJfSIuiiG5FIyNe25jwmmDObZ7d*)
(*FvuYMDlKt/ElqizfJN3+E/lcT3D0+BJTz39h7PkJpooPUfi8z3rNI/av/5h3*)
(*W/7BD63XebZpD18WZPBFnopPM1R8mBLNm/EpnFfnMR1UQYtvF1rPCUL9juMe*)
(*dIM1oW9hE/kQW8372Me+h2fs68TGnEOrnic7Yoy80E7WBVZQoMyhwFtLvmea*)
(*ztsmOKboxjZobJN08+rE2ESRYKsiSY5pqnUwWssgtBb+ZFj4kmPhQ5540yLJ*)
(*waW2vmz0ULPRM5JmD5VOZW7uNPn4/32+PTiSYfEHk8np0tdLFktO5aDw43RQ*)
(*DLft5PuYBPK1vo+wSsFvK6zS8cpZ5PhfVlnprsVZ8VN/j20XrTbV8Wtl3Pt3*)
(*sv6J+LAv9AJ4Ijn8A6sMzivymJHvNuAVzUBgFDMRsSzEJDC/NpqJyCj616oZ*)
(*iI8VT5LGfHY+5yXX3drYwp2hbt6c6OXR4gRfPj/H98cP8/So6MgS3y3u5qOd*)
(*27jTXce5qmIOSaacUquZCQ1kSe3BZa0LHza483RAyR+jYfzQ6cFXZTZ8mW/B*)
(*N7k2/DvPg0fZEdzJyqbXRU2h9MupNtlkKKrI8KyUPFIkeSSdXOswehXx9K0J*)
(*ZMzBjwVfFTO+EWy286HKRkmVSyQtPvF0KuMYDFrLTukLpsPXMh+TwmJWKc8V*)
(*NXKivJVz9ds40zTK8bphzlYN8lLzIG+39/BgcydvdDRypmodE1lJ9CSo6Fob*)
(*KH1kECeKNLzZkcnbHYm8P5jOY+HUJ3tL+Wypnk8O1fNgooyb3TksZgazS+XF*)
(*kJ+n1HVvKiydyBGmpJu7kWzuQpywJtNKQaGDkhx7H7Q2K+dUFKjNnQgQ5iiF*)
(*Hyv37vWTbVbm+PA1tpPcYkGwqausX3mNPW765qzRM8VOmOVgImwytcfUZA0m*)
(*wsEVZpmY2WBsvHJ/DxOMhIEm4ucs9A2w0jfETJZN9YykNMZE3xRjPTMM9czR*)
(*l/qiJ57cUM8BAz1HDFc7YrDaHsNVa0S2ImudLMTvW+gpZB/uGIt3MZS8ZSD9*)
(*qpGBM4b6a3T7MZd8ZSrsMpX6q2cQiL5FCvq2BayyLWS1dw0G0VuxTN2BTVw/*)
(*dqFtuCprUfqUEip5M9E3h/SATAojCiiLLaUiqZHSlE3kx20iM0rK2G0Uii+r*)
(*zByQDDvOzs1zLGxf4rldRzk6cZQTu07q5hjtLx3WzYlcGllBZbSwILWJ/pw2*)
(*9pf0sierjZHYGrpUxXRryplYt5nTsp/bk6d5oWcfy1UjTCS1MRq2kemwPg6t*)
(*/DcYdZhTYSc543qaw3aX2GX7Oq0OH1AgrIr0/hYHn38Lqz7H2O8LzHweofD7*)
(*kMK4R8wXfcyd6nt8sP4I/0xr4aNEDf9M8OL9GF/e1QTzujqGs2HpTPiV0OTV*)
(*TpzDIL7uh7DzuoiZ301MAu5iEnIPM9U91oS9JBxcIFgxhMq1DY1LOQnOf8+d*)
(*k+YSh9Y1lljbaMnisURYxhJqrpFsG4nKPAS1RSDRlv4kWChJMPMm0dSLZFMF*)
(*qabu0n+6kWchddJSZOH6/1Qg9fX/AlUAxNU=*)
(*"], "Byte", ColorSpace -> "RGB", Interleaving -> True]*)


(* ::Input:: *)
(*ColorNegate[EdgeDetect[nyc]]*)


(* ::Input:: *)
(*Manipulate[Blur[nyc,n],{n,1,20}]*)


(* ::Input:: *)
(*Table[EdgeDetect[Blur[nyc,n]],{n,1,10}]*)


(* ::Input:: *)
(*ImageCollage[{nyc,Blur[nyc],EdgeDetect[nyc],Binarize[nyc]}]*)


(* ::Input:: *)
(*ImageAdd[nyc,Binarize[nyc]]*)


(* ::Input:: *)
(*Manipulate[EdgeDetect[Blur[nyc,n]],{n,1,20}]*)


(* ::Input:: *)
(*EdgeDetect[Graphics3D[Sphere[]]]*)


(* ::Input:: *)
(*Manipulate[Blur[Graphics[Style[Disk[],Purple]],n],{n,0,20}]*)


(* ::Input:: *)
(*ImageCollage[Table[Graphics[Style[Disk[],RandomColor[]]],{n,9}]]*)


(* ::Input:: *)
(*ImageCollage[Table[Graphics3D[Style[Sphere[],Hue[x]]],{x,0,1,0.2}]]*)


(* ::Input:: *)
(*Table[Blur[Graphics[Disk[]],n],{n,0,30,5}]*)


(* ::Input:: *)
(*ImageAdd[Graphics[Style[Disk[],Red]],Graphics[Style[Disk[],Blue]]]*)


(* ::Input:: *)
(*ImageAdd[nyc,ColorNegate[EdgeDetect[nyc]]]*)


(* ::Input:: *)
(*EdgeDetect[Binarize[nyc]]*)


(* ::Input:: *)
(*ColorNegate[EdgeDetect[Graphics[Disk[]]]]*)


(* ::Input:: *)
(*ImageAdd[nyc,nyc]*)


(* ::Section:: *)
(*Chapter 11. Strings and Text*)


(* ::Input:: *)
(*StringJoin["Hello","Hello"]*)


(* ::Input:: *)
(*ToUpperCase[StringJoin[Alphabet[]]]*)
(**)


(* ::Input:: *)
(*StringJoin[Reverse[Alphabet[]]]*)


(* ::Input:: *)
(*StringJoin[Table["AGCT",100]]*)


(* ::Input:: *)
(*StringJoin[Take[Alphabet[],6]]*)


(* ::Input:: *)
(*Column[Table[StringTake["this is about strings",n],{n,1,StringLength["this is about strings"]}]]*)


(* ::Input:: *)
(*BarChart[StringLength[TextWords["A long time ago, in a galaxy far, far away"]]]*)


(* ::Input:: *)
(*StringLength[WikipediaData["Computer"]]*)


(* ::Input:: *)
(*Length[TextWords[WikipediaData["Computer"]]]*)


(* ::Input:: *)
(*Part[TextSentences[WikipediaData["Strings"]],1]*)


(* ::Input:: *)
(*StringJoin[Table[Part[Characters[Part[TextSentences[WikipediaData["Computers"]],n]],1],{n,1,Length[TextSentences[WikipediaData["Computers"]]]}]]*)


(* ::Input:: *)
(*Max[StringLength[WordList[]]]*)


(* ::Input:: *)
(*Count[StringTake[WordList[],1],"q"]*)


(* ::Input:: *)
(*ListLinePlot[Table[Length[Characters[Part[WordList[],n]]],{n,1,1000}]]*)


(* ::Input:: *)
(*WordCloud[Characters[StringJoin[WordList[]]]]*)


(* ::Input:: *)
(*WordCloud[StringTake[StringReverse[WordList[]],1]]*)


(* ::Input:: *)
(*RomanNumeral[1959]*)


(* ::Input:: *)
(*Max[StringLength[RomanNumeral[Range[2020]]]]*)


(* ::Input:: *)
(*WordCloud[StringTake[RomanNumeral[Range[100]],1]]*)


(* ::Input:: *)
(*Length[Alphabet["Russian"]]*)


(* ::Input:: *)
(*ToUpperCase[Alphabet["Greek"]]*)


(* ::Input:: *)
(*BarChart[LetterNumber[Characters["Wolfram"]]]*)


(* ::Input:: *)
(*StringJoin[FromLetterNumber[Table[RandomInteger[{1,26}],1000]]]*)


(* ::Input:: *)
(*Table[StringJoin[FromLetterNumber[Table[RandomInteger[{1,26}],5]]],100]*)


(* ::Input:: *)
(*ImageAdd[EdgeDetect[Rasterize[Style["A",200]]],ColorNegate[Binarize[Rasterize[Style["A",200]]]]]*)


(* ::Input:: *)
(*Manipulate[Style[FromLetterNumber[n],100],{n,1,26,1}]*)


(* ::Input:: *)
(*Manipulate[ColorNegate[EdgeDetect[Rasterize[Style[FromLetterNumber[n],100]]]],{n,1,26,1}]*)


(* ::Input:: *)
(*Manipulate[Blur[Rasterize[Style["A",200]],n],{n,1,50,1}]*)


(* ::Input:: *)
(*StringJoin[StringJoin[Alphabet[]],StringReverse[StringJoin[Alphabet[]]]]*)


(* ::Input:: *)
(*Column[{StringJoin[Alphabet[]],StringJoin[Reverse[Alphabet[]]]}]*)


(* ::Input:: *)
(*Length[TextSentences[WikipediaData["Computer"]]]*)


(* ::Input:: *)
(*StringJoin[TextWords[Take[TextSentences[WikipediaData["Strings"]],1]]]*)


(* ::Input:: *)
(*Max[StringLength[TextWords[WikipediaData["Computers"]]]]*)


(* ::Input:: *)
(*ListLinePlot[Table[Length[Characters[RomanNumeral[n]]],{n,1,2000,1}]]*)


(* ::Input:: *)
(*StringJoin[Table[RomanNumeral[n],{n,1,100,1}]]*)


(* ::Input:: *)
(*ListLinePlot[LetterNumber[Characters[StringJoin[Table[RomanNumeral[n],{n,1,30,1}]]]]]*)


(* ::Input:: *)
(*Max[Table[Length[Characters[IntegerName[n]]],{n,1,1000}]]*)


(* ::Input:: *)
(*Table[Style[Part[ToUpperCase[Alphabet[]],n],20,RandomColor[]],{n,1,Length[Alphabet[]]}]*)


(* ::Input:: *)
(*Table[StringJoin[RandomChoice[Alphabet["Russian"],5]],100]*)


(* ::Input:: *)
(*Manipulate[EdgeDetect[Blur[Rasterize[Style["A",200]],n]],{n,1,50,1}]*)


(* ::Input:: *)
(*ImageAdd[ColorNegate[Rasterize[Style["A",200]]],ColorNegate[Rasterize[Style["B",200]]]]*)


(* ::Section:: *)
(*Chapter 12. Sounds*)


(* ::Input:: *)
(*Sound[{SoundNote[0],SoundNote[4],SoundNote[7]}]*)


(* ::Input:: *)
(*Sound[SoundNote["A",2,"Cello"]]*)


(* ::Input:: *)
(*Sound[Table[SoundNote[n,0.05],{n,48}]]*)


(* ::Input:: *)
(*Sound[Table[SoundNote[n,0.1],{n,12,0,-1}]]*)


(* ::Input:: *)
(*Sound[Table[SoundNote[12(n-1)],{n,1,5}]]*)


(* ::Input:: *)
(*Sound[Table[SoundNote[RandomInteger[12],0.2,"Trumpet"],10]]*)


(* ::Input:: *)
(*Sound[Table[SoundNote[Part[IntegerDigits[2^31],n],0.1],{n,1,Length[IntegerDigits[2^31]]}]]*)


(* ::Input:: *)
(*Sound[Table[SoundNote[Part[Characters["CABBAGE"],n],0.3,"Guitar"],{n,1,Length[Characters["CABBAGE"]]}]]*)


(* ::Input:: *)
(*Sound[Table[SoundNote[LetterNumber[Part[Characters["WOLFRAM"],n]],0.1],{n,1,Length[Characters["WOLFRAM"]]}]]*)


(* ::Input:: *)
(*Sound[{SoundNote["D",1,"Cello"],SoundNote["D",1,"Piano"],SoundNote["D",1,"Guitar"]}]*)


(* ::Input:: *)
(*Sound[Table[SoundNote[n],{n,0,12,3}]]*)


(* ::Input:: *)
(*Sound[Table[SoundNote[7(n-1)],{n,1,5}]]*)


(* ::Section:: *)
(*Chapter 13.*)


(* ::Input:: *)
(*Grid[Table[i j,{i,12},{j,12}]]*)


(* ::Input:: *)
(*Grid[Table[RomanNumeral[i j],{i,5},{j,5}]]*)


(* ::Input:: *)
(*Grid[Table[RandomColor[],10,10]]*)


(* ::Input:: *)
(*Grid[Table[Style[RandomInteger[10],RandomColor[]],10,10]]*)


(* ::Input:: *)
(*Grid[Table[StringJoin[FromLetterNumber[i],FromLetterNumber[j]],{i,26},{j,26}]]*)


(* ::Input:: *)
(*Grid[{{PieChart[{1,4,3,5,2}],NumberLinePlot[{1,4,3,5,2}]},{ListLinePlot[{1,4,3,5,2}],BarChart[{1,4,3,5,2}]}}]*)


(* ::Input:: *)
(*ArrayPlot[Table[Hue[x y],{x,0,1,0.05},{y,0,1,0.05}]]*)


(* ::Input:: *)
(*ArrayPlot[Table[Hue[x/y],{x,50},{y,50}]]*)


(* ::Input:: *)
(*ArrayPlot[Table[StringLength[RomanNumeral[i j]],{i,100},{j,100}]]*)


(* ::Input:: *)
(*Grid[Table[i+j,{i,20},{j,20}]]*)


(* ::Input:: *)
(*Grid[Table[Style[RandomInteger[10],RandomInteger[32],RandomColor[]],10,10]]*)


(* ::Section:: *)
(*Chapter 14.*)


(* ::Input:: *)
(*Graphics[Table[Circle[{0,0},r],{r,5}]]*)


(* ::Input:: *)
(*Graphics[Table[Style[Circle[{0,0},r],RandomColor[]],{r,10}]]*)


(* ::Input:: *)
(*Graphics[Table[Circle[{x,y},1],{x,10},{y,10}]]*)


(* ::Input:: *)
(*Graphics[Table[Point[{x,y}],{x,10},{y,10}]]*)


(* ::Input:: *)
(*Manipulate[Graphics[Table[Circle[{0,0},r],{r,n}]],{n,1,20}]*)


(* ::Input:: *)
(*Graphics3D[Table[Style[Sphere[RandomInteger[10,3]],RandomColor[]],50]]*)


(* ::Input:: *)
(*Graphics3D[Table[Style[Sphere[{x,y,z}],RGBColor[x/10,y/10,z/10]],{x,10},{y,10},{z,10}]]*)


(* ::Input:: *)
(*Manipulate[Graphics[Table[Circle[{a x,0}],{x,10}]],{a,-2,2}]*)


(* ::Input:: *)
(*Graphics[Table[RegularPolygon[{x,y},1/2,6],{x,5},{y,5}]]*)


(* ::Input:: *)
(*Graphics3D[Line[Table[{RandomReal[50],RandomReal[50],RandomReal[50]},50]]]*)


(* ::Input:: *)
(*Manipulate[Graphics[Table[Point[{x,y}],{x,n},{y,n}]],{n,5,20}]*)


(* ::Input:: *)
(*Graphics[Table[Circle[RandomReal[10,2]],30]]*)


(* ::Input:: *)
(*Graphics[Table[Style[RegularPolygon[RandomReal[100,2],10,RandomInteger[{3,8}]],Opacity[0.5],RandomColor[]],100]]*)


(* ::Input:: *)
(*Graphics3D[Table[Style[Point[{x,y,z}],RandomColor[]],{x,10},{y,10},{z,10}]]*)


(* ::Input:: *)
(*Graphics[Line[Table[Take[IntegerDigits[n],2],{n,10,100,1}]]]*)


(* ::Input:: *)
(*Graphics3D[Line[Table[Take[IntegerDigits[n],3],{n,100,1000,1}]]]*)


(* ::Section:: *)
(*Chapter 16.*)


(* ::Input:: *)
(*\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Switzerland", Typeset`boxes$$ = TemplateBox[{"\"Switzerland\"", RowBox[{"Entity", "[", RowBox[{"\"Country\"", ",", "\"Switzerland\""}], "]"}], "\"Entity[\\\"Country\\\", \\\"Switzerland\\\"]\"", "\"country\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Switzerland", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "Country", "desc" -> "a country", "input" -> "*C.Switzerland-_*Country-"}, {"name" -> "Movie", "desc" -> "a movie", "input" -> "*C.Switzerland-_*Movie-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3670367`7.016254485024922, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{135.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Flag"]*)


(* ::Input:: *)
(*\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Elephant", Typeset`boxes$$ = TemplateBox[{"\"elephants\"", RowBox[{"Entity", "[", RowBox[{"\"Species\"", ",", "\"Family:Elephantidae\""}], "]"}], "\"Entity[\\\"Species\\\", \\\"Family:Elephantidae\\\"]\"", "\"species specification\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Elephant", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "5", "Values" -> {{"name" -> "Species", "desc" -> "a species specification", "input" -> "*C.Elephant-_*Species-"}, {"name" -> "Periodical", "desc" -> "a periodical", "input" -> "*C.Elephant-_*Periodical-"}, {"name" -> "Movie", "desc" -> "a movie", "input" -> "*C.Elephant-_*Movie-"}, {"name" -> "DisplayFormat", "desc" -> "a display format", "input" -> "*C.Elephant-_*DisplayFormat-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Elephant-_*Word-"}}}, {"type" -> "SubCategory", "word" -> "Elephant", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "Family:Elephantidae", "desc" -> "elephants", "input" -> "*DPClash.SpeciesE.Elephant-_*Family%3AElephantidae-"}, {"name" -> "Species:LoxodontaAfricana", "desc" -> "Loxodonta africana", "input" -> "*DPClash.SpeciesE.Elephant-_*Species%3ALoxodontaAfricana-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4190419`7.073802443739129, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{182.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Image"]*)


(* ::Input:: *)
(*EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Planets", Typeset`boxes$$ = TemplateBox[{"\"planets\"", RowBox[{"EntityClass", "[", RowBox[{"\"Planet\"", ",", "All"}], "]"}], "\"EntityClass[\\\"Planet\\\", All]\"", "\"planets\""}, "EntityClass"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Planets", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "PlanetClass", "desc" -> " referring to planets", "input" -> "*C.Planets-_*PlanetClass-"}, {"name" -> "ExoplanetClass", "desc" -> " referring to exoplanets", "input" -> "*C.Planets-_*ExoplanetClass-"}, {"name" -> "MinorPlanetClass", "desc" -> " referring to minor planets", "input" -> "*C.Planets-_*MinorPlanetClass-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Planets-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3850385`7.037049150281336, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{123.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Mass"]*)


(* ::Input:: *)
(*BarChart[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Planets", Typeset`boxes$$ = TemplateBox[{"\"planets\"", RowBox[{"EntityClass", "[", RowBox[{"\"Planet\"", ",", "All"}], "]"}], "\"EntityClass[\\\"Planet\\\", All]\"", "\"planets\""}, "EntityClass"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Planets", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "PlanetClass", "desc" -> " referring to planets", "input" -> "*C.Planets-_*PlanetClass-"}, {"name" -> "ExoplanetClass", "desc" -> " referring to exoplanets", "input" -> "*C.Planets-_*ExoplanetClass-"}, {"name" -> "MinorPlanetClass", "desc" -> " referring to minor planets", "input" -> "*C.Planets-_*MinorPlanetClass-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Planets-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3850385`7.037049150281336, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{123.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Mass"]]*)


(* ::Input:: *)
(*ImageCollage[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Planets", Typeset`boxes$$ = TemplateBox[{"\"planets\"", RowBox[{"EntityClass", "[", RowBox[{"\"Planet\"", ",", "All"}], "]"}], "\"EntityClass[\\\"Planet\\\", All]\"", "\"planets\""}, "EntityClass"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Planets", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "PlanetClass", "desc" -> " referring to planets", "input" -> "*C.Planets-_*PlanetClass-"}, {"name" -> "ExoplanetClass", "desc" -> " referring to exoplanets", "input" -> "*C.Planets-_*ExoplanetClass-"}, {"name" -> "MinorPlanetClass", "desc" -> " referring to minor planets", "input" -> "*C.Planets-_*MinorPlanetClass-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Planets-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3850385`7.037049150281336, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{123.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Image"]]*)


(* ::Input:: *)
(*EdgeDetect[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "China", Typeset`boxes$$ = TemplateBox[{"\"China\"", RowBox[{"Entity", "[", RowBox[{"\"Country\"", ",", "\"China\""}], "]"}], "\"Entity[\\\"Country\\\", \\\"China\\\"]\"", "\"country\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "China", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "Country", "desc" -> "a country", "input" -> "*C.China-_*Country-"}, {"name" -> "Species", "desc" -> "a species specification", "input" -> "*C.China-_*Species-"}, {"name" -> "GivenName", "desc" -> "a given name", "input" -> "*C.China-_*GivenName-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.China-_*AdministrativeDivision-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4330433`7.088076317126199, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{108.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Flag"]]*)


(* ::Input:: *)
(*\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Empire State Building", Typeset`boxes$$ = TemplateBox[{"\"Empire State Building\"", RowBox[{"Entity", "[", RowBox[{"\"Building\"", ",", "\"EmpireStateBuilding::h583b\""}], "]"}], "\"Entity[\\\"Building\\\", \\\"EmpireStateBuilding::h583b\\\"]\"", "\"building\""}, "Entity"], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.7590759`7.331830196668315, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{164.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Height"]*)


(* ::Input:: *)
(*EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Empire State Building", Typeset`boxes$$ = TemplateBox[{"\"Empire State Building\"", RowBox[{"Entity", "[", RowBox[{"\"Building\"", ",", "\"EmpireStateBuilding::h583b\""}], "]"}], "\"Entity[\\\"Building\\\", \\\"EmpireStateBuilding::h583b\\\"]\"", "\"building\""}, "Entity"], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.7590759`7.331830196668315, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{164.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Height"]/EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Pyramid of Giza", Typeset`boxes$$ = TemplateBox[{"\"Great Pyramid of Giza\"", RowBox[{"Entity", "[", RowBox[{"\"Building\"", ",", "\"GreatPyramidOfGiza::jbm66\""}], "]"}], "\"Entity[\\\"Building\\\", \\\"GreatPyramidOfGiza::jbm66\\\"]\"", "\"building\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Pyramid of Giza", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "3", "Values" -> {{"name" -> "Building", "desc" -> "a structure", "input" -> "*C.Pyramid+of+Giza-_*Building-"}, {"name" -> "HistoricalSite", "desc" -> "a historic site", "input" -> "*C.Pyramid+of+Giza-_*HistoricalSite-"}, {"name" -> "BuildingClass", "desc" -> "a class of structures", "input" -> "*C.Pyramid+of+Giza-_*BuildingClass-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4810481`7.133733497146663, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{182.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Height"]*)


(* ::Input:: *)
(*EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Mount Everest", Typeset`boxes$$ = TemplateBox[{"\"Mount Everest\"", RowBox[{"Entity", "[", RowBox[{"\"Mountain\"", ",", "\"MountEverest\""}], "]"}], "\"Entity[\\\"Mountain\\\", \\\"MountEverest\\\"]\"", "\"mountain\""}, "Entity"], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3680368`7.017436239446353, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{137.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Elevation"]/EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Empire State Building", Typeset`boxes$$ = TemplateBox[{"\"Empire State Building\"", RowBox[{"Entity", "[", RowBox[{"\"Building\"", ",", "\"EmpireStateBuilding::h583b\""}], "]"}], "\"Entity[\\\"Building\\\", \\\"EmpireStateBuilding::h583b\\\"]\"", "\"building\""}, "Entity"], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.6430643`7.259799393697057, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{164.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Height"]*)


(* ::Input:: *)
(*DominantColors[ImageCollage[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Europe", Typeset`boxes$$ = TemplateBox[{"\"Europe\"", RowBox[{"Entity", "[", RowBox[{"\"GeographicRegion\"", ",", "\"Europe\""}], "]"}], "\"Entity[\\\"GeographicRegion\\\", \\\"Europe\\\"]\"", "\"geographic region\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Europe", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "3", "Values" -> {{"name" -> "GeographicRegion", "desc" -> "a continent", "input" -> "*C.Europe-_*GeographicRegion-"}, {"name" -> "CountryClass", "desc" -> "a class of countries", "input" -> "*C.Europe-_*CountryClass-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Europe-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3660366`7.015069506167247, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{160.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Countries"],"Flag"]],5]*)


(* ::Input:: *)
(*DominantColors[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Starry Night", Typeset`boxes$$ = TemplateBox[{"\"The Starry Night\"", RowBox[{"Entity", "[", RowBox[{"\"Artwork\"", ",", "\"TheStarryNight::VincentVanGogh\""}], "]"}], "\"Entity[\\\"Artwork\\\", \\\"TheStarryNight::VincentVanGogh\\\"]\"", "\"artwork\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Starry Night", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "VisualArts", "desc" -> "a painting", "input" -> "*C.Starry+Night-_*VisualArts-"}, {"name" -> "MusicAlbum", "desc" -> "a music album", "input" -> "*C.Starry+Night-_*MusicAlbum-"}, {"name" -> "MusicWork", "desc" -> "a music work", "input" -> "*C.Starry+Night-_*MusicWork-"}, {"name" -> "Gene", "desc" -> "a gene", "input" -> "*C.Starry+Night-_*Gene-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.6240624`7.246773010455259, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{155.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Image"],3]*)


(* ::Input:: *)
(*PieChart[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Europe", Typeset`boxes$$ = TemplateBox[{"\"Europe\"", RowBox[{"Entity", "[", RowBox[{"\"GeographicRegion\"", ",", "\"Europe\""}], "]"}], "\"Entity[\\\"GeographicRegion\\\", \\\"Europe\\\"]\"", "\"geographic region\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Europe", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "3", "Values" -> {{"name" -> "GeographicRegion", "desc" -> "a continent", "input" -> "*C.Europe-_*GeographicRegion-"}, {"name" -> "CountryClass", "desc" -> "a class of countries", "input" -> "*C.Europe-_*CountryClass-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Europe-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5960596`7.226834680513072, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{160.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Countries"],"GDP"]]*)


(* ::Input:: *)
(*ImageAdd[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Australia", Typeset`boxes$$ = TemplateBox[{"\"Australia\"", RowBox[{"Entity", "[", RowBox[{"\"Country\"", ",", "\"Australia\""}], "]"}], "\"Entity[\\\"Country\\\", \\\"Australia\\\"]\"", "\"country\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Australia", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "Country", "desc" -> "a country", "input" -> "*C.Australia-_*Country-"}, {"name" -> "GeographicRegion", "desc" -> "a continent", "input" -> "*C.Australia-_*GeographicRegion-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5270527`7.17339903598538, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{123.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Flag"],\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Koala", Typeset`boxes$$ = TemplateBox[{"\"koala\"", RowBox[{"Entity", "[", RowBox[{"\"Species\"", ",", "\"Species:PhascolarctosCinereus\""}], "]"}], "\"Entity[\\\"Species\\\", \\\"Species:PhascolarctosCinereus\\\"]\"", "\"species specification\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Koala", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "3", "Values" -> {{"name" -> "Species", "desc" -> "a species specification", "input" -> "*C.Koala-_*Species-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Koala-_*Word-"}, {"name" -> "TranslationData", "desc" -> " referring to translations", "input" -> "*C.Koala-_*TranslationData-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4130413`7.067538472429237, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{162.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Image"]]*)


(* ::Input:: *)
(*ImageCollage[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Europe", Typeset`boxes$$ = TemplateBox[{"\"Europe\"", RowBox[{"Entity", "[", RowBox[{"\"GeographicRegion\"", ",", "\"Europe\""}], "]"}], "\"Entity[\\\"GeographicRegion\\\", \\\"Europe\\\"]\"", "\"geographic region\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Europe", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "3", "Values" -> {{"name" -> "GeographicRegion", "desc" -> "a continent", "input" -> "*C.Europe-_*GeographicRegion-"}, {"name" -> "CountryClass", "desc" -> "a class of countries", "input" -> "*C.Europe-_*CountryClass-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Europe-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4640464`7.118106401327716, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{160.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Countries"],"FlagImage"]]*)


(* ::Input:: *)
(*EdgeDetect[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Starry Night", Typeset`boxes$$ = TemplateBox[{"\"The Starry Night\"", RowBox[{"Entity", "[", RowBox[{"\"Artwork\"", ",", "\"TheStarryNight::VincentVanGogh\""}], "]"}], "\"Entity[\\\"Artwork\\\", \\\"TheStarryNight::VincentVanGogh\\\"]\"", "\"artwork\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Starry Night", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "VisualArts", "desc" -> "a painting", "input" -> "*C.Starry+Night-_*VisualArts-"}, {"name" -> "MusicAlbum", "desc" -> "a music album", "input" -> "*C.Starry+Night-_*MusicAlbum-"}, {"name" -> "MusicWork", "desc" -> "a music work", "input" -> "*C.Starry+Night-_*MusicWork-"}, {"name" -> "Gene", "desc" -> "a gene", "input" -> "*C.Starry+Night-_*Gene-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4370437`7.092069857743257, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{155.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Image"]]*)


(* ::Input:: *)
(*ColorNegate[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Mona Lisa", Typeset`boxes$$ = TemplateBox[{"\"Mona Lisa\"", RowBox[{"Entity", "[", RowBox[{"\"Artwork\"", ",", "\"MonaLisa::LeonardoDaVinci\""}], "]"}], "\"Entity[\\\"Artwork\\\", \\\"MonaLisa::LeonardoDaVinci\\\"]\"", "\"artwork\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Mona Lisa", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "5", "Values" -> {{"name" -> "VisualArts", "desc" -> "a painting", "input" -> "*C.Mona+Lisa-_*VisualArts-"}, {"name" -> "Person", "desc" -> "a person", "input" -> "*C.Mona+Lisa-_*Person-"}, {"name" -> "MusicWork", "desc" -> "a music work", "input" -> "*C.Mona+Lisa-_*MusicWork-"}, {"name" -> "MusicAlbum", "desc" -> "a music album", "input" -> "*C.Mona+Lisa-_*MusicAlbum-"}, {"name" -> "Movie", "desc" -> "a movie", "input" -> "*C.Mona+Lisa-_*Movie-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3950395`7.048185516399295, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{128.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Image"]]*)


(* ::Section:: *)
(*Chapter 17.*)


(* ::Input:: *)
(*UnitConvert[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "4.5 lbs", Typeset`boxes$$ = TemplateBox[{"4.5", "\"lb\"", "pounds", "\"Pounds\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {{"type" -> "Unit", "word" -> "lbs", "template" -> "Assuming ${desc1} for \"${word}\". Use ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "Pounds", "desc" -> "pounds-mass", "input" -> "UnitClash_*lbs.*Pounds--"}, {"name" -> "TroyPounds", "desc" -> "troy pounds", "input" -> "UnitClash_*lbs.*TroyPounds--"}, {"name" -> "ApothecariesPounds", "desc" -> "apothecaries' pounds", "input" -> "UnitClash_*lbs.*ApothecariesPounds--"}, {"name" -> "PoundsForce", "desc" -> "pounds-force", "input" -> "UnitClash_*lbs.*PoundsForce--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5250525`7.171747724178792, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{87., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"kilograms"]*)


(* ::Input:: *)
(*UnitConvert[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "60.25 mph", Typeset`boxes$$ = TemplateBox[{"60.25", RowBox[{"\"mi\"", " ", "\"/\"", " ", "\"h\""}], "miles per hour", FractionBox["\"Miles\"", "\"Hours\""]}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {{"type" -> "Unit", "word" -> "mph", "template" -> "Assuming ${desc1} for \"${word}\". Use ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "MilesPerHour", "desc" -> "miles per hour", "input" -> "UnitClash_*mph.*MilesPerHour--"}, {"name" -> "Milliphots", "desc" -> "milliphots", "input" -> "UnitClash_*mph.*Milliphots--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3370337`6.979218321644172, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{109., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"kmph"]*)


(* ::Input:: *)
(*UnitConvert[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Eiffel tower", Typeset`boxes$$ = TemplateBox[{"\"Eiffel Tower\"", RowBox[{"Entity", "[", RowBox[{"\"Building\"", ",", "\"EiffelTower::5h9w8\""}], "]"}], "\"Entity[\\\"Building\\\", \\\"EiffelTower::5h9w8\\\"]\"", "\"building\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Eiffel tower", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "Building", "desc" -> "a structure", "input" -> "*C.Eiffel+tower-_*Building-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Eiffel+tower-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.7170717`7.307107576440633, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{138.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Height"],"miles"]*)


(* ::Input:: *)
(*EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Mount Everest", Typeset`boxes$$ = TemplateBox[{"\"Mount Everest\"", RowBox[{"Entity", "[", RowBox[{"\"Mountain\"", ",", "\"MountEverest\""}], "]"}], "\"Entity[\\\"Mountain\\\", \\\"MountEverest\\\"]\"", "\"mountain\""}, "Entity"], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4790479`7.131923934187395, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{137.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Elevation"]/EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Eiffel Tower", Typeset`boxes$$ = TemplateBox[{"\"Eiffel Tower\"", RowBox[{"Entity", "[", RowBox[{"\"Building\"", ",", "\"EiffelTower::5h9w8\""}], "]"}], "\"Entity[\\\"Building\\\", \\\"EiffelTower::5h9w8\\\"]\"", "\"building\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Eiffel Tower", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "Building", "desc" -> "a structure", "input" -> "*C.Eiffel+Tower-_*Building-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Eiffel+Tower-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4230423`7.077928788147874, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{138.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"Height"]*)


(* ::Input:: *)
(*\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Earth", Typeset`boxes$$ = TemplateBox[{"\"Earth\"", RowBox[{"Entity", "[", RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Earth", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "7", "Values" -> {{"name" -> "Planet", "desc" -> "a planet", "input" -> "*C.Earth-_*Planet-"}, {"name" -> "CommonMaterial", "desc" -> "a general material", "input" -> "*C.Earth-_*CommonMaterial-"}, {"name" -> "GeographicRegion", "desc" -> "a geographic region", "input" -> "*C.Earth-_*GeographicRegion-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Earth-_*Word-"}, {"name" -> "Book", "desc" -> "a book", "input" -> "*C.Earth-_*Book-"}, {"name" -> "Movie", "desc" -> "a movie", "input" -> "*C.Earth-_*Movie-"}, {"name" -> "Country", "desc" -> "all countries", "input" -> "*C.Earth-_*Country-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.520052`7.167591764407633, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{101.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Mass"]/\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Moon", Typeset`boxes$$ = TemplateBox[{"\"Moon\"", RowBox[{"Entity", "[", RowBox[{"\"PlanetaryMoon\"", ",", "\"Moon\""}], "]"}], "\"Entity[\\\"PlanetaryMoon\\\", \\\"Moon\\\"]\"", "\"planetary moon\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Moon", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "3", "Values" -> {{"name" -> "PlanetaryMoon", "desc" -> " referring to planetary moons", "input" -> "*C.Moon-_*PlanetaryMoon-"}, {"name" -> "Surname", "desc" -> "a surname", "input" -> "*C.Moon-_*Surname-"}, {"name" -> "CourseAppsWord", "desc" -> " referring to a course app", "input" -> "*C.Moon-_*CourseAppsWord-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3950395`7.048185516399295, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{141.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Mass"]*)


(* ::Input:: *)
(*CurrencyConvert[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "2500 Japanese Yen", Typeset`boxes$$ = TemplateBox[{"2500", RowBox[{FormBox["\"\[Yen]\"", TraditionalForm], " "}], "Japanese yen", "\"Yen\""}, "QuantityPrefix", SyntaxForm -> Mod], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4360436`7.09107491004142, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{67., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "US Dollar", Typeset`boxes$$ = TemplateBox[{InterpretationBox[" ", 1], RowBox[{FormBox["\"$\"", TraditionalForm], " "}], "US dollars", "\"USDollars\""}, "QuantityPrefix", SyntaxForm -> Mod], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4290429`7.0840457129575585, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{45., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]*)


(* ::Input:: *)
(*UnitConvert[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "35 ounces", Typeset`boxes$$ = TemplateBox[{"35", "\"oz\"", "ounces", "\"Ounces\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {{"type" -> "Unit", "word" -> "ounces", "template" -> "Assuming ${desc1} for \"${word}\". Use ${desc2} instead", "count" -> "8", "Values" -> {{"name" -> "Ounces", "desc" -> "avoirdupois ounces", "input" -> "UnitClash_*ounces.*Ounces--"}, {"name" -> "FluidOunces", "desc" -> "US fluid ounces", "input" -> "UnitClash_*ounces.*FluidOunces--"}, {"name" -> "FluidOuncesUK", "desc" -> "UK fluid ounces", "input" -> "UnitClash_*ounces.*FluidOuncesUK--"}, {"name" -> "OuncesForce", "desc" -> "ounces-force", "input" -> "UnitClash_*ounces.*OuncesForce--"}, {"name" -> "OuncesForcePerSquareInch", "desc" -> "ounces of force per square inch", "input" -> "UnitClash_*ounces.*OuncesForcePerSquareInch--"}, {"name" -> "TroyOunces", "desc" -> "troy ounces", "input" -> "UnitClash_*ounces.*TroyOunces--"}, {"name" -> "ApothecariesOunces", "desc" -> "apothecaries' ounces", "input" -> "UnitClash_*ounces.*ApothecariesOunces--"}, {"name" -> "TowerOunces", "desc" -> "tower ounces", "input" -> "UnitClash_*ounces.*TowerOunces--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4940494`7.145315369696482, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{81., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)+\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "1/4 ton", Typeset`boxes$$ = TemplateBox[{"0.25", "\"sh tn\"", "short tons", "\"ShortTons\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {{"type" -> "Unit", "word" -> "ton", "template" -> "Assuming ${desc1} for \"${word}\". Use ${desc2} instead", "count" -> "10", "Values" -> {{"name" -> "ShortTons", "desc" -> "short tons", "input" -> "UnitClash_*ton.*ShortTons--"}, {"name" -> "LongTons", "desc" -> "long tons", "input" -> "UnitClash_*ton.*LongTons--"}, {"name" -> "MetricTons", "desc" -> "metric tons", "input" -> "UnitClash_*ton.*MetricTons--"}, {"name" -> "ShortTonsForce", "desc" -> "short tons-force", "input" -> "UnitClash_*ton.*ShortTonsForce--"}, {"name" -> "TonsOfTNT", "desc" -> "tons of TNT", "input" -> "UnitClash_*ton.*TonsOfTNT--"}, {"name" -> "DisplacementTons", "desc" -> "displacement tons", "input" -> "UnitClash_*ton.*DisplacementTons--"}, {"name" -> "LongTonsForce", "desc" -> "long tons-force", "input" -> "UnitClash_*ton.*LongTonsForce--"}, {"name" -> "MetricTonsForce", "desc" -> "metric tons-force", "input" -> "UnitClash_*ton.*MetricTonsForce--"}, {"name" -> "TonsOfRefrigerationUS", "desc" -> "US commercial tons of refrigeration", "input" -> "UnitClash_*ton.*TonsOfRefrigerationUS--"}, {"name" -> "TonsOfRefrigerationUKCommercial", "desc" -> "UK commercial tons of refrigeration (power)", "input" -> "UnitClash_*ton.*TonsOfRefrigerationUKCommercial--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5850585`7.218744286855016, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{109., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)+\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "45 lbs", Typeset`boxes$$ = TemplateBox[{"45", "\"lb\"", "pounds", "\"Pounds\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {{"type" -> "Unit", "word" -> "lbs", "template" -> "Assuming ${desc1} for \"${word}\". Use ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "Pounds", "desc" -> "pounds-mass", "input" -> "UnitClash_*lbs.*Pounds--"}, {"name" -> "TroyPounds", "desc" -> "troy pounds", "input" -> "UnitClash_*lbs.*TroyPounds--"}, {"name" -> "ApothecariesPounds", "desc" -> "apothecaries' pounds", "input" -> "UnitClash_*lbs.*ApothecariesPounds--"}, {"name" -> "PoundsForce", "desc" -> "pounds-force", "input" -> "UnitClash_*lbs.*PoundsForce--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4770477`7.130106799812947, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{81., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)+\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "9 stone", Typeset`boxes$$ = TemplateBox[{"9", "\"stone\"", "stone", "\"Stones\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {{"type" -> "Unit", "word" -> "stone", "template" -> "Assuming ${desc1} for \"${word}\". Use ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "Stones", "desc" -> "UK stone", "input" -> "UnitClash_*stone.*Stones--"}, {"name" -> "CustomaryStones", "desc" -> "customary stones", "input" -> "UnitClash_*stone.*CustomaryStones--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4350435`7.090077677727473, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{93., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "kgs", Typeset`boxes$$ = TemplateBox[{InterpretationBox[" ", 1], "\"kg\"", "kilograms", "\"Kilograms\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {{"type" -> "Unit", "word" -> "kgs", "template" -> "Assuming ${desc1} for \"${word}\". Use ${desc2} instead", "count" -> "3", "Values" -> {{"name" -> "Kilograms", "desc" -> "kilograms", "input" -> "UnitClash_*kgs.*Kilograms--"}, {"name" -> "KilogramsForce", "desc" -> "kilograms-force", "input" -> "UnitClash_*kgs.*KilogramsForce--"}, {"name" -> "KyrgyzstanSom", "desc" -> "Kyrgyzstan som", "input" -> "UnitClash_*kgs.*KyrgyzstanSom--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3140314`6.948518068846051, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{68., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]*)


(* ::Input:: *)
(*UnitConvert[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Planets", Typeset`boxes$$ = TemplateBox[{"\"planets\"", RowBox[{"EntityClass", "[", RowBox[{"\"Planet\"", ",", "All"}], "]"}], "\"EntityClass[\\\"Planet\\\", All]\"", "\"planets\""}, "EntityClass"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Planets", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "PlanetClass", "desc" -> " referring to planets", "input" -> "*C.Planets-_*PlanetClass-"}, {"name" -> "ExoplanetClass", "desc" -> " referring to exoplanets", "input" -> "*C.Planets-_*ExoplanetClass-"}, {"name" -> "MinorPlanetClass", "desc" -> " referring to minor planets", "input" -> "*C.Planets-_*MinorPlanetClass-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Planets-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5940594`7.225374865754027, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{50., {6., 13.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"DistanceFromEarth"],\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "light minutes", Typeset`boxes$$ = TemplateBox[{InterpretationBox[" ", 1], "\"light minutes\"", "light minutes", "\"LightMinutes\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4390439`7.094052941014957, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{111., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]*)


(* ::Input:: *)
(*Rotate["hello",180 Degree]*)


(* ::Input:: *)
(*Table[Rotate[Style["A",100],n Degree],{n, 0,360,30}]*)


(* ::Input:: *)
(*Manipulate[Rotate[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Cat", Typeset`boxes$$ = TemplateBox[{"\"domestic cat\"", RowBox[{"Entity", "[", RowBox[{"\"Species\"", ",", "\"Species:FelisCatus\""}], "]"}], "\"Entity[\\\"Species\\\", \\\"Species:FelisCatus\\\"]\"", "\"species specification\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Cat", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "5", "Values" -> {{"name" -> "Species", "desc" -> "a species specification", "input" -> "*C.Cat-_*Species-"}, {"name" -> "CatBreedClass", "desc" -> " referring to cat breeds", "input" -> "*C.Cat-_*CatBreedClass-"}, {"name" -> "Financial", "desc" -> "a financial entity", "input" -> "*C.Cat-_*Financial-"}, {"name" -> "Protein", "desc" -> "a protein", "input" -> "*C.Cat-_*Protein-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Cat-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 2.0412041`7.761431425488905, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{196.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Image"],n Degree],{n,0,180}]*)


(* ::Input:: *)
(*Graphics[Line[AnglePath[Table[n Degree,{n,0,180}]]]]*)


(* ::Input:: *)
(*Graphics[Line[AnglePath[30 Degree  IntegerDigits[2^10000]]]]*)


(* ::Input:: *)
(*UnitConvert[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "4.3 light years", Typeset`boxes$$ = TemplateBox[{"4.3", "\"ly\"", "light years", "\"LightYears\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.990099`7.447223615370383, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{69., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"furlongs"]*)


(* ::Input:: *)
(*UnitConvert[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "20000 leagues", Typeset`boxes$$ = TemplateBox[{"20000", "\"leagues\"", "leagues", "\"Leagues\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {{"type" -> "Unit", "word" -> "leagues", "template" -> "Assuming ${desc1} for \"${word}\". Use ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "Leagues", "desc" -> "common leagues", "input" -> "UnitClash_*leagues.*Leagues--"}, {"name" -> "NauticalLeagues", "desc" -> "US nautical leagues", "input" -> "UnitClash_*leagues.*NauticalLeagues--"}, {"name" -> "MetricLieues", "desc" -> "French metric lieues", "input" -> "UnitClash_*leagues.*MetricLieues--"}, {"name" -> "NauticalLeaguesUK", "desc" -> "UK nautical leagues", "input" -> "UnitClash_*leagues.*NauticalLeaguesUK--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4040404`7.057969785883438, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{128., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),"miles"]*)


(* ::Input:: *)
(*Manipulate[Rotate[Style["W",200],n Degree],{n,0,360}]*)


(* ::Input:: *)
(*Rotate[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Great Pyramid", Typeset`boxes$$ = TemplateBox[{"\"Egyptian Pyramids of Giza\"", RowBox[{"EntityClass", "[", RowBox[{"\"Building\"", ",", "\"PyramidsGiza\""}], "]"}], "\"EntityClass[\\\"Building\\\", \\\"PyramidsGiza\\\"]\"", "\"buildings\""}, "EntityClass"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Great Pyramid", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "BuildingClass", "desc" -> "a class of structures", "input" -> "*C.Great+Pyramid-_*BuildingClass-"}, {"name" -> "Building", "desc" -> "a structure", "input" -> "*C.Great+Pyramid-_*Building-"}, {"name" -> "HistoricalSite", "desc" -> "a historic site", "input" -> "*C.Great+Pyramid-_*HistoricalSite-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Great+Pyramid-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5070507`7.15659638010617, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{216.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)["Image"][[1]],180 Degree]*)


(* ::Input:: *)
(*Table[Rotate[Part[Alphabet[],n],RandomInteger[360] Degree],{n,1,Length[Alphabet[]]}]*)


(* ::Input:: *)
(*Graphics[Line[AnglePath[Table[RandomReal[360] Degree,100]]]]*)


(* ::Section:: *)
(*Chapter 18.*)


(* ::Input:: *)
(*GeoDistance[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "New York", Typeset`boxes$$ = TemplateBox[{"\"New York City\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "New York", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "8", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.New+York-_*City-"}, {"name" -> "USState", "desc" -> "a US state", "input" -> "*C.New+York-_*USState-"}, {"name" -> "Periodical", "desc" -> "a periodical", "input" -> "*C.New+York-_*Periodical-"}, {"name" -> "NFLTeam", "desc" -> "an NFL team", "input" -> "*C.New+York-_*NFLTeam-"}, {"name" -> "MLBTeam", "desc" -> "an MLB team", "input" -> "*C.New+York-_*MLBTeam-"}, {"name" -> "NBATeam", "desc" -> "an NBA team", "input" -> "*C.New+York-_*NBATeam-"}, {"name" -> "MusicWork", "desc" -> "a music work", "input" -> "*C.New+York-_*MusicWork-"}, {"name" -> "MusicAlbum", "desc" -> "a music album", "input" -> "*C.New+York-_*MusicAlbum-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5690569`7.206700687167907, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{129.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\), \!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "London", Typeset`boxes$$ = TemplateBox[{"\"London\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"London\"", ",", "\"GreaterLondon\"", ",", "\"UnitedKingdom\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"London\\\", \\\"GreaterLondon\\\", \\\"UnitedKingdom\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "London", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.London-_*City-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.London-_*AdministrativeDivision-"}, {"name" -> "Surname", "desc" -> "a surname", "input" -> "*C.London-_*Surname-"}, {"name" -> "GivenName", "desc" -> "a given name", "input" -> "*C.London-_*GivenName-"}}}, {"type" -> "SubCategory", "word" -> "London", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "7", "Values" -> {{"name" -> "{London, GreaterLondon, UnitedKingdom}", "desc" -> "London (United Kingdom)", "input" -> "*DPClash.CityE.London-_**London.GreaterLondon.UnitedKingdom--"}, {"name" -> "{London, Ontario, Canada}", "desc" -> "London (Canada)", "input" -> "*DPClash.CityE.London-_**London.Ontario.Canada--"}, {"name" -> "{London, Ohio, UnitedStates}", "desc" -> "London (Ohio, USA)", "input" -> "*DPClash.CityE.London-_**London.Ohio.UnitedStates--"}, {"name" -> "{London, Kentucky, UnitedStates}", "desc" -> "London (Kentucky, USA)", "input" -> "*DPClash.CityE.London-_**London.Kentucky.UnitedStates--"}, {"name" -> "{London, Arkansas, UnitedStates}", "desc" -> "London (Arkansas, USA)", "input" -> "*DPClash.CityE.London-_**London.Arkansas.UnitedStates--"}, {"name" -> "{London, California, UnitedStates}", "desc" -> "London (California, USA)", "input" -> "*DPClash.CityE.London-_**London.California.UnitedStates--"}, {"name" -> "{London, Kiritimati, Kiribati}", "desc" -> "London (Kiribati)", "input" -> "*DPClash.CityE.London-_**London.Kiritimati.Kiribati--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5160516`7.1642381224000475, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{101.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]*)


(* ::Input:: *)
(*GeoDistance[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "New York", Typeset`boxes$$ = TemplateBox[{"\"New York City\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "New York", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "8", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.New+York-_*City-"}, {"name" -> "USState", "desc" -> "a US state", "input" -> "*C.New+York-_*USState-"}, {"name" -> "Periodical", "desc" -> "a periodical", "input" -> "*C.New+York-_*Periodical-"}, {"name" -> "NFLTeam", "desc" -> "an NFL team", "input" -> "*C.New+York-_*NFLTeam-"}, {"name" -> "MLBTeam", "desc" -> "an MLB team", "input" -> "*C.New+York-_*MLBTeam-"}, {"name" -> "NBATeam", "desc" -> "an NBA team", "input" -> "*C.New+York-_*NBATeam-"}, {"name" -> "MusicWork", "desc" -> "a music work", "input" -> "*C.New+York-_*MusicWork-"}, {"name" -> "MusicAlbum", "desc" -> "a music album", "input" -> "*C.New+York-_*MusicAlbum-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5690569`7.206700687167907, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{129.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\), \!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "London", Typeset`boxes$$ = TemplateBox[{"\"London\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"London\"", ",", "\"GreaterLondon\"", ",", "\"UnitedKingdom\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"London\\\", \\\"GreaterLondon\\\", \\\"UnitedKingdom\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "London", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.London-_*City-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.London-_*AdministrativeDivision-"}, {"name" -> "Surname", "desc" -> "a surname", "input" -> "*C.London-_*Surname-"}, {"name" -> "GivenName", "desc" -> "a given name", "input" -> "*C.London-_*GivenName-"}}}, {"type" -> "SubCategory", "word" -> "London", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "7", "Values" -> {{"name" -> "{London, GreaterLondon, UnitedKingdom}", "desc" -> "London (United Kingdom)", "input" -> "*DPClash.CityE.London-_**London.GreaterLondon.UnitedKingdom--"}, {"name" -> "{London, Ontario, Canada}", "desc" -> "London (Canada)", "input" -> "*DPClash.CityE.London-_**London.Ontario.Canada--"}, {"name" -> "{London, Ohio, UnitedStates}", "desc" -> "London (Ohio, USA)", "input" -> "*DPClash.CityE.London-_**London.Ohio.UnitedStates--"}, {"name" -> "{London, Kentucky, UnitedStates}", "desc" -> "London (Kentucky, USA)", "input" -> "*DPClash.CityE.London-_**London.Kentucky.UnitedStates--"}, {"name" -> "{London, Arkansas, UnitedStates}", "desc" -> "London (Arkansas, USA)", "input" -> "*DPClash.CityE.London-_**London.Arkansas.UnitedStates--"}, {"name" -> "{London, California, UnitedStates}", "desc" -> "London (California, USA)", "input" -> "*DPClash.CityE.London-_**London.California.UnitedStates--"}, {"name" -> "{London, Kiritimati, Kiribati}", "desc" -> "London (Kiribati)", "input" -> "*DPClash.CityE.London-_**London.Kiritimati.Kiribati--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5160516`7.1642381224000475, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{101.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]/GeoDistance[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "New York", Typeset`boxes$$ = TemplateBox[{"\"New York City\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "New York", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "8", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.New+York-_*City-"}, {"name" -> "USState", "desc" -> "a US state", "input" -> "*C.New+York-_*USState-"}, {"name" -> "Periodical", "desc" -> "a periodical", "input" -> "*C.New+York-_*Periodical-"}, {"name" -> "NFLTeam", "desc" -> "an NFL team", "input" -> "*C.New+York-_*NFLTeam-"}, {"name" -> "MLBTeam", "desc" -> "an MLB team", "input" -> "*C.New+York-_*MLBTeam-"}, {"name" -> "NBATeam", "desc" -> "an NBA team", "input" -> "*C.New+York-_*NBATeam-"}, {"name" -> "MusicWork", "desc" -> "a music work", "input" -> "*C.New+York-_*MusicWork-"}, {"name" -> "MusicAlbum", "desc" -> "a music album", "input" -> "*C.New+York-_*MusicAlbum-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5690569`7.206700687167907, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{129.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\), \!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "San Francisco", Typeset`boxes$$ = TemplateBox[{"\"San Francisco\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"SanFrancisco\"", ",", "\"California\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "San Francisco", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "8", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.San+Francisco-_*City-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.San+Francisco-_*AdministrativeDivision-"}, {"name" -> "NFLTeam", "desc" -> "an NFL team", "input" -> "*C.San+Francisco-_*NFLTeam-"}, {"name" -> "MLBTeam", "desc" -> "an MLB team", "input" -> "*C.San+Francisco-_*MLBTeam-"}, {"name" -> "VisualArts", "desc" -> "an artwork", "input" -> "*C.San+Francisco-_*VisualArts-"}, {"name" -> "Movie", "desc" -> "a movie", "input" -> "*C.San+Francisco-_*Movie-"}, {"name" -> "Periodical", "desc" -> "a periodical", "input" -> "*C.San+Francisco-_*Periodical-"}, {"name" -> "MusicAlbum", "desc" -> "a music album", "input" -> "*C.San+Francisco-_*MusicAlbum-"}}}, {"type" -> "SubCategory", "word" -> "San Francisco", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "34", "Values" -> {{"name" -> "{SanFrancisco, California, UnitedStates}", "desc" -> "San Francisco (United States)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.California.UnitedStates--"}, {"name" -> "{SanFrancisco, Heredia, CostaRica}", "desc" -> "San Francisco (Heredia, Costa Rica)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Heredia.CostaRica--"}, {"name" -> "{SanFrancisco, Cordoba, Argentina}", "desc" -> "San Francisco (Argentina)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Cordoba.Argentina--"}, {"name" -> "{SanFrancisco, Peten, Guatemala}", "desc" -> "San Francisco (Guatemala)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Peten.Guatemala--"}, {"name" -> "{SanFrancisco, Atlantida, Honduras}", "desc" -> "San Francisco (Atlantida, Honduras)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Atlantida.Honduras--"}, {"name" -> "{SanFrancisco, NuevaEcija, Philippines}", "desc" -> "San Francisco (Nueva Ecija, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.NuevaEcija.Philippines--"}, {"name" -> "{SanFrancisco, AgusanDelSur, Philippines}", "desc" -> "San Francisco (Agusan del Sur, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.AgusanDelSur.Philippines--"}, {"name" -> "{SanFrancisco, Quezon, Philippines}", "desc" -> "San Francisco (Quezon, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Quezon.Philippines--"}, {"name" -> "{SanFrancisco, Putumayo, Colombia}", "desc" -> "San Francisco (Putumayo, Colombia)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Putumayo.Colombia--"}, {"name" -> "{SanFrancisco, Managua, Nicaragua}", "desc" -> "San Francisco (Managua, Nicaragua)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Managua.Nicaragua--"}, {"name" -> "{SanFrancisco, Cundinamarca, Colombia}", "desc" -> "San Francisco (Cundinamarca, Colombia)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Cundinamarca.Colombia--"}, {"name" -> "{SanFrancisco, Antioquia, Colombia}", "desc" -> "San Francisco (Antioquia, Colombia)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Antioquia.Colombia--"}, {"name" -> "{SanFrancisco, Veraguas, Panama}", "desc" -> "San Francisco (Panama)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Veraguas.Panama--"}, {"name" -> "{SanFrancisco, Cebu, Philippines}", "desc" -> "San Francisco (Cebu, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Cebu.Philippines--"}, {"name" -> "{SanFrancisco, FranciscoMorazan, Honduras}", "desc" -> "San Francisco (Francisco Morazan, Honduras)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.FranciscoMorazan.Honduras--"}, {"name" -> "{SanFrancisco, Chinandega, Nicaragua}", "desc" -> "San Francisco (Chinandega, Nicaragua)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Chinandega.Nicaragua--"}, {"name" -> "{SanFrancisco, Choluteca, Honduras}", "desc" -> "San Francisco (Choluteca, Honduras)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Choluteca.Honduras--"}, {"name" -> "{SanFrancisco, Bohol, Philippines}", "desc" -> "San Francisco (Bohol, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Bohol.Philippines--"}, {"name" -> "{SanFrancisco, Pampanga, Philippines}", "desc" -> "San Francisco (Pampanga, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Pampanga.Philippines--"}, {"name" -> "{SanFrancisco2, Quezon, Philippines}", "desc" -> "San Francisco (Quezon, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco2.Quezon.Philippines--"}, {"name" -> "{SanFrancisco, Legaspi, Philippines}", "desc" -> "San Francisco (Legaspi, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Legaspi.Philippines--"}, {"name" -> "{SanFrancisco, Antique, Philippines}", "desc" -> "San Francisco (Antique, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Antique.Philippines--"}, {"name" -> "{SanFrancisco, SouthernLeyte, Philippines}", "desc" -> "San Francisco (Southern Leyte, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.SouthernLeyte.Philippines--"}, {"name" -> "{SanFrancisco, Sorsogon, Philippines}", "desc" -> "San Francisco (Sorsogon, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Sorsogon.Philippines--"}, {"name" -> "{SanFrancisco, Lipa, Philippines}", "desc" -> "San Francisco (Lipa, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Lipa.Philippines--"}, {"name" -> "{SanFrancisco, SurigaoDelNorte, Philippines}", "desc" -> "San Francisco (Surigao del Norte, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.SurigaoDelNorte.Philippines--"}, {"name" -> "{SanFrancisco, Tarlac, Philippines}", "desc" -> "San Francisco (Tarlac, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Tarlac.Philippines--"}, {"name" -> "{SanFrancisco, Albay, Philippines}", "desc" -> "San Francisco (Albay, Philippines)", "input" -> "*DPClash.CityE.San+Francisco-_**SanFrancisco.Albay.Philippines--"}, {"name" -> "{Aguacaliente, Cartago, CostaRica}", "desc" -> "Aguacaliente (Cartago, Costa Rica)", "input" -> "*DPClash.CityE.San+Francisco-_**Aguacaliente.Cartago.CostaRica--"}, {"name" -> "{Xonacatlan, Mexico, Mexico}", "desc" -> "Xonacatlan (Mexico, Mexico)", "input" -> "*DPClash.CityE.San+Francisco-_**Xonacatlan.Mexico.Mexico--"}, {"name" -> "{Telixtlahuaca, Oaxaca, Mexico}", "desc" -> "Telixtlahuaca (Oaxaca, Mexico)", "input" -> "*DPClash.CityE.San+Francisco-_**Telixtlahuaca.Oaxaca.Mexico--"}, {"name" -> "{Zacacalco, Mexico, Mexico}", "desc" -> "Zacacalco (Mexico, Mexico)", "input" -> "*DPClash.CityE.San+Francisco-_**Zacacalco.Mexico.Mexico--"}, {"name" -> "{Cuetzalan, Puebla, Mexico}", "desc" -> "Cuetzalan (Puebla, Mexico)", "input" -> "*DPClash.CityE.San+Francisco-_**Cuetzalan.Puebla.Mexico--"}, {"name" -> "{Atexcatzingo, Tlaxcala, Mexico}", "desc" -> "Atexcatzingo (Tlaxcala, Mexico)", "input" -> "*DPClash.CityE.San+Francisco-_**Atexcatzingo.Tlaxcala.Mexico--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 1.0211021`7.460614162859745, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{130.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]*)


(* ::Input:: *)
(*UnitConvert[GeoDistance[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Sydney", Typeset`boxes$$ = TemplateBox[{"\"Sydney\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"Sydney\"", ",", "\"NewSouthWales\"", ",", "\"Australia\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"Sydney\\\", \\\"NewSouthWales\\\", \\\"Australia\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Sydney", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.Sydney-_*City-"}, {"name" -> "GivenName", "desc" -> "a given name", "input" -> "*C.Sydney-_*GivenName-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.Sydney-_*AdministrativeDivision-"}, {"name" -> "TelevisionProgram", "desc" -> "a television series", "input" -> "*C.Sydney-_*TelevisionProgram-"}}}, {"type" -> "SubCategory", "word" -> "Sydney", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "{Sydney, NewSouthWales, Australia}", "desc" -> "Sydney (Australia)", "input" -> "*DPClash.CityE.Sydney-_**Sydney.NewSouthWales.Australia--"}, {"name" -> "{Sydney, NovaScotia, Canada}", "desc" -> "Sydney (Canada)", "input" -> "*DPClash.CityE.Sydney-_**Sydney.NovaScotia.Canada--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3420342`6.985614526828971, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{100.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\), \!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Moscow", Typeset`boxes$$ = TemplateBox[{"\"Moscow\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"Moscow\"", ",", "\"Moscow\"", ",", "\"Russia\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"Moscow\\\", \\\"Moscow\\\", \\\"Russia\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Moscow", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.Moscow-_*City-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.Moscow-_*AdministrativeDivision-"}}}, {"type" -> "SubCategory", "word" -> "Moscow", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "8", "Values" -> {{"name" -> "{Moscow, Moscow, Russia}", "desc" -> "Moscow (Russia)", "input" -> "*DPClash.CityE.Moscow-_**Moscow.Moscow.Russia--"}, {"name" -> "{Moscow, Idaho, UnitedStates}", "desc" -> "Moscow (Idaho, USA)", "input" -> "*DPClash.CityE.Moscow-_**Moscow.Idaho.UnitedStates--"}, {"name" -> "{Moscow, Pennsylvania, UnitedStates}", "desc" -> "Moscow (Pennsylvania, USA)", "input" -> "*DPClash.CityE.Moscow-_**Moscow.Pennsylvania.UnitedStates--"}, {"name" -> "{Moscow, Tennessee, UnitedStates}", "desc" -> "Moscow (Tennessee, USA)", "input" -> "*DPClash.CityE.Moscow-_**Moscow.Tennessee.UnitedStates--"}, {"name" -> "{Moscow, Wisconsin, UnitedStates}", "desc" -> "Moscow (Wisconsin, USA)", "input" -> "*DPClash.CityE.Moscow-_**Moscow.Wisconsin.UnitedStates--"}, {"name" -> "{Moscow, Kansas, UnitedStates}", "desc" -> "Moscow (Kansas, USA)", "input" -> "*DPClash.CityE.Moscow-_**Moscow.Kansas.UnitedStates--"}, {"name" -> "{Moscow, Maine, UnitedStates}", "desc" -> "Moscow (Maine, USA)", "input" -> "*DPClash.CityE.Moscow-_**Moscow.Maine.UnitedStates--"}, {"name" -> "{Moscow, Ohio, UnitedStates}", "desc" -> "Moscow (Ohio, USA)", "input" -> "*DPClash.CityE.Moscow-_**Moscow.Ohio.UnitedStates--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3930393`7.04598097114826, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{103.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)],"km"]*)


(* ::Input:: *)
(*GeoGraphics[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "United States", Typeset`boxes$$ = TemplateBox[{"\"United States\"", RowBox[{"Entity", "[", RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}], "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"", "\"country\""}, "Entity"], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.590059`7.222440432414979, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{124.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]*)


(* ::Input:: *)
(*GeoListPlot[{\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Brazil", Typeset`boxes$$ = TemplateBox[{"\"Brazil\"", RowBox[{"Entity", "[", RowBox[{"\"Country\"", ",", "\"Brazil\""}], "]"}], "\"Entity[\\\"Country\\\", \\\"Brazil\\\"]\"", "\"country\""}, "Entity"], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.340034`6.983067337815091, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{90.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "China", Typeset`boxes$$ = TemplateBox[{"\"China\"", RowBox[{"Entity", "[", RowBox[{"\"Country\"", ",", "\"China\""}], "]"}], "\"Entity[\\\"Country\\\", \\\"China\\\"]\"", "\"country\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "China", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "Country", "desc" -> "a country", "input" -> "*C.China-_*Country-"}, {"name" -> "Species", "desc" -> "a species specification", "input" -> "*C.China-_*Species-"}, {"name" -> "GivenName", "desc" -> "a given name", "input" -> "*C.China-_*GivenName-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.China-_*AdministrativeDivision-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3370337`6.979218321644174, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{108.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "India", Typeset`boxes$$ = TemplateBox[{"\"India\"", RowBox[{"Entity", "[", RowBox[{"\"Country\"", ",", "\"India\""}], "]"}], "\"Entity[\\\"Country\\\", \\\"India\\\"]\"", "\"country\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "India", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "3", "Values" -> {{"name" -> "Country", "desc" -> "a country", "input" -> "*C.India-_*Country-"}, {"name" -> "GivenName", "desc" -> "a given name", "input" -> "*C.India-_*GivenName-"}, {"name" -> "Movie", "desc" -> "a movie", "input" -> "*C.India-_*Movie-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3370337`6.979218321644172, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{104.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Russia", Typeset`boxes$$ = TemplateBox[{"\"Russia\"", RowBox[{"Entity", "[", RowBox[{"\"Country\"", ",", "\"Russia\""}], "]"}], "\"Entity[\\\"Country\\\", \\\"Russia\\\"]\"", "\"country\""}, "Entity"], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3010301`6.930154916366679, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{95.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)}]*)


(* ::Input:: *)
(*GeoGraphics[GeoPath[{\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "nyc", Typeset`boxes$$ = TemplateBox[{"\"New York City\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "nyc", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.nyc-_*City-"}, {"name" -> "VisualArts", "desc" -> "a photograph", "input" -> "*C.nyc-_*VisualArts-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5940594`7.225374865754029, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{129.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Beijing", Typeset`boxes$$ = TemplateBox[{"\"Beijing\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"Beijing\"", ",", "\"Beijing\"", ",", "\"China\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"Beijing\\\", \\\"Beijing\\\", \\\"China\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Beijing", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.Beijing-_*City-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.Beijing-_*AdministrativeDivision-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5990599`7.2290152431621495, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{98.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)}]]*)


(* ::Input:: *)
(*GeoGraphics[GeoDisk[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "location of Great Pyramid", Typeset`boxes$$ = RowBox[{TemplateBox[{"\"Great Pyramid of Giza\"", RowBox[{"Entity", "[", RowBox[{"\"HistoricalSite\"", ",", "\"GreatPyramidOfGiza::kbgx6\""}], "]"}], "\"Entity[\\\"HistoricalSite\\\", \\\"GreatPyramidOfGiza::kbgx6\\\"]\"", "\"historic site\""}, "Entity"], "[", TemplateBox[{"\"coordinates\"", RowBox[{"EntityProperty", "[", RowBox[{"\"HistoricalSite\"", ",", "\"Coordinates\""}], "]"}], "\"EntityProperty[\\\"HistoricalSite\\\", \\\"Coordinates\\\"]\""}, "EntityProperty"], "]"}], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "location", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "HistoricalSiteProperty", "desc" -> " referring to historic sites", "input" -> "*C.location-_*HistoricalSiteProperty-"}, {"name" -> "BuildingProperty", "desc" -> " referring to structures", "input" -> "*C.location-_*BuildingProperty-"}}}, {"type" -> "SubCategory", "word" -> "input", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "Coordinates", "desc" -> "coordinates", "input" -> "*DPClash.HistoricalSiteP.input-_*Coordinates-"}, {"name" -> "MostSpecificLocation", "desc" -> "location", "input" -> "*DPClash.HistoricalSiteP.input-_*MostSpecificLocation-"}}}, {"type" -> "Clash", "word" -> "Great Pyramid", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "3", "Values" -> {{"name" -> "HistoricalSite", "desc" -> "a historic site", "input" -> "*C.Great+Pyramid-_*HistoricalSite-"}, {"name" -> "BuildingClass", "desc" -> "a class of structures", "input" -> "*C.Great+Pyramid-_*BuildingClass-"}, {"name" -> "Building", "desc" -> "a structure", "input" -> "*C.Great+Pyramid-_*Building-"}}}}, Typeset`assumptions$$ = {"*DPClash.HistoricalSiteP.input-_*Coordinates-"}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 1.7741774`7.700542036268543, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{290., {10., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "10 miles", Typeset`boxes$$ = TemplateBox[{"10", "\"mi\"", "miles", "\"Miles\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "miles", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "Unit", "desc" -> "a unit", "input" -> "*C.miles-_*Unit-"}, {"name" -> "GivenName", "desc" -> "a given name", "input" -> "*C.miles-_*GivenName-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4580458`7.112453898776705, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{81., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]]*)


(* ::Input:: *)
(*GeoGraphics[GeoDisk[GeoPosition[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "nyc", Typeset`boxes$$ = TemplateBox[{"\"New York City\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "nyc", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.nyc-_*City-"}, {"name" -> "VisualArts", "desc" -> "a photograph", "input" -> "*C.nyc-_*VisualArts-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4290429`7.08404571295756, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{129.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)],GeoDistance[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "nyc", Typeset`boxes$$ = TemplateBox[{"\"New York City\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "nyc", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.nyc-_*City-"}, {"name" -> "VisualArts", "desc" -> "a photograph", "input" -> "*C.nyc-_*VisualArts-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4450445`7.0999484317537656, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{129.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "san francisco", Typeset`boxes$$ = TemplateBox[{"\"San Francisco\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"SanFrancisco\"", ",", "\"California\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "san francisco", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "8", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.san+francisco-_*City-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.san+francisco-_*AdministrativeDivision-"}, {"name" -> "NFLTeam", "desc" -> "an NFL team", "input" -> "*C.san+francisco-_*NFLTeam-"}, {"name" -> "MLBTeam", "desc" -> "an MLB team", "input" -> "*C.san+francisco-_*MLBTeam-"}, {"name" -> "VisualArts", "desc" -> "an artwork", "input" -> "*C.san+francisco-_*VisualArts-"}, {"name" -> "Movie", "desc" -> "a movie", "input" -> "*C.san+francisco-_*Movie-"}, {"name" -> "Periodical", "desc" -> "a periodical", "input" -> "*C.san+francisco-_*Periodical-"}, {"name" -> "MusicAlbum", "desc" -> "a music album", "input" -> "*C.san+francisco-_*MusicAlbum-"}}}, {"type" -> "SubCategory", "word" -> "san francisco", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "34", "Values" -> {{"name" -> "{SanFrancisco, California, UnitedStates}", "desc" -> "San Francisco (United States)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.California.UnitedStates--"}, {"name" -> "{SanFrancisco, Heredia, CostaRica}", "desc" -> "San Francisco (Heredia, Costa Rica)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Heredia.CostaRica--"}, {"name" -> "{SanFrancisco, Cordoba, Argentina}", "desc" -> "San Francisco (Argentina)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Cordoba.Argentina--"}, {"name" -> "{SanFrancisco, Peten, Guatemala}", "desc" -> "San Francisco (Guatemala)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Peten.Guatemala--"}, {"name" -> "{SanFrancisco, Atlantida, Honduras}", "desc" -> "San Francisco (Atlantida, Honduras)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Atlantida.Honduras--"}, {"name" -> "{SanFrancisco, NuevaEcija, Philippines}", "desc" -> "San Francisco (Nueva Ecija, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.NuevaEcija.Philippines--"}, {"name" -> "{SanFrancisco, AgusanDelSur, Philippines}", "desc" -> "San Francisco (Agusan del Sur, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.AgusanDelSur.Philippines--"}, {"name" -> "{SanFrancisco, Quezon, Philippines}", "desc" -> "San Francisco (Quezon, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Quezon.Philippines--"}, {"name" -> "{SanFrancisco, Putumayo, Colombia}", "desc" -> "San Francisco (Putumayo, Colombia)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Putumayo.Colombia--"}, {"name" -> "{SanFrancisco, Managua, Nicaragua}", "desc" -> "San Francisco (Managua, Nicaragua)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Managua.Nicaragua--"}, {"name" -> "{SanFrancisco, Cundinamarca, Colombia}", "desc" -> "San Francisco (Cundinamarca, Colombia)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Cundinamarca.Colombia--"}, {"name" -> "{SanFrancisco, Antioquia, Colombia}", "desc" -> "San Francisco (Antioquia, Colombia)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Antioquia.Colombia--"}, {"name" -> "{SanFrancisco, Veraguas, Panama}", "desc" -> "San Francisco (Panama)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Veraguas.Panama--"}, {"name" -> "{SanFrancisco, Cebu, Philippines}", "desc" -> "San Francisco (Cebu, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Cebu.Philippines--"}, {"name" -> "{SanFrancisco, FranciscoMorazan, Honduras}", "desc" -> "San Francisco (Francisco Morazan, Honduras)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.FranciscoMorazan.Honduras--"}, {"name" -> "{SanFrancisco, Chinandega, Nicaragua}", "desc" -> "San Francisco (Chinandega, Nicaragua)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Chinandega.Nicaragua--"}, {"name" -> "{SanFrancisco, Choluteca, Honduras}", "desc" -> "San Francisco (Choluteca, Honduras)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Choluteca.Honduras--"}, {"name" -> "{SanFrancisco, Bohol, Philippines}", "desc" -> "San Francisco (Bohol, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Bohol.Philippines--"}, {"name" -> "{SanFrancisco, Pampanga, Philippines}", "desc" -> "San Francisco (Pampanga, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Pampanga.Philippines--"}, {"name" -> "{SanFrancisco2, Quezon, Philippines}", "desc" -> "San Francisco (Quezon, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco2.Quezon.Philippines--"}, {"name" -> "{SanFrancisco, Legaspi, Philippines}", "desc" -> "San Francisco (Legaspi, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Legaspi.Philippines--"}, {"name" -> "{SanFrancisco, Antique, Philippines}", "desc" -> "San Francisco (Antique, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Antique.Philippines--"}, {"name" -> "{SanFrancisco, SouthernLeyte, Philippines}", "desc" -> "San Francisco (Southern Leyte, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.SouthernLeyte.Philippines--"}, {"name" -> "{SanFrancisco, Sorsogon, Philippines}", "desc" -> "San Francisco (Sorsogon, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Sorsogon.Philippines--"}, {"name" -> "{SanFrancisco, Lipa, Philippines}", "desc" -> "San Francisco (Lipa, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Lipa.Philippines--"}, {"name" -> "{SanFrancisco, SurigaoDelNorte, Philippines}", "desc" -> "San Francisco (Surigao del Norte, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.SurigaoDelNorte.Philippines--"}, {"name" -> "{SanFrancisco, Tarlac, Philippines}", "desc" -> "San Francisco (Tarlac, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Tarlac.Philippines--"}, {"name" -> "{SanFrancisco, Albay, Philippines}", "desc" -> "San Francisco (Albay, Philippines)", "input" -> "*DPClash.CityE.san+francisco-_**SanFrancisco.Albay.Philippines--"}, {"name" -> "{Aguacaliente, Cartago, CostaRica}", "desc" -> "Aguacaliente (Cartago, Costa Rica)", "input" -> "*DPClash.CityE.san+francisco-_**Aguacaliente.Cartago.CostaRica--"}, {"name" -> "{Xonacatlan, Mexico, Mexico}", "desc" -> "Xonacatlan (Mexico, Mexico)", "input" -> "*DPClash.CityE.san+francisco-_**Xonacatlan.Mexico.Mexico--"}, {"name" -> "{Telixtlahuaca, Oaxaca, Mexico}", "desc" -> "Telixtlahuaca (Oaxaca, Mexico)", "input" -> "*DPClash.CityE.san+francisco-_**Telixtlahuaca.Oaxaca.Mexico--"}, {"name" -> "{Zacacalco, Mexico, Mexico}", "desc" -> "Zacacalco (Mexico, Mexico)", "input" -> "*DPClash.CityE.san+francisco-_**Zacacalco.Mexico.Mexico--"}, {"name" -> "{Cuetzalan, Puebla, Mexico}", "desc" -> "Cuetzalan (Puebla, Mexico)", "input" -> "*DPClash.CityE.san+francisco-_**Cuetzalan.Puebla.Mexico--"}, {"name" -> "{Atexcatzingo, Tlaxcala, Mexico}", "desc" -> "Atexcatzingo (Tlaxcala, Mexico)", "input" -> "*DPClash.CityE.san+francisco-_**Atexcatzingo.Tlaxcala.Mexico--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.8450845`7.378445129722528, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{130.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]]]*)


(* ::Input:: *)
(*GeoNearest["Country",GeoPosition["NorthPole"],5]*)


(* ::Input:: *)
(*EntityValue[GeoNearest["Country",GeoPosition[{45,0}],3],"Flag"]*)


(* ::Input:: *)
(*GeoListPlot[GeoNearest["Volcano",GeoPosition[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Rome", Typeset`boxes$$ = TemplateBox[{"\"Rome\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"Rome\"", ",", "\"Lazio\"", ",", "\"Italy\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"Rome\\\", \\\"Lazio\\\", \\\"Italy\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Rome", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "5", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.Rome-_*City-"}, {"name" -> "HistoricalCountry", "desc" -> "a historical country", "input" -> "*C.Rome-_*HistoricalCountry-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.Rome-_*AdministrativeDivision-"}, {"name" -> "TelevisionProgram", "desc" -> "a television series", "input" -> "*C.Rome-_*TelevisionProgram-"}, {"name" -> "GivenName", "desc" -> "a given name", "input" -> "*C.Rome-_*GivenName-"}}}, {"type" -> "SubCategory", "word" -> "Rome", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "9", "Values" -> {{"name" -> "{Rome, Lazio, Italy}", "desc" -> "Rome (Italy)", "input" -> "*DPClash.CityE.Rome-_**Rome.Lazio.Italy--"}, {"name" -> "{Rome, Georgia, UnitedStates}", "desc" -> "Rome (Georgia, USA)", "input" -> "*DPClash.CityE.Rome-_**Rome.Georgia.UnitedStates--"}, {"name" -> "{Rome, NewYork, UnitedStates}", "desc" -> "Rome (New York, USA)", "input" -> "*DPClash.CityE.Rome-_**Rome.NewYork.UnitedStates--"}, {"name" -> "{Rome, Wisconsin, UnitedStates}", "desc" -> "Rome (Wisconsin, USA)", "input" -> "*DPClash.CityE.Rome-_**Rome.Wisconsin.UnitedStates--"}, {"name" -> "{Rome, Illinois, UnitedStates}", "desc" -> "Rome (Illinois, USA)", "input" -> "*DPClash.CityE.Rome-_**Rome.Illinois.UnitedStates--"}, {"name" -> "{Rome, Maine, UnitedStates}", "desc" -> "Rome (Maine, USA)", "input" -> "*DPClash.CityE.Rome-_**Rome.Maine.UnitedStates--"}, {"name" -> "{Rome, Pennsylvania, UnitedStates}", "desc" -> "Rome (Pennsylvania, USA)", "input" -> "*DPClash.CityE.Rome-_**Rome.Pennsylvania.UnitedStates--"}, {"name" -> "{Rome, Iowa, UnitedStates}", "desc" -> "Rome (Iowa, USA)", "input" -> "*DPClash.CityE.Rome-_**Rome.Iowa.UnitedStates--"}, {"name" -> "{Rome, Ohio, UnitedStates}", "desc" -> "Rome (Ohio, USA)", "input" -> "*DPClash.CityE.Rome-_**Rome.Ohio.UnitedStates--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4212027`7.076036139939485, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{93.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)],25]]*)


(* ::Input:: *)
(*GeoPosition[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "nyc", Typeset`boxes$$ = TemplateBox[{"\"New York City\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "nyc", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.nyc-_*City-"}, {"name" -> "VisualArts", "desc" -> "a photograph", "input" -> "*C.nyc-_*VisualArts-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4212027`7.076036139939483, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{129.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)][[1,1]]-GeoPosition[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "los angeles", Typeset`boxes$$ = TemplateBox[{"\"Los Angeles\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"LosAngeles\"", ",", "\"California\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"LosAngeles\\\", \\\"California\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "los angeles", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "6", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.los+angeles-_*City-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.los+angeles-_*AdministrativeDivision-"}, {"name" -> "NBATeam", "desc" -> "an NBA team", "input" -> "*C.los+angeles-_*NBATeam-"}, {"name" -> "MLBTeam", "desc" -> "an MLB team", "input" -> "*C.los+angeles-_*MLBTeam-"}, {"name" -> "MusicAlbum", "desc" -> "a music album", "input" -> "*C.los+angeles-_*MusicAlbum-"}, {"name" -> "MusicWork", "desc" -> "a music work", "input" -> "*C.los+angeles-_*MusicWork-"}}}, {"type" -> "SubCategory", "word" -> "los angeles", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "{LosAngeles, California, UnitedStates}", "desc" -> "Los Angeles (California, USA)", "input" -> "*DPClash.CityE.los+angeles-_**LosAngeles.California.UnitedStates--"}, {"name" -> "{EastLosAngeles, California, UnitedStates}", "desc" -> "East Los Angeles (California, USA)", "input" -> "*DPClash.CityE.los+angeles-_**EastLosAngeles.California.UnitedStates--"}, {"name" -> "{LosAngeles, BioBio, Chile}", "desc" -> "Los Angeles (Chile)", "input" -> "*DPClash.CityE.los+angeles-_**LosAngeles.BioBio.Chile--"}, {"name" -> "{LosAngeles, Butuan, Philippines}", "desc" -> "Los Angeles (Philippines)", "input" -> "*DPClash.CityE.los+angeles-_**LosAngeles.Butuan.Philippines--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4992032`7.1498223541004045, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{122.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)][[1,1]]*)


(* ::Input:: *)
(*GeoListPlot[EntityValue[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "countries in nato", Typeset`boxes$$ = TemplateBox[{"\"North Atlantic Treaty Organization\"", RowBox[{"EntityClass", "[", RowBox[{"\"Country\"", ",", "\"NorthAtlanticTreatyOrganization\""}], "]"}], "\"EntityClass[\\\"Country\\\", \\\"NorthAtlanticTreatyOrganization\\\"]\"", "\"countries\""}, "EntityClass"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "nato", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "CountryClass", "desc" -> "a class of countries", "input" -> "*C.nato-_*CountryClass-"}, {"name" -> "City", "desc" -> "a city", "input" -> "*C.nato-_*City-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 1.0764069`7.483521466517752, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{251.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "member", Typeset`boxes$$ = "\"Members\"", Typeset`allassumptions$$ = {"Members"}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "CSCEParse" -> 0.2496016`6.848792358436421}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, {"CodeContext" -> {"EntityValue", 2}}, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{101., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]]*)


(* ::Input:: *)
(*GeoGraphics[Style[GeoPath[{{\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "moscow", Typeset`boxes$$ = TemplateBox[{"\"Moscow\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"Moscow\"", ",", "\"Moscow\"", ",", "\"Russia\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"Moscow\\\", \\\"Moscow\\\", \\\"Russia\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "moscow", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.moscow-_*City-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.moscow-_*AdministrativeDivision-"}}}, {"type" -> "SubCategory", "word" -> "moscow", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "8", "Values" -> {{"name" -> "{Moscow, Moscow, Russia}", "desc" -> "Moscow (Russia)", "input" -> "*DPClash.CityE.moscow-_**Moscow.Moscow.Russia--"}, {"name" -> "{Moscow, Idaho, UnitedStates}", "desc" -> "Moscow (Idaho, USA)", "input" -> "*DPClash.CityE.moscow-_**Moscow.Idaho.UnitedStates--"}, {"name" -> "{Moscow, Pennsylvania, UnitedStates}", "desc" -> "Moscow (Pennsylvania, USA)", "input" -> "*DPClash.CityE.moscow-_**Moscow.Pennsylvania.UnitedStates--"}, {"name" -> "{Moscow, Tennessee, UnitedStates}", "desc" -> "Moscow (Tennessee, USA)", "input" -> "*DPClash.CityE.moscow-_**Moscow.Tennessee.UnitedStates--"}, {"name" -> "{Moscow, Wisconsin, UnitedStates}", "desc" -> "Moscow (Wisconsin, USA)", "input" -> "*DPClash.CityE.moscow-_**Moscow.Wisconsin.UnitedStates--"}, {"name" -> "{Moscow, Kansas, UnitedStates}", "desc" -> "Moscow (Kansas, USA)", "input" -> "*DPClash.CityE.moscow-_**Moscow.Kansas.UnitedStates--"}, {"name" -> "{Moscow, Maine, UnitedStates}", "desc" -> "Moscow (Maine, USA)", "input" -> "*DPClash.CityE.moscow-_**Moscow.Maine.UnitedStates--"}, {"name" -> "{Moscow, Ohio, UnitedStates}", "desc" -> "Moscow (Ohio, USA)", "input" -> "*DPClash.CityE.moscow-_**Moscow.Ohio.UnitedStates--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.4212008`7.076034180879447, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{103.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "beijing", Typeset`boxes$$ = TemplateBox[{"\"Beijing\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"Beijing\"", ",", "\"Beijing\"", ",", "\"China\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"Beijing\\\", \\\"Beijing\\\", \\\"China\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "beijing", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "3", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.beijing-_*City-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.beijing-_*AdministrativeDivision-"}, {"name" -> "TranslationData", "desc" -> " referring to translations", "input" -> "*C.beijing-_*TranslationData-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3900007`7.042610380024686, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{98.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)},{\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "washington dc", Typeset`boxes$$ = TemplateBox[{"\"Washington\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"Washington\"", ",", "\"DistrictOfColumbia\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"Washington\\\", \\\"DistrictOfColumbia\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.561601`7.200972865933419, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{102.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "london", Typeset`boxes$$ = TemplateBox[{"\"London\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"London\"", ",", "\"GreaterLondon\"", ",", "\"UnitedKingdom\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"London\\\", \\\"GreaterLondon\\\", \\\"UnitedKingdom\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "london", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.london-_*City-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.london-_*AdministrativeDivision-"}, {"name" -> "Surname", "desc" -> "a surname", "input" -> "*C.london-_*Surname-"}, {"name" -> "GivenName", "desc" -> "a given name", "input" -> "*C.london-_*GivenName-"}}}, {"type" -> "SubCategory", "word" -> "london", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "7", "Values" -> {{"name" -> "{London, GreaterLondon, UnitedKingdom}", "desc" -> "London (United Kingdom)", "input" -> "*DPClash.CityE.london-_**London.GreaterLondon.UnitedKingdom--"}, {"name" -> "{London, Ontario, Canada}", "desc" -> "London (Canada)", "input" -> "*DPClash.CityE.london-_**London.Ontario.Canada--"}, {"name" -> "{London, Ohio, UnitedStates}", "desc" -> "London (Ohio, USA)", "input" -> "*DPClash.CityE.london-_**London.Ohio.UnitedStates--"}, {"name" -> "{London, Kentucky, UnitedStates}", "desc" -> "London (Kentucky, USA)", "input" -> "*DPClash.CityE.london-_**London.Kentucky.UnitedStates--"}, {"name" -> "{London, Arkansas, UnitedStates}", "desc" -> "London (Arkansas, USA)", "input" -> "*DPClash.CityE.london-_**London.Arkansas.UnitedStates--"}, {"name" -> "{London, California, UnitedStates}", "desc" -> "London (California, USA)", "input" -> "*DPClash.CityE.london-_**London.California.UnitedStates--"}, {"name" -> "{London, Kiritimati, Kiribati}", "desc" -> "London (Kiribati)", "input" -> "*DPClash.CityE.london-_**London.Kiritimati.Kiribati--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5304009`7.17614924581709, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{101.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)}}],Thick,Red]]*)


(* ::Input:: *)
(*GeoDistance[GeoPosition[{0,0}],\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Eiffel tower", Typeset`boxes$$ = TemplateBox[{"\"Eiffel Tower\"", RowBox[{"Entity", "[", RowBox[{"\"Building\"", ",", "\"EiffelTower::5h9w8\""}], "]"}], "\"Entity[\\\"Building\\\", \\\"EiffelTower::5h9w8\\\"]\"", "\"building\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Eiffel tower", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "Building", "desc" -> "a structure", "input" -> "*C.Eiffel+tower-_*Building-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.Eiffel+tower-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.592801`7.22445392108215, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{138.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]*)


(* ::Input:: *)
(*GeoGraphics[Style[GeoDisk[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "los angeles", Typeset`boxes$$ = TemplateBox[{"\"Los Angeles\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"LosAngeles\"", ",", "\"California\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"LosAngeles\\\", \\\"California\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "los angeles", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "6", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.los+angeles-_*City-"}, {"name" -> "AdministrativeDivision", "desc" -> "an administrative division", "input" -> "*C.los+angeles-_*AdministrativeDivision-"}, {"name" -> "NBATeam", "desc" -> "an NBA team", "input" -> "*C.los+angeles-_*NBATeam-"}, {"name" -> "MLBTeam", "desc" -> "an MLB team", "input" -> "*C.los+angeles-_*MLBTeam-"}, {"name" -> "MusicAlbum", "desc" -> "a music album", "input" -> "*C.los+angeles-_*MusicAlbum-"}, {"name" -> "MusicWork", "desc" -> "a music work", "input" -> "*C.los+angeles-_*MusicWork-"}}}, {"type" -> "SubCategory", "word" -> "los angeles", "template" -> "Assuming ${desc1}. Use ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "{LosAngeles, California, UnitedStates}", "desc" -> "Los Angeles (California, USA)", "input" -> "*DPClash.CityE.los+angeles-_**LosAngeles.California.UnitedStates--"}, {"name" -> "{EastLosAngeles, California, UnitedStates}", "desc" -> "East Los Angeles (California, USA)", "input" -> "*DPClash.CityE.los+angeles-_**EastLosAngeles.California.UnitedStates--"}, {"name" -> "{LosAngeles, BioBio, Chile}", "desc" -> "Los Angeles (Chile)", "input" -> "*DPClash.CityE.los+angeles-_**LosAngeles.BioBio.Chile--"}, {"name" -> "{LosAngeles, Butuan, Philippines}", "desc" -> "Los Angeles (Philippines)", "input" -> "*DPClash.CityE.los+angeles-_**LosAngeles.Butuan.Philippines--"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.514801`7.163184375345377, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{122.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "100 miles", Typeset`boxes$$ = TemplateBox[{"100", "\"mi\"", "miles", "\"Miles\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.5148009`7.163184290983746, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{69., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)],Red]]*)


(* ::Input:: *)
(*Table[GeoGraphics[GeoDisk[\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "empire state building", Typeset`boxes$$ = TemplateBox[{"\"Empire State Building\"", RowBox[{"Entity", "[", RowBox[{"\"Building\"", ",", "\"EmpireStateBuilding::h583b\""}], "]"}], "\"Entity[\\\"Building\\\", \\\"EmpireStateBuilding::h583b\\\"]\"", "\"building\""}, "Entity"], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.7176013`7.307428210296664, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{164.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),n \!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "miles", Typeset`boxes$$ = TemplateBox[{InterpretationBox[" ", 1], "\"mi\"", "miles", "\"Miles\""}, "Quantity", SyntaxForm -> Mod], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "miles", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "4", "Values" -> {{"name" -> "Unit", "desc" -> "a unit", "input" -> "*C.miles-_*Unit-"}, {"name" -> "GivenName", "desc" -> "a given name", "input" -> "*C.miles-_*GivenName-"}, {"name" -> "Surname", "desc" -> "a surname", "input" -> "*C.miles-_*Surname-"}, {"name" -> "Word", "desc" -> "a word", "input" -> "*C.miles-_*Word-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3900006`7.042610268667312, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{68., {8., 16.}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]],{n,3}]*)


(* ::Input:: *)
(*GeoNearest["Country",\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "nyc", Typeset`boxes$$ = TemplateBox[{"\"New York City\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "nyc", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "2", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.nyc-_*City-"}, {"name" -> "VisualArts", "desc" -> "a photograph", "input" -> "*C.nyc-_*VisualArts-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.3744007`7.024881645543482, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{129.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\),5]*)


(* ::Input:: *)
(*GeoNearest["Ocean",\!\(\**)
(*NamespaceBox["LinguisticAssistant",*)
(*DynamicModuleBox[{Typeset`query$$ = "Chicago", Typeset`boxes$$ = TemplateBox[{"\"Chicago\"", RowBox[{"Entity", "[", RowBox[{"\"City\"", ",", RowBox[{"{", RowBox[{"\"Chicago\"", ",", "\"Illinois\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}], "\"Entity[\\\"City\\\", {\\\"Chicago\\\", \\\"Illinois\\\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], Typeset`allassumptions$$ = {{"type" -> "Clash", "word" -> "Chicago", "template" -> "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> "7", "Values" -> {{"name" -> "City", "desc" -> "a city", "input" -> "*C.Chicago-_*City-"}, {"name" -> "NFLTeam", "desc" -> "an NFL team", "input" -> "*C.Chicago-_*NFLTeam-"}, {"name" -> "MLBTeam", "desc" -> "an MLB team", "input" -> "*C.Chicago-_*MLBTeam-"}, {"name" -> "NBATeam", "desc" -> "an NBA team", "input" -> "*C.Chicago-_*NBATeam-"}, {"name" -> "Periodical", "desc" -> "a periodical", "input" -> "*C.Chicago-_*Periodical-"}, {"name" -> "MusicAct", "desc" -> "a music act", "input" -> "*C.Chicago-_*MusicAct-"}, {"name" -> "Movie", "desc" -> "a movie", "input" -> "*C.Chicago-_*Movie-"}}}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {"Online" -> True, "Allowed" -> True, "mparse.jsp" -> 0.530401`7.176149327697503, "Messages" -> {}}}, *)
(*DynamicBox[ToBoxes[AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, Dynamic[Typeset`query$$], Dynamic[Typeset`boxes$$], Dynamic[Typeset`allassumptions$$], Dynamic[Typeset`assumptions$$], Dynamic[Typeset`open$$], Dynamic[Typeset`querystate$$]], StandardForm],*)
(*ImageSizeCache->{103.44, {6.719999999999999, 14.72}},*)
(*TrackedSymbols:>{Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],*)
(*DynamicModuleValues:>{},*)
(*UndoTrackedVariables:>{Typeset`open$$}],*)
(*BaseStyle->{"Deploy"},*)
(*DeleteWithContents->True,*)
(*Editable->False,*)
(*SelectWithContents->True]\)]*)
